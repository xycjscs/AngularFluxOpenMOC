/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.7
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#define SWIGPYTHON
#define SWIG_PYTHON_DIRECTOR_NO_VTABLE


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#if defined(_DEBUG) && defined(SWIG_PYTHON_INTERPRETER_NO_DEBUG)
/* Use debug wrappers with the Python release dll */
# undef _DEBUG
# include <Python.h>
# define _DEBUG
#else
# include <Python.h>
#endif

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      size_t l = 0;
      size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  const unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    char d = *(c++);
    unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13



/* Compatibility macros for Python 3 */
#if PY_VERSION_HEX >= 0x03000000

#define PyClass_Check(obj) PyObject_IsInstance(obj, (PyObject *)&PyType_Type)
#define PyInt_Check(x) PyLong_Check(x)
#define PyInt_AsLong(x) PyLong_AsLong(x)
#define PyInt_FromLong(x) PyLong_FromLong(x)
#define PyInt_FromSize_t(x) PyLong_FromSize_t(x)
#define PyString_Check(name) PyBytes_Check(name)
#define PyString_FromString(x) PyUnicode_FromString(x)
#define PyString_Format(fmt, args)  PyUnicode_Format(fmt, args)
#define PyString_AsString(str) PyBytes_AsString(str)
#define PyString_Size(str) PyBytes_Size(str)	
#define PyString_InternFromString(key) PyUnicode_InternFromString(key)
#define Py_TPFLAGS_HAVE_CLASS Py_TPFLAGS_BASETYPE
#define PyString_AS_STRING(x) PyUnicode_AS_STRING(x)
#define _PyLong_FromSsize_t(x) PyLong_FromSsize_t(x)

#endif

#ifndef Py_TYPE
#  define Py_TYPE(op) ((op)->ob_type)
#endif

/* SWIG APIs for compatibility of both Python 2 & 3 */

#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_Python_str_FromFormat PyUnicode_FromFormat
#else
#  define SWIG_Python_str_FromFormat PyString_FromFormat
#endif


/* Warning: This function will allocate a new string in Python 3,
 * so please call SWIG_Python_str_DelForPy3(x) to free the space.
 */
SWIGINTERN char*
SWIG_Python_str_AsChar(PyObject *str)
{
#if PY_VERSION_HEX >= 0x03000000
  char *cstr;
  char *newstr;
  Py_ssize_t len;
  str = PyUnicode_AsUTF8String(str);
  PyBytes_AsStringAndSize(str, &cstr, &len);
  newstr = (char *) malloc(len+1);
  memcpy(newstr, cstr, len+1);
  Py_XDECREF(str);
  return newstr;
#else
  return PyString_AsString(str);
#endif
}

#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_Python_str_DelForPy3(x) free( (void*) (x) )
#else
#  define SWIG_Python_str_DelForPy3(x) 
#endif


SWIGINTERN PyObject*
SWIG_Python_str_FromChar(const char *c)
{
#if PY_VERSION_HEX >= 0x03000000
  return PyUnicode_FromString(c); 
#else
  return PyString_FromString(c);
#endif
}

/* Add PyOS_snprintf for old Pythons */
#if PY_VERSION_HEX < 0x02020000
# if defined(_MSC_VER) || defined(__BORLANDC__) || defined(_WATCOM)
#  define PyOS_snprintf _snprintf
# else
#  define PyOS_snprintf snprintf
# endif
#endif

/* A crude PyString_FromFormat implementation for old Pythons */
#if PY_VERSION_HEX < 0x02020000

#ifndef SWIG_PYBUFFER_SIZE
# define SWIG_PYBUFFER_SIZE 1024
#endif

static PyObject *
PyString_FromFormat(const char *fmt, ...) {
  va_list ap;
  char buf[SWIG_PYBUFFER_SIZE * 2];
  int res;
  va_start(ap, fmt);
  res = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return (res < 0 || res >= (int)sizeof(buf)) ? 0 : PyString_FromString(buf);
}
#endif

/* Add PyObject_Del for old Pythons */
#if PY_VERSION_HEX < 0x01060000
# define PyObject_Del(op) PyMem_DEL((op))
#endif
#ifndef PyObject_DEL
# define PyObject_DEL PyObject_Del
#endif

/* A crude PyExc_StopIteration exception for old Pythons */
#if PY_VERSION_HEX < 0x02020000
# ifndef PyExc_StopIteration
#  define PyExc_StopIteration PyExc_RuntimeError
# endif
# ifndef PyObject_GenericGetAttr
#  define PyObject_GenericGetAttr 0
# endif
#endif

/* Py_NotImplemented is defined in 2.1 and up. */
#if PY_VERSION_HEX < 0x02010000
# ifndef Py_NotImplemented
#  define Py_NotImplemented PyExc_RuntimeError
# endif
#endif

/* A crude PyString_AsStringAndSize implementation for old Pythons */
#if PY_VERSION_HEX < 0x02010000
# ifndef PyString_AsStringAndSize
#  define PyString_AsStringAndSize(obj, s, len) {*s = PyString_AsString(obj); *len = *s ? strlen(*s) : 0;}
# endif
#endif

/* PySequence_Size for old Pythons */
#if PY_VERSION_HEX < 0x02000000
# ifndef PySequence_Size
#  define PySequence_Size PySequence_Length
# endif
#endif

/* PyBool_FromLong for old Pythons */
#if PY_VERSION_HEX < 0x02030000
static
PyObject *PyBool_FromLong(long ok)
{
  PyObject *result = ok ? Py_True : Py_False;
  Py_INCREF(result);
  return result;
}
#endif

/* Py_ssize_t for old Pythons */
/* This code is as recommended by: */
/* http://www.python.org/dev/peps/pep-0353/#conversion-guidelines */
#if PY_VERSION_HEX < 0x02050000 && !defined(PY_SSIZE_T_MIN)
typedef int Py_ssize_t;
# define PY_SSIZE_T_MAX INT_MAX
# define PY_SSIZE_T_MIN INT_MIN
typedef inquiry lenfunc;
typedef intargfunc ssizeargfunc;
typedef intintargfunc ssizessizeargfunc;
typedef intobjargproc ssizeobjargproc;
typedef intintobjargproc ssizessizeobjargproc;
typedef getreadbufferproc readbufferproc;
typedef getwritebufferproc writebufferproc;
typedef getsegcountproc segcountproc;
typedef getcharbufferproc charbufferproc;
static long PyNumber_AsSsize_t (PyObject *x, void *SWIGUNUSEDPARM(exc))
{
  long result = 0;
  PyObject *i = PyNumber_Int(x);
  if (i) {
    result = PyInt_AsLong(i);
    Py_DECREF(i);
  }
  return result;
}
#endif

#if PY_VERSION_HEX < 0x02050000
#define PyInt_FromSize_t(x) PyInt_FromLong((long)x)
#endif

#if PY_VERSION_HEX < 0x02040000
#define Py_VISIT(op)				\
  do { 						\
    if (op) {					\
      int vret = visit((op), arg);		\
      if (vret)					\
        return vret;				\
    }						\
  } while (0)
#endif

#if PY_VERSION_HEX < 0x02030000
typedef struct {
  PyTypeObject type;
  PyNumberMethods as_number;
  PyMappingMethods as_mapping;
  PySequenceMethods as_sequence;
  PyBufferProcs as_buffer;
  PyObject *name, *slots;
} PyHeapTypeObject;
#endif

#if PY_VERSION_HEX < 0x02030000
typedef destructor freefunc;
#endif

#if ((PY_MAJOR_VERSION == 2 && PY_MINOR_VERSION > 6) || \
     (PY_MAJOR_VERSION == 3 && PY_MINOR_VERSION > 0) || \
     (PY_MAJOR_VERSION > 3))
# define SWIGPY_USE_CAPSULE
# define SWIGPY_CAPSULE_NAME ((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION ".type_pointer_capsule" SWIG_TYPE_TABLE_NAME)
#endif

#if PY_VERSION_HEX < 0x03020000
#define PyDescr_TYPE(x) (((PyDescrObject *)(x))->d_type)
#define PyDescr_NAME(x) (((PyDescrObject *)(x))->d_name)
#endif

/* -----------------------------------------------------------------------------
 * error manipulation
 * ----------------------------------------------------------------------------- */

SWIGRUNTIME PyObject*
SWIG_Python_ErrorType(int code) {
  PyObject* type = 0;
  switch(code) {
  case SWIG_MemoryError:
    type = PyExc_MemoryError;
    break;
  case SWIG_IOError:
    type = PyExc_IOError;
    break;
  case SWIG_RuntimeError:
    type = PyExc_RuntimeError;
    break;
  case SWIG_IndexError:
    type = PyExc_IndexError;
    break;
  case SWIG_TypeError:
    type = PyExc_TypeError;
    break;
  case SWIG_DivisionByZero:
    type = PyExc_ZeroDivisionError;
    break;
  case SWIG_OverflowError:
    type = PyExc_OverflowError;
    break;
  case SWIG_SyntaxError:
    type = PyExc_SyntaxError;
    break;
  case SWIG_ValueError:
    type = PyExc_ValueError;
    break;
  case SWIG_SystemError:
    type = PyExc_SystemError;
    break;
  case SWIG_AttributeError:
    type = PyExc_AttributeError;
    break;
  default:
    type = PyExc_RuntimeError;
  }
  return type;
}


SWIGRUNTIME void
SWIG_Python_AddErrorMsg(const char* mesg)
{
  PyObject *type = 0;
  PyObject *value = 0;
  PyObject *traceback = 0;

  if (PyErr_Occurred()) PyErr_Fetch(&type, &value, &traceback);
  if (value) {
    char *tmp;
    PyObject *old_str = PyObject_Str(value);
    PyErr_Clear();
    Py_XINCREF(type);

    PyErr_Format(type, "%s %s", tmp = SWIG_Python_str_AsChar(old_str), mesg);
    SWIG_Python_str_DelForPy3(tmp);
    Py_DECREF(old_str);
    Py_DECREF(value);
  } else {
    PyErr_SetString(PyExc_RuntimeError, mesg);
  }
}

#if defined(SWIG_PYTHON_NO_THREADS)
#  if defined(SWIG_PYTHON_THREADS)
#    undef SWIG_PYTHON_THREADS
#  endif
#endif
#if defined(SWIG_PYTHON_THREADS) /* Threading support is enabled */
#  if !defined(SWIG_PYTHON_USE_GIL) && !defined(SWIG_PYTHON_NO_USE_GIL)
#    if (PY_VERSION_HEX >= 0x02030000) /* For 2.3 or later, use the PyGILState calls */
#      define SWIG_PYTHON_USE_GIL
#    endif
#  endif
#  if defined(SWIG_PYTHON_USE_GIL) /* Use PyGILState threads calls */
#    ifndef SWIG_PYTHON_INITIALIZE_THREADS
#     define SWIG_PYTHON_INITIALIZE_THREADS  PyEval_InitThreads() 
#    endif
#    ifdef __cplusplus /* C++ code */
       class SWIG_Python_Thread_Block {
         bool status;
         PyGILState_STATE state;
       public:
         void end() { if (status) { PyGILState_Release(state); status = false;} }
         SWIG_Python_Thread_Block() : status(true), state(PyGILState_Ensure()) {}
         ~SWIG_Python_Thread_Block() { end(); }
       };
       class SWIG_Python_Thread_Allow {
         bool status;
         PyThreadState *save;
       public:
         void end() { if (status) { PyEval_RestoreThread(save); status = false; }}
         SWIG_Python_Thread_Allow() : status(true), save(PyEval_SaveThread()) {}
         ~SWIG_Python_Thread_Allow() { end(); }
       };
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   SWIG_Python_Thread_Block _swig_thread_block
#      define SWIG_PYTHON_THREAD_END_BLOCK     _swig_thread_block.end()
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   SWIG_Python_Thread_Allow _swig_thread_allow
#      define SWIG_PYTHON_THREAD_END_ALLOW     _swig_thread_allow.end()
#    else /* C code */
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   PyGILState_STATE _swig_thread_block = PyGILState_Ensure()
#      define SWIG_PYTHON_THREAD_END_BLOCK     PyGILState_Release(_swig_thread_block)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   PyThreadState *_swig_thread_allow = PyEval_SaveThread()
#      define SWIG_PYTHON_THREAD_END_ALLOW     PyEval_RestoreThread(_swig_thread_allow)
#    endif
#  else /* Old thread way, not implemented, user must provide it */
#    if !defined(SWIG_PYTHON_INITIALIZE_THREADS)
#      define SWIG_PYTHON_INITIALIZE_THREADS
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_BLOCK)
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_BLOCK)
#      define SWIG_PYTHON_THREAD_END_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_ALLOW)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_ALLOW)
#      define SWIG_PYTHON_THREAD_END_ALLOW
#    endif
#  endif
#else /* No thread support */
#  define SWIG_PYTHON_INITIALIZE_THREADS
#  define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#  define SWIG_PYTHON_THREAD_END_BLOCK
#  define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#  define SWIG_PYTHON_THREAD_END_ALLOW
#endif

/* -----------------------------------------------------------------------------
 * Python API portion that goes into the runtime
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

/* -----------------------------------------------------------------------------
 * Constant declarations
 * ----------------------------------------------------------------------------- */

/* Constant Types */
#define SWIG_PY_POINTER 4
#define SWIG_PY_BINARY  5

/* Constant information structure */
typedef struct swig_const_info {
  int type;
  char *name;
  long lvalue;
  double dvalue;
  void   *pvalue;
  swig_type_info **ptype;
} swig_const_info;


/* -----------------------------------------------------------------------------
 * Wrapper of PyInstanceMethod_New() used in Python 3
 * It is exported to the generated module, used for -fastproxy
 * ----------------------------------------------------------------------------- */
#if PY_VERSION_HEX >= 0x03000000
SWIGRUNTIME PyObject* SWIG_PyInstanceMethod_New(PyObject *SWIGUNUSEDPARM(self), PyObject *func)
{
  return PyInstanceMethod_New(func);
}
#else
SWIGRUNTIME PyObject* SWIG_PyInstanceMethod_New(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(func))
{
  return NULL;
}
#endif

#ifdef __cplusplus
}
#endif


/* -----------------------------------------------------------------------------
 * pyrun.swg
 *
 * This file contains the runtime support for Python modules
 * and includes code for managing global variables and pointer
 * type checking.
 *
 * ----------------------------------------------------------------------------- */

/* Common SWIG API */

/* for raw pointers */
#define SWIG_Python_ConvertPtr(obj, pptr, type, flags)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, 0)
#define SWIG_ConvertPtr(obj, pptr, type, flags)         SWIG_Python_ConvertPtr(obj, pptr, type, flags)
#define SWIG_ConvertPtrAndOwn(obj,pptr,type,flags,own)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, own)

#ifdef SWIGPYTHON_BUILTIN
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(self, ptr, type, flags)
#else
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(NULL, ptr, type, flags)
#endif

#define SWIG_InternalNewPointerObj(ptr, type, flags)	SWIG_Python_NewPointerObj(NULL, ptr, type, flags)

#define SWIG_CheckImplicit(ty)                          SWIG_Python_CheckImplicit(ty) 
#define SWIG_AcquirePtr(ptr, src)                       SWIG_Python_AcquirePtr(ptr, src)
#define swig_owntype                                    int

/* for raw packed data */
#define SWIG_ConvertPacked(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewPackedObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)

/* for class or struct pointers */
#define SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_ConvertPtr(obj, pptr, type, flags)
#define SWIG_NewInstanceObj(ptr, type, flags)           SWIG_NewPointerObj(ptr, type, flags)

/* for C or C++ function pointers */
#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_Python_ConvertFunctionPtr(obj, pptr, type)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_Python_NewPointerObj(NULL, ptr, type, 0)

/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)


/* Runtime API */

#define SWIG_GetModule(clientdata)                      SWIG_Python_GetModule(clientdata)
#define SWIG_SetModule(clientdata, pointer)             SWIG_Python_SetModule(pointer)
#define SWIG_NewClientData(obj)                         SwigPyClientData_New(obj)

#define SWIG_SetErrorObj                                SWIG_Python_SetErrorObj                            
#define SWIG_SetErrorMsg                        	SWIG_Python_SetErrorMsg				   
#define SWIG_ErrorType(code)                    	SWIG_Python_ErrorType(code)                        
#define SWIG_Error(code, msg)            		SWIG_Python_SetErrorMsg(SWIG_ErrorType(code), msg) 
#define SWIG_fail                        		goto fail					   


/* Runtime API implementation */

/* Error manipulation */

SWIGINTERN void 
SWIG_Python_SetErrorObj(PyObject *errtype, PyObject *obj) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK; 
  PyErr_SetObject(errtype, obj);
  Py_DECREF(obj);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

SWIGINTERN void 
SWIG_Python_SetErrorMsg(PyObject *errtype, const char *msg) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  PyErr_SetString(errtype, msg);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

#define SWIG_Python_Raise(obj, type, desc)  SWIG_Python_SetErrorObj(SWIG_Python_ExceptionType(desc), obj)

/* Set a constant value */

#if defined(SWIGPYTHON_BUILTIN)

SWIGINTERN void
SwigPyBuiltin_AddPublicSymbol(PyObject *seq, const char *key) {
  PyObject *s = PyString_InternFromString(key);
  PyList_Append(seq, s);
  Py_DECREF(s);
}

SWIGINTERN void
SWIG_Python_SetConstant(PyObject *d, PyObject *public_interface, const char *name, PyObject *obj) {   
#if PY_VERSION_HEX < 0x02030000
  PyDict_SetItemString(d, (char *)name, obj);
#else
  PyDict_SetItemString(d, name, obj);
#endif
  Py_DECREF(obj);
  if (public_interface)
    SwigPyBuiltin_AddPublicSymbol(public_interface, name);
}

#else

SWIGINTERN void
SWIG_Python_SetConstant(PyObject *d, const char *name, PyObject *obj) {   
#if PY_VERSION_HEX < 0x02030000
  PyDict_SetItemString(d, (char *)name, obj);
#else
  PyDict_SetItemString(d, name, obj);
#endif
  Py_DECREF(obj);                            
}

#endif

/* Append a value to the result obj */

SWIGINTERN PyObject*
SWIG_Python_AppendOutput(PyObject* result, PyObject* obj) {
#if !defined(SWIG_PYTHON_OUTPUT_TUPLE)
  if (!result) {
    result = obj;
  } else if (result == Py_None) {
    Py_DECREF(result);
    result = obj;
  } else {
    if (!PyList_Check(result)) {
      PyObject *o2 = result;
      result = PyList_New(1);
      PyList_SetItem(result, 0, o2);
    }
    PyList_Append(result,obj);
    Py_DECREF(obj);
  }
  return result;
#else
  PyObject*   o2;
  PyObject*   o3;
  if (!result) {
    result = obj;
  } else if (result == Py_None) {
    Py_DECREF(result);
    result = obj;
  } else {
    if (!PyTuple_Check(result)) {
      o2 = result;
      result = PyTuple_New(1);
      PyTuple_SET_ITEM(result, 0, o2);
    }
    o3 = PyTuple_New(1);
    PyTuple_SET_ITEM(o3, 0, obj);
    o2 = result;
    result = PySequence_Concat(o2, o3);
    Py_DECREF(o2);
    Py_DECREF(o3);
  }
  return result;
#endif
}

/* Unpack the argument tuple */

SWIGINTERN int
SWIG_Python_UnpackTuple(PyObject *args, const char *name, Py_ssize_t min, Py_ssize_t max, PyObject **objs)
{
  if (!args) {
    if (!min && !max) {
      return 1;
    } else {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got none", 
		   name, (min == max ? "" : "at least "), (int)min);
      return 0;
    }
  }  
  if (!PyTuple_Check(args)) {
    if (min <= 1 && max >= 1) {
      int i;
      objs[0] = args;
      for (i = 1; i < max; ++i) {
	objs[i] = 0;
      }
      return 2;
    }
    PyErr_SetString(PyExc_SystemError, "UnpackTuple() argument list is not a tuple");
    return 0;
  } else {
    Py_ssize_t l = PyTuple_GET_SIZE(args);
    if (l < min) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at least "), (int)min, (int)l);
      return 0;
    } else if (l > max) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at most "), (int)max, (int)l);
      return 0;
    } else {
      int i;
      for (i = 0; i < l; ++i) {
	objs[i] = PyTuple_GET_ITEM(args, i);
      }
      for (; l < max; ++l) {
	objs[l] = 0;
      }
      return i + 1;
    }    
  }
}

/* A functor is a function object with one single object argument */
#if PY_VERSION_HEX >= 0x02020000
#define SWIG_Python_CallFunctor(functor, obj)	        PyObject_CallFunctionObjArgs(functor, obj, NULL);
#else
#define SWIG_Python_CallFunctor(functor, obj)	        PyObject_CallFunction(functor, "O", obj);
#endif

/*
  Helper for static pointer initialization for both C and C++ code, for example
  static PyObject *SWIG_STATIC_POINTER(MyVar) = NewSomething(...);
*/
#ifdef __cplusplus
#define SWIG_STATIC_POINTER(var)  var
#else
#define SWIG_STATIC_POINTER(var)  var = 0; if (!var) var
#endif

/* -----------------------------------------------------------------------------
 * Pointer declarations
 * ----------------------------------------------------------------------------- */

/* Flags for new pointer objects */
#define SWIG_POINTER_NOSHADOW       (SWIG_POINTER_OWN      << 1)
#define SWIG_POINTER_NEW            (SWIG_POINTER_NOSHADOW | SWIG_POINTER_OWN)

#define SWIG_POINTER_IMPLICIT_CONV  (SWIG_POINTER_DISOWN   << 1)

#define SWIG_BUILTIN_TP_INIT	    (SWIG_POINTER_OWN << 2)
#define SWIG_BUILTIN_INIT	    (SWIG_BUILTIN_TP_INIT | SWIG_POINTER_OWN)

#ifdef __cplusplus
extern "C" {
#endif

/*  How to access Py_None */
#if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#  ifndef SWIG_PYTHON_NO_BUILD_NONE
#    ifndef SWIG_PYTHON_BUILD_NONE
#      define SWIG_PYTHON_BUILD_NONE
#    endif
#  endif
#endif

#ifdef SWIG_PYTHON_BUILD_NONE
#  ifdef Py_None
#   undef Py_None
#   define Py_None SWIG_Py_None()
#  endif
SWIGRUNTIMEINLINE PyObject * 
_SWIG_Py_None(void)
{
  PyObject *none = Py_BuildValue((char*)"");
  Py_DECREF(none);
  return none;
}
SWIGRUNTIME PyObject * 
SWIG_Py_None(void)
{
  static PyObject *SWIG_STATIC_POINTER(none) = _SWIG_Py_None();
  return none;
}
#endif

/* The python void return value */

SWIGRUNTIMEINLINE PyObject * 
SWIG_Py_Void(void)
{
  PyObject *none = Py_None;
  Py_INCREF(none);
  return none;
}

/* SwigPyClientData */

typedef struct {
  PyObject *klass;
  PyObject *newraw;
  PyObject *newargs;
  PyObject *destroy;
  int delargs;
  int implicitconv;
  PyTypeObject *pytype;
} SwigPyClientData;

SWIGRUNTIMEINLINE int 
SWIG_Python_CheckImplicit(swig_type_info *ty)
{
  SwigPyClientData *data = (SwigPyClientData *)ty->clientdata;
  return data ? data->implicitconv : 0;
}

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_ExceptionType(swig_type_info *desc) {
  SwigPyClientData *data = desc ? (SwigPyClientData *) desc->clientdata : 0;
  PyObject *klass = data ? data->klass : 0;
  return (klass ? klass : PyExc_RuntimeError);
}


SWIGRUNTIME SwigPyClientData * 
SwigPyClientData_New(PyObject* obj)
{
  if (!obj) {
    return 0;
  } else {
    SwigPyClientData *data = (SwigPyClientData *)malloc(sizeof(SwigPyClientData));
    /* the klass element */
    data->klass = obj;
    Py_INCREF(data->klass);
    /* the newraw method and newargs arguments used to create a new raw instance */
    if (PyClass_Check(obj)) {
      data->newraw = 0;
      data->newargs = obj;
      Py_INCREF(obj);
    } else {
#if (PY_VERSION_HEX < 0x02020000)
      data->newraw = 0;
#else
      data->newraw = PyObject_GetAttrString(data->klass, (char *)"__new__");
#endif
      if (data->newraw) {
	Py_INCREF(data->newraw);
	data->newargs = PyTuple_New(1);
	PyTuple_SetItem(data->newargs, 0, obj);
      } else {
	data->newargs = obj;
      }
      Py_INCREF(data->newargs);
    }
    /* the destroy method, aka as the C++ delete method */
    data->destroy = PyObject_GetAttrString(data->klass, (char *)"__swig_destroy__");
    if (PyErr_Occurred()) {
      PyErr_Clear();
      data->destroy = 0;
    }
    if (data->destroy) {
      int flags;
      Py_INCREF(data->destroy);
      flags = PyCFunction_GET_FLAGS(data->destroy);
#ifdef METH_O
      data->delargs = !(flags & (METH_O));
#else
      data->delargs = 0;
#endif
    } else {
      data->delargs = 0;
    }
    data->implicitconv = 0;
    data->pytype = 0;
    return data;
  }
}

SWIGRUNTIME void 
SwigPyClientData_Del(SwigPyClientData *data) {
  Py_XDECREF(data->newraw);
  Py_XDECREF(data->newargs);
  Py_XDECREF(data->destroy);
}

/* =============== SwigPyObject =====================*/

typedef struct {
  PyObject_HEAD
  void *ptr;
  swig_type_info *ty;
  int own;
  PyObject *next;
#ifdef SWIGPYTHON_BUILTIN
  PyObject *dict;
#endif
} SwigPyObject;


#ifdef SWIGPYTHON_BUILTIN

SWIGRUNTIME PyObject *
SwigPyObject_get___dict__(PyObject *v, PyObject *SWIGUNUSEDPARM(args))
{
  SwigPyObject *sobj = (SwigPyObject *)v;

  if (!sobj->dict)
    sobj->dict = PyDict_New();

  Py_INCREF(sobj->dict);
  return sobj->dict;
}

#endif

SWIGRUNTIME PyObject *
SwigPyObject_long(SwigPyObject *v)
{
  return PyLong_FromVoidPtr(v->ptr);
}

SWIGRUNTIME PyObject *
SwigPyObject_format(const char* fmt, SwigPyObject *v)
{
  PyObject *res = NULL;
  PyObject *args = PyTuple_New(1);
  if (args) {
    if (PyTuple_SetItem(args, 0, SwigPyObject_long(v)) == 0) {
      PyObject *ofmt = SWIG_Python_str_FromChar(fmt);
      if (ofmt) {
#if PY_VERSION_HEX >= 0x03000000
	res = PyUnicode_Format(ofmt,args);
#else
	res = PyString_Format(ofmt,args);
#endif
	Py_DECREF(ofmt);
      }
      Py_DECREF(args);
    }
  }
  return res;
}

SWIGRUNTIME PyObject *
SwigPyObject_oct(SwigPyObject *v)
{
  return SwigPyObject_format("%o",v);
}

SWIGRUNTIME PyObject *
SwigPyObject_hex(SwigPyObject *v)
{
  return SwigPyObject_format("%x",v);
}

SWIGRUNTIME PyObject *
#ifdef METH_NOARGS
SwigPyObject_repr(SwigPyObject *v)
#else
SwigPyObject_repr(SwigPyObject *v, PyObject *args)
#endif
{
  const char *name = SWIG_TypePrettyName(v->ty);
  PyObject *repr = SWIG_Python_str_FromFormat("<Swig Object of type '%s' at %p>", (name ? name : "unknown"), (void *)v);
  if (v->next) {
# ifdef METH_NOARGS
    PyObject *nrep = SwigPyObject_repr((SwigPyObject *)v->next);
# else
    PyObject *nrep = SwigPyObject_repr((SwigPyObject *)v->next, args);
# endif
# if PY_VERSION_HEX >= 0x03000000
    PyObject *joined = PyUnicode_Concat(repr, nrep);
    Py_DecRef(repr);
    Py_DecRef(nrep);
    repr = joined;
# else
    PyString_ConcatAndDel(&repr,nrep);
# endif
  }
  return repr;  
}

SWIGRUNTIME int
SwigPyObject_compare(SwigPyObject *v, SwigPyObject *w)
{
  void *i = v->ptr;
  void *j = w->ptr;
  return (i < j) ? -1 : ((i > j) ? 1 : 0);
}

/* Added for Python 3.x, would it also be useful for Python 2.x? */
SWIGRUNTIME PyObject*
SwigPyObject_richcompare(SwigPyObject *v, SwigPyObject *w, int op)
{
  PyObject* res;
  if( op != Py_EQ && op != Py_NE ) {
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
  }
  res = PyBool_FromLong( (SwigPyObject_compare(v, w)==0) == (op == Py_EQ) ? 1 : 0);
  return res;  
}


SWIGRUNTIME PyTypeObject* SwigPyObject_TypeOnce(void);

#ifdef SWIGPYTHON_BUILTIN
static swig_type_info *SwigPyObject_stype = 0;
SWIGRUNTIME PyTypeObject*
SwigPyObject_type(void) {
    SwigPyClientData *cd;
    assert(SwigPyObject_stype);
    cd = (SwigPyClientData*) SwigPyObject_stype->clientdata;
    assert(cd);
    assert(cd->pytype);
    return cd->pytype;
}
#else
SWIGRUNTIME PyTypeObject*
SwigPyObject_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = SwigPyObject_TypeOnce();
  return type;
}
#endif

SWIGRUNTIMEINLINE int
SwigPyObject_Check(PyObject *op) {
#ifdef SWIGPYTHON_BUILTIN
  PyTypeObject *target_tp = SwigPyObject_type();
  if (PyType_IsSubtype(op->ob_type, target_tp))
    return 1;
  return (strcmp(op->ob_type->tp_name, "SwigPyObject") == 0);
#else
  return (Py_TYPE(op) == SwigPyObject_type())
    || (strcmp(Py_TYPE(op)->tp_name,"SwigPyObject") == 0);
#endif
}

SWIGRUNTIME PyObject *
SwigPyObject_New(void *ptr, swig_type_info *ty, int own);

SWIGRUNTIME void
SwigPyObject_dealloc(PyObject *v)
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  PyObject *next = sobj->next;
  if (sobj->own == SWIG_POINTER_OWN) {
    swig_type_info *ty = sobj->ty;
    SwigPyClientData *data = ty ? (SwigPyClientData *) ty->clientdata : 0;
    PyObject *destroy = data ? data->destroy : 0;
    if (destroy) {
      /* destroy is always a VARARGS method */
      PyObject *res;
      if (data->delargs) {
	/* we need to create a temporary object to carry the destroy operation */
	PyObject *tmp = SwigPyObject_New(sobj->ptr, ty, 0);
	res = SWIG_Python_CallFunctor(destroy, tmp);
	Py_DECREF(tmp);
      } else {
	PyCFunction meth = PyCFunction_GET_FUNCTION(destroy);
	PyObject *mself = PyCFunction_GET_SELF(destroy);
	res = ((*meth)(mself, v));
      }
      Py_XDECREF(res);
    } 
#if !defined(SWIG_PYTHON_SILENT_MEMLEAK)
    else {
      const char *name = SWIG_TypePrettyName(ty);
      printf("swig/python detected a memory leak of type '%s', no destructor found.\n", (name ? name : "unknown"));
    }
#endif
  } 
  Py_XDECREF(next);
  PyObject_DEL(v);
}

SWIGRUNTIME PyObject* 
SwigPyObject_append(PyObject* v, PyObject* next)
{
  SwigPyObject *sobj = (SwigPyObject *) v;
#ifndef METH_O
  PyObject *tmp = 0;
  if (!PyArg_ParseTuple(next,(char *)"O:append", &tmp)) return NULL;
  next = tmp;
#endif
  if (!SwigPyObject_Check(next)) {
    return NULL;
  }
  sobj->next = next;
  Py_INCREF(next);
  return SWIG_Py_Void();
}

SWIGRUNTIME PyObject* 
#ifdef METH_NOARGS
SwigPyObject_next(PyObject* v)
#else
SwigPyObject_next(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  if (sobj->next) {    
    Py_INCREF(sobj->next);
    return sobj->next;
  } else {
    return SWIG_Py_Void();
  }
}

SWIGINTERN PyObject*
#ifdef METH_NOARGS
SwigPyObject_disown(PyObject *v)
#else
SwigPyObject_disown(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  SwigPyObject *sobj = (SwigPyObject *)v;
  sobj->own = 0;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
#ifdef METH_NOARGS
SwigPyObject_acquire(PyObject *v)
#else
SwigPyObject_acquire(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  SwigPyObject *sobj = (SwigPyObject *)v;
  sobj->own = SWIG_POINTER_OWN;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
SwigPyObject_own(PyObject *v, PyObject *args)
{
  PyObject *val = 0;
#if (PY_VERSION_HEX < 0x02020000)
  if (!PyArg_ParseTuple(args,(char *)"|O:own",&val))
#elif (PY_VERSION_HEX < 0x02050000)
  if (!PyArg_UnpackTuple(args, (char *)"own", 0, 1, &val)) 
#else
  if (!PyArg_UnpackTuple(args, "own", 0, 1, &val)) 
#endif
    {
      return NULL;
    } 
  else
    {
      SwigPyObject *sobj = (SwigPyObject *)v;
      PyObject *obj = PyBool_FromLong(sobj->own);
      if (val) {
#ifdef METH_NOARGS
	if (PyObject_IsTrue(val)) {
	  SwigPyObject_acquire(v);
	} else {
	  SwigPyObject_disown(v);
	}
#else
	if (PyObject_IsTrue(val)) {
	  SwigPyObject_acquire(v,args);
	} else {
	  SwigPyObject_disown(v,args);
	}
#endif
      } 
      return obj;
    }
}

#ifdef METH_O
static PyMethodDef
swigobject_methods[] = {
  {(char *)"disown",  (PyCFunction)SwigPyObject_disown,  METH_NOARGS,  (char *)"releases ownership of the pointer"},
  {(char *)"acquire", (PyCFunction)SwigPyObject_acquire, METH_NOARGS,  (char *)"acquires ownership of the pointer"},
  {(char *)"own",     (PyCFunction)SwigPyObject_own,     METH_VARARGS, (char *)"returns/sets ownership of the pointer"},
  {(char *)"append",  (PyCFunction)SwigPyObject_append,  METH_O,       (char *)"appends another 'this' object"},
  {(char *)"next",    (PyCFunction)SwigPyObject_next,    METH_NOARGS,  (char *)"returns the next 'this' object"},
  {(char *)"__repr__",(PyCFunction)SwigPyObject_repr,    METH_NOARGS,  (char *)"returns object representation"},
  {0, 0, 0, 0}  
};
#else
static PyMethodDef
swigobject_methods[] = {
  {(char *)"disown",  (PyCFunction)SwigPyObject_disown,  METH_VARARGS,  (char *)"releases ownership of the pointer"},
  {(char *)"acquire", (PyCFunction)SwigPyObject_acquire, METH_VARARGS,  (char *)"acquires ownership of the pointer"},
  {(char *)"own",     (PyCFunction)SwigPyObject_own,     METH_VARARGS,  (char *)"returns/sets ownership of the pointer"},
  {(char *)"append",  (PyCFunction)SwigPyObject_append,  METH_VARARGS,  (char *)"appends another 'this' object"},
  {(char *)"next",    (PyCFunction)SwigPyObject_next,    METH_VARARGS,  (char *)"returns the next 'this' object"},
  {(char *)"__repr__",(PyCFunction)SwigPyObject_repr,   METH_VARARGS,  (char *)"returns object representation"},
  {0, 0, 0, 0}  
};
#endif

#if PY_VERSION_HEX < 0x02020000
SWIGINTERN PyObject *
SwigPyObject_getattr(SwigPyObject *sobj,char *name)
{
  return Py_FindMethod(swigobject_methods, (PyObject *)sobj, name);
}
#endif

SWIGRUNTIME PyTypeObject*
SwigPyObject_TypeOnce(void) {
  static char swigobject_doc[] = "Swig object carries a C/C++ instance pointer";

  static PyNumberMethods SwigPyObject_as_number = {
    (binaryfunc)0, /*nb_add*/
    (binaryfunc)0, /*nb_subtract*/
    (binaryfunc)0, /*nb_multiply*/
    /* nb_divide removed in Python 3 */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc)0, /*nb_divide*/
#endif
    (binaryfunc)0, /*nb_remainder*/
    (binaryfunc)0, /*nb_divmod*/
    (ternaryfunc)0,/*nb_power*/
    (unaryfunc)0,  /*nb_negative*/
    (unaryfunc)0,  /*nb_positive*/
    (unaryfunc)0,  /*nb_absolute*/
    (inquiry)0,    /*nb_nonzero*/
    0,		   /*nb_invert*/
    0,		   /*nb_lshift*/
    0,		   /*nb_rshift*/
    0,		   /*nb_and*/
    0,		   /*nb_xor*/
    0,		   /*nb_or*/
#if PY_VERSION_HEX < 0x03000000
    0,   /*nb_coerce*/
#endif
    (unaryfunc)SwigPyObject_long, /*nb_int*/
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc)SwigPyObject_long, /*nb_long*/
#else
    0, /*nb_reserved*/
#endif
    (unaryfunc)0,                 /*nb_float*/
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc)SwigPyObject_oct,  /*nb_oct*/
    (unaryfunc)SwigPyObject_hex,  /*nb_hex*/
#endif
#if PY_VERSION_HEX >= 0x03000000 /* 3.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index, nb_inplace_divide removed */
#elif PY_VERSION_HEX >= 0x02050000 /* 2.5.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index */
#elif PY_VERSION_HEX >= 0x02020000 /* 2.2.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_true_divide */
#elif PY_VERSION_HEX >= 0x02000000 /* 2.0.0 */
    0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_or */
#endif
  };

  static PyTypeObject swigpyobject_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
      /* PyObject header changed in Python 3 */
#if PY_VERSION_HEX >= 0x03000000
      PyVarObject_HEAD_INIT(NULL, 0)
#else
      PyObject_HEAD_INIT(NULL)
      0,                                    /* ob_size */
#endif
      (char *)"SwigPyObject",               /* tp_name */
      sizeof(SwigPyObject),                 /* tp_basicsize */
      0,                                    /* tp_itemsize */
      (destructor)SwigPyObject_dealloc,     /* tp_dealloc */
      0,				    /* tp_print */
#if PY_VERSION_HEX < 0x02020000
      (getattrfunc)SwigPyObject_getattr,    /* tp_getattr */
#else
      (getattrfunc)0,                       /* tp_getattr */
#endif
      (setattrfunc)0,                       /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0, /* tp_reserved in 3.0.1, tp_compare in 3.0.0 but not used */
#else
      (cmpfunc)SwigPyObject_compare,        /* tp_compare */
#endif
      (reprfunc)SwigPyObject_repr,          /* tp_repr */
      &SwigPyObject_as_number,              /* tp_as_number */
      0,                                    /* tp_as_sequence */
      0,                                    /* tp_as_mapping */
      (hashfunc)0,                          /* tp_hash */
      (ternaryfunc)0,                       /* tp_call */
      0,				    /* tp_str */
      PyObject_GenericGetAttr,              /* tp_getattro */
      0,                                    /* tp_setattro */
      0,                                    /* tp_as_buffer */
      Py_TPFLAGS_DEFAULT,                   /* tp_flags */
      swigobject_doc,                       /* tp_doc */
      0,                                    /* tp_traverse */
      0,                                    /* tp_clear */
      (richcmpfunc)SwigPyObject_richcompare,/* tp_richcompare */
      0,                                    /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
      0,                                    /* tp_iter */
      0,                                    /* tp_iternext */
      swigobject_methods,                   /* tp_methods */
      0,                                    /* tp_members */
      0,                                    /* tp_getset */
      0,                                    /* tp_base */
      0,                                    /* tp_dict */
      0,                                    /* tp_descr_get */
      0,                                    /* tp_descr_set */
      0,                                    /* tp_dictoffset */
      0,                                    /* tp_init */
      0,                                    /* tp_alloc */
      0,                                    /* tp_new */
      0,                                    /* tp_free */
      0,                                    /* tp_is_gc */
      0,                                    /* tp_bases */
      0,                                    /* tp_mro */
      0,                                    /* tp_cache */
      0,                                    /* tp_subclasses */
      0,                                    /* tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
      0,                                    /* tp_del */
#endif
#if PY_VERSION_HEX >= 0x02060000
      0,                                    /* tp_version */
#endif
#ifdef COUNT_ALLOCS
      0,0,0,0                               /* tp_alloc -> tp_next */
#endif
    };
    swigpyobject_type = tmp;
    type_init = 1;
#if PY_VERSION_HEX < 0x02020000
    swigpyobject_type.ob_type = &PyType_Type;
#else
    if (PyType_Ready(&swigpyobject_type) < 0)
      return NULL;
#endif
  }
  return &swigpyobject_type;
}

SWIGRUNTIME PyObject *
SwigPyObject_New(void *ptr, swig_type_info *ty, int own)
{
  SwigPyObject *sobj = PyObject_NEW(SwigPyObject, SwigPyObject_type());
  if (sobj) {
    sobj->ptr  = ptr;
    sobj->ty   = ty;
    sobj->own  = own;
    sobj->next = 0;
  }
  return (PyObject *)sobj;
}

/* -----------------------------------------------------------------------------
 * Implements a simple Swig Packed type, and use it instead of string
 * ----------------------------------------------------------------------------- */

typedef struct {
  PyObject_HEAD
  void *pack;
  swig_type_info *ty;
  size_t size;
} SwigPyPacked;

SWIGRUNTIME int
SwigPyPacked_print(SwigPyPacked *v, FILE *fp, int SWIGUNUSEDPARM(flags))
{
  char result[SWIG_BUFFER_SIZE];
  fputs("<Swig Packed ", fp); 
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    fputs("at ", fp); 
    fputs(result, fp); 
  }
  fputs(v->ty->name,fp); 
  fputs(">", fp);
  return 0; 
}
  
SWIGRUNTIME PyObject *
SwigPyPacked_repr(SwigPyPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    return SWIG_Python_str_FromFormat("<Swig Packed at %s%s>", result, v->ty->name);
  } else {
    return SWIG_Python_str_FromFormat("<Swig Packed %s>", v->ty->name);
  }  
}

SWIGRUNTIME PyObject *
SwigPyPacked_str(SwigPyPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))){
    return SWIG_Python_str_FromFormat("%s%s", result, v->ty->name);
  } else {
    return SWIG_Python_str_FromChar(v->ty->name);
  }  
}

SWIGRUNTIME int
SwigPyPacked_compare(SwigPyPacked *v, SwigPyPacked *w)
{
  size_t i = v->size;
  size_t j = w->size;
  int s = (i < j) ? -1 : ((i > j) ? 1 : 0);
  return s ? s : strncmp((char *)v->pack, (char *)w->pack, 2*v->size);
}

SWIGRUNTIME PyTypeObject* SwigPyPacked_TypeOnce(void);

SWIGRUNTIME PyTypeObject*
SwigPyPacked_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = SwigPyPacked_TypeOnce();
  return type;
}

SWIGRUNTIMEINLINE int
SwigPyPacked_Check(PyObject *op) {
  return ((op)->ob_type == SwigPyPacked_TypeOnce()) 
    || (strcmp((op)->ob_type->tp_name,"SwigPyPacked") == 0);
}

SWIGRUNTIME void
SwigPyPacked_dealloc(PyObject *v)
{
  if (SwigPyPacked_Check(v)) {
    SwigPyPacked *sobj = (SwigPyPacked *) v;
    free(sobj->pack);
  }
  PyObject_DEL(v);
}

SWIGRUNTIME PyTypeObject*
SwigPyPacked_TypeOnce(void) {
  static char swigpacked_doc[] = "Swig object carries a C/C++ instance pointer";
  static PyTypeObject swigpypacked_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
      /* PyObject header changed in Python 3 */
#if PY_VERSION_HEX>=0x03000000
      PyVarObject_HEAD_INIT(NULL, 0)
#else
      PyObject_HEAD_INIT(NULL)
      0,                                    /* ob_size */
#endif
      (char *)"SwigPyPacked",               /* tp_name */
      sizeof(SwigPyPacked),                 /* tp_basicsize */
      0,                                    /* tp_itemsize */
      (destructor)SwigPyPacked_dealloc,     /* tp_dealloc */
      (printfunc)SwigPyPacked_print,        /* tp_print */
      (getattrfunc)0,                       /* tp_getattr */
      (setattrfunc)0,                       /* tp_setattr */
#if PY_VERSION_HEX>=0x03000000
      0, /* tp_reserved in 3.0.1 */
#else
      (cmpfunc)SwigPyPacked_compare,        /* tp_compare */
#endif
      (reprfunc)SwigPyPacked_repr,          /* tp_repr */
      0,                                    /* tp_as_number */
      0,                                    /* tp_as_sequence */
      0,                                    /* tp_as_mapping */
      (hashfunc)0,                          /* tp_hash */
      (ternaryfunc)0,                       /* tp_call */
      (reprfunc)SwigPyPacked_str,           /* tp_str */
      PyObject_GenericGetAttr,              /* tp_getattro */
      0,                                    /* tp_setattro */
      0,                                    /* tp_as_buffer */
      Py_TPFLAGS_DEFAULT,                   /* tp_flags */
      swigpacked_doc,                       /* tp_doc */
      0,                                    /* tp_traverse */
      0,                                    /* tp_clear */
      0,                                    /* tp_richcompare */
      0,                                    /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
      0,                                    /* tp_iter */
      0,                                    /* tp_iternext */
      0,                                    /* tp_methods */
      0,                                    /* tp_members */
      0,                                    /* tp_getset */
      0,                                    /* tp_base */
      0,                                    /* tp_dict */
      0,                                    /* tp_descr_get */
      0,                                    /* tp_descr_set */
      0,                                    /* tp_dictoffset */
      0,                                    /* tp_init */
      0,                                    /* tp_alloc */
      0,                                    /* tp_new */
      0,                                    /* tp_free */
      0,                                    /* tp_is_gc */
      0,                                    /* tp_bases */
      0,                                    /* tp_mro */
      0,                                    /* tp_cache */
      0,                                    /* tp_subclasses */
      0,                                    /* tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
      0,                                    /* tp_del */
#endif
#if PY_VERSION_HEX >= 0x02060000
      0,                                    /* tp_version */
#endif
#ifdef COUNT_ALLOCS
      0,0,0,0                               /* tp_alloc -> tp_next */
#endif
    };
    swigpypacked_type = tmp;
    type_init = 1;
#if PY_VERSION_HEX < 0x02020000
    swigpypacked_type.ob_type = &PyType_Type;
#else
    if (PyType_Ready(&swigpypacked_type) < 0)
      return NULL;
#endif
  }
  return &swigpypacked_type;
}

SWIGRUNTIME PyObject *
SwigPyPacked_New(void *ptr, size_t size, swig_type_info *ty)
{
  SwigPyPacked *sobj = PyObject_NEW(SwigPyPacked, SwigPyPacked_type());
  if (sobj) {
    void *pack = malloc(size);
    if (pack) {
      memcpy(pack, ptr, size);
      sobj->pack = pack;
      sobj->ty   = ty;
      sobj->size = size;
    } else {
      PyObject_DEL((PyObject *) sobj);
      sobj = 0;
    }
  }
  return (PyObject *) sobj;
}

SWIGRUNTIME swig_type_info *
SwigPyPacked_UnpackData(PyObject *obj, void *ptr, size_t size)
{
  if (SwigPyPacked_Check(obj)) {
    SwigPyPacked *sobj = (SwigPyPacked *)obj;
    if (sobj->size != size) return 0;
    memcpy(ptr, sobj->pack, size);
    return sobj->ty;
  } else {
    return 0;
  }
}

/* -----------------------------------------------------------------------------
 * pointers/data manipulation
 * ----------------------------------------------------------------------------- */

SWIGRUNTIMEINLINE PyObject *
_SWIG_This(void)
{
    return SWIG_Python_str_FromChar("this");
}

static PyObject *swig_this = NULL;

SWIGRUNTIME PyObject *
SWIG_This(void)
{
  if (swig_this == NULL)
    swig_this = _SWIG_This();
  return swig_this;
}

/* #define SWIG_PYTHON_SLOW_GETSET_THIS */

/* TODO: I don't know how to implement the fast getset in Python 3 right now */
#if PY_VERSION_HEX>=0x03000000
#define SWIG_PYTHON_SLOW_GETSET_THIS 
#endif

SWIGRUNTIME SwigPyObject *
SWIG_Python_GetSwigThis(PyObject *pyobj) 
{
  PyObject *obj;

  if (SwigPyObject_Check(pyobj))
    return (SwigPyObject *) pyobj;

#ifdef SWIGPYTHON_BUILTIN
  (void)obj;
# ifdef PyWeakref_CheckProxy
  if (PyWeakref_CheckProxy(pyobj)) {
    pyobj = PyWeakref_GET_OBJECT(pyobj);
    if (pyobj && SwigPyObject_Check(pyobj))
      return (SwigPyObject*) pyobj;
  }
# endif
  return NULL;
#else

  obj = 0;

#if (!defined(SWIG_PYTHON_SLOW_GETSET_THIS) && (PY_VERSION_HEX >= 0x02030000))
  if (PyInstance_Check(pyobj)) {
    obj = _PyInstance_Lookup(pyobj, SWIG_This());      
  } else {
    PyObject **dictptr = _PyObject_GetDictPtr(pyobj);
    if (dictptr != NULL) {
      PyObject *dict = *dictptr;
      obj = dict ? PyDict_GetItem(dict, SWIG_This()) : 0;
    } else {
#ifdef PyWeakref_CheckProxy
      if (PyWeakref_CheckProxy(pyobj)) {
	PyObject *wobj = PyWeakref_GET_OBJECT(pyobj);
	return wobj ? SWIG_Python_GetSwigThis(wobj) : 0;
      }
#endif
      obj = PyObject_GetAttr(pyobj,SWIG_This());
      if (obj) {
	Py_DECREF(obj);
      } else {
	if (PyErr_Occurred()) PyErr_Clear();
	return 0;
      }
    }
  }
#else
  obj = PyObject_GetAttr(pyobj,SWIG_This());
  if (obj) {
    Py_DECREF(obj);
  } else {
    if (PyErr_Occurred()) PyErr_Clear();
    return 0;
  }
#endif
  if (obj && !SwigPyObject_Check(obj)) {
    /* a PyObject is called 'this', try to get the 'real this'
       SwigPyObject from it */ 
    return SWIG_Python_GetSwigThis(obj);
  }
  return (SwigPyObject *)obj;
#endif
}

/* Acquire a pointer value */

SWIGRUNTIME int
SWIG_Python_AcquirePtr(PyObject *obj, int own) {
  if (own == SWIG_POINTER_OWN) {
    SwigPyObject *sobj = SWIG_Python_GetSwigThis(obj);
    if (sobj) {
      int oldown = sobj->own;
      sobj->own = own;
      return oldown;
    }
  }
  return 0;
}

/* Convert a pointer value */

SWIGRUNTIME int
SWIG_Python_ConvertPtrAndOwn(PyObject *obj, void **ptr, swig_type_info *ty, int flags, int *own) {
  int res;
  SwigPyObject *sobj;
  int implicit_conv = (flags & SWIG_POINTER_IMPLICIT_CONV) != 0;

  if (!obj)
    return SWIG_ERROR;
  if (obj == Py_None && !implicit_conv) {
    if (ptr)
      *ptr = 0;
    return SWIG_OK;
  }

  res = SWIG_ERROR;

  sobj = SWIG_Python_GetSwigThis(obj);
  if (own)
    *own = 0;
  while (sobj) {
    void *vptr = sobj->ptr;
    if (ty) {
      swig_type_info *to = sobj->ty;
      if (to == ty) {
        /* no type cast needed */
        if (ptr) *ptr = vptr;
        break;
      } else {
        swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
        if (!tc) {
          sobj = (SwigPyObject *)sobj->next;
        } else {
          if (ptr) {
            int newmemory = 0;
            *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
            if (newmemory == SWIG_CAST_NEW_MEMORY) {
              assert(own); /* badly formed typemap which will lead to a memory leak - it must set and use own to delete *ptr */
              if (own)
                *own = *own | SWIG_CAST_NEW_MEMORY;
            }
          }
          break;
        }
      }
    } else {
      if (ptr) *ptr = vptr;
      break;
    }
  }
  if (sobj) {
    if (own)
      *own = *own | sobj->own;
    if (flags & SWIG_POINTER_DISOWN) {
      sobj->own = 0;
    }
    res = SWIG_OK;
  } else {
    if (implicit_conv) {
      SwigPyClientData *data = ty ? (SwigPyClientData *) ty->clientdata : 0;
      if (data && !data->implicitconv) {
        PyObject *klass = data->klass;
        if (klass) {
          PyObject *impconv;
          data->implicitconv = 1; /* avoid recursion and call 'explicit' constructors*/
          impconv = SWIG_Python_CallFunctor(klass, obj);
          data->implicitconv = 0;
          if (PyErr_Occurred()) {
            PyErr_Clear();
            impconv = 0;
          }
          if (impconv) {
            SwigPyObject *iobj = SWIG_Python_GetSwigThis(impconv);
            if (iobj) {
              void *vptr;
              res = SWIG_Python_ConvertPtrAndOwn((PyObject*)iobj, &vptr, ty, 0, 0);
              if (SWIG_IsOK(res)) {
                if (ptr) {
                  *ptr = vptr;
                  /* transfer the ownership to 'ptr' */
                  iobj->own = 0;
                  res = SWIG_AddCast(res);
                  res = SWIG_AddNewMask(res);
                } else {
                  res = SWIG_AddCast(res);		    
                }
              }
            }
            Py_DECREF(impconv);
          }
        }
      }
    }
    if (!SWIG_IsOK(res) && obj == Py_None) {
      if (ptr)
        *ptr = 0;
      if (PyErr_Occurred())
        PyErr_Clear();
      res = SWIG_OK;
    }
  }
  return res;
}

/* Convert a function ptr value */

SWIGRUNTIME int
SWIG_Python_ConvertFunctionPtr(PyObject *obj, void **ptr, swig_type_info *ty) {
  if (!PyCFunction_Check(obj)) {
    return SWIG_ConvertPtr(obj, ptr, ty, 0);
  } else {
    void *vptr = 0;
    
    /* here we get the method pointer for callbacks */
    const char *doc = (((PyCFunctionObject *)obj) -> m_ml -> ml_doc);
    const char *desc = doc ? strstr(doc, "swig_ptr: ") : 0;
    if (desc)
      desc = ty ? SWIG_UnpackVoidPtr(desc + 10, &vptr, ty->name) : 0;
    if (!desc) 
      return SWIG_ERROR;
    if (ty) {
      swig_cast_info *tc = SWIG_TypeCheck(desc,ty);
      if (tc) {
        int newmemory = 0;
        *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
        assert(!newmemory); /* newmemory handling not yet implemented */
      } else {
        return SWIG_ERROR;
      }
    } else {
      *ptr = vptr;
    }
    return SWIG_OK;
  }
}

/* Convert a packed value value */

SWIGRUNTIME int
SWIG_Python_ConvertPacked(PyObject *obj, void *ptr, size_t sz, swig_type_info *ty) {
  swig_type_info *to = SwigPyPacked_UnpackData(obj, ptr, sz);
  if (!to) return SWIG_ERROR;
  if (ty) {
    if (to != ty) {
      /* check type cast? */
      swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
      if (!tc) return SWIG_ERROR;
    }
  }
  return SWIG_OK;
}  

/* -----------------------------------------------------------------------------
 * Create a new pointer object
 * ----------------------------------------------------------------------------- */

/*
  Create a new instance object, without calling __init__, and set the
  'this' attribute.
*/

SWIGRUNTIME PyObject* 
SWIG_Python_NewShadowInstance(SwigPyClientData *data, PyObject *swig_this)
{
#if (PY_VERSION_HEX >= 0x02020000)
  PyObject *inst = 0;
  PyObject *newraw = data->newraw;
  if (newraw) {
    inst = PyObject_Call(newraw, data->newargs, NULL);
    if (inst) {
#if !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
      PyObject **dictptr = _PyObject_GetDictPtr(inst);
      if (dictptr != NULL) {
	PyObject *dict = *dictptr;
	if (dict == NULL) {
	  dict = PyDict_New();
	  *dictptr = dict;
	  PyDict_SetItem(dict, SWIG_This(), swig_this);
	}
      }
#else
      PyObject *key = SWIG_This();
      PyObject_SetAttr(inst, key, swig_this);
#endif
    }
  } else {
#if PY_VERSION_HEX >= 0x03000000
    inst = ((PyTypeObject*) data->newargs)->tp_new((PyTypeObject*) data->newargs, Py_None, Py_None);
    if (inst) {
      PyObject_SetAttr(inst, SWIG_This(), swig_this);
      Py_TYPE(inst)->tp_flags &= ~Py_TPFLAGS_VALID_VERSION_TAG;
    }
#else
    PyObject *dict = PyDict_New();
    if (dict) {
      PyDict_SetItem(dict, SWIG_This(), swig_this);
      inst = PyInstance_NewRaw(data->newargs, dict);
      Py_DECREF(dict);
    }
#endif
  }
  return inst;
#else
#if (PY_VERSION_HEX >= 0x02010000)
  PyObject *inst = 0;
  PyObject *dict = PyDict_New();
  if (dict) {
    PyDict_SetItem(dict, SWIG_This(), swig_this);
    inst = PyInstance_NewRaw(data->newargs, dict);
    Py_DECREF(dict);
  }
  return (PyObject *) inst;
#else
  PyInstanceObject *inst = PyObject_NEW(PyInstanceObject, &PyInstance_Type);
  if (inst == NULL) {
    return NULL;
  }
  inst->in_class = (PyClassObject *)data->newargs;
  Py_INCREF(inst->in_class);
  inst->in_dict = PyDict_New();
  if (inst->in_dict == NULL) {
    Py_DECREF(inst);
    return NULL;
  }
#ifdef Py_TPFLAGS_HAVE_WEAKREFS
  inst->in_weakreflist = NULL;
#endif
#ifdef Py_TPFLAGS_GC
  PyObject_GC_Init(inst);
#endif
  PyDict_SetItem(inst->in_dict, SWIG_This(), swig_this);
  return (PyObject *) inst;
#endif
#endif
}

SWIGRUNTIME void
SWIG_Python_SetSwigThis(PyObject *inst, PyObject *swig_this)
{
 PyObject *dict;
#if (PY_VERSION_HEX >= 0x02020000) && !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
 PyObject **dictptr = _PyObject_GetDictPtr(inst);
 if (dictptr != NULL) {
   dict = *dictptr;
   if (dict == NULL) {
     dict = PyDict_New();
     *dictptr = dict;
   }
   PyDict_SetItem(dict, SWIG_This(), swig_this);
   return;
 }
#endif
 dict = PyObject_GetAttrString(inst, (char*)"__dict__");
 PyDict_SetItem(dict, SWIG_This(), swig_this);
 Py_DECREF(dict);
} 


SWIGINTERN PyObject *
SWIG_Python_InitShadowInstance(PyObject *args) {
  PyObject *obj[2];
  if (!SWIG_Python_UnpackTuple(args, "swiginit", 2, 2, obj)) {
    return NULL;
  } else {
    SwigPyObject *sthis = SWIG_Python_GetSwigThis(obj[0]);
    if (sthis) {
      SwigPyObject_append((PyObject*) sthis, obj[1]);
    } else {
      SWIG_Python_SetSwigThis(obj[0], obj[1]);
    }
    return SWIG_Py_Void();
  }
}

/* Create a new pointer object */

SWIGRUNTIME PyObject *
SWIG_Python_NewPointerObj(PyObject *self, void *ptr, swig_type_info *type, int flags) {
  SwigPyClientData *clientdata;
  PyObject * robj;
  int own;

  if (!ptr)
    return SWIG_Py_Void();

  clientdata = type ? (SwigPyClientData *)(type->clientdata) : 0;
  own = (flags & SWIG_POINTER_OWN) ? SWIG_POINTER_OWN : 0;
  if (clientdata && clientdata->pytype) {
    SwigPyObject *newobj;
    if (flags & SWIG_BUILTIN_TP_INIT) {
      newobj = (SwigPyObject*) self;
      if (newobj->ptr) {
        PyObject *next_self = clientdata->pytype->tp_alloc(clientdata->pytype, 0);
        while (newobj->next)
	  newobj = (SwigPyObject *) newobj->next;
        newobj->next = next_self;
        newobj = (SwigPyObject *)next_self;
#ifdef SWIGPYTHON_BUILTIN
        newobj->dict = 0;
#endif
      }
    } else {
      newobj = PyObject_New(SwigPyObject, clientdata->pytype);
#ifdef SWIGPYTHON_BUILTIN
      newobj->dict = 0;
#endif
    }
    if (newobj) {
      newobj->ptr = ptr;
      newobj->ty = type;
      newobj->own = own;
      newobj->next = 0;
      return (PyObject*) newobj;
    }
    return SWIG_Py_Void();
  }

  assert(!(flags & SWIG_BUILTIN_TP_INIT));

  robj = SwigPyObject_New(ptr, type, own);
  if (robj && clientdata && !(flags & SWIG_POINTER_NOSHADOW)) {
    PyObject *inst = SWIG_Python_NewShadowInstance(clientdata, robj);
    Py_DECREF(robj);
    robj = inst;
  }
  return robj;
}

/* Create a new packed object */

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_NewPackedObj(void *ptr, size_t sz, swig_type_info *type) {
  return ptr ? SwigPyPacked_New((void *) ptr, sz, type) : SWIG_Py_Void();
}

/* -----------------------------------------------------------------------------*
 *  Get type list 
 * -----------------------------------------------------------------------------*/

#ifdef SWIG_LINK_RUNTIME
void *SWIG_ReturnGlobalTypeList(void *);
#endif

SWIGRUNTIME swig_module_info *
SWIG_Python_GetModule(void *SWIGUNUSEDPARM(clientdata)) {
  static void *type_pointer = (void *)0;
  /* first check if module already created */
  if (!type_pointer) {
#ifdef SWIG_LINK_RUNTIME
    type_pointer = SWIG_ReturnGlobalTypeList((void *)0);
#else
# ifdef SWIGPY_USE_CAPSULE
    type_pointer = PyCapsule_Import(SWIGPY_CAPSULE_NAME, 0);
# else
    type_pointer = PyCObject_Import((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION,
				    (char*)"type_pointer" SWIG_TYPE_TABLE_NAME);
# endif
    if (PyErr_Occurred()) {
      PyErr_Clear();
      type_pointer = (void *)0;
    }
#endif
  }
  return (swig_module_info *) type_pointer;
}

#if PY_MAJOR_VERSION < 2
/* PyModule_AddObject function was introduced in Python 2.0.  The following function
   is copied out of Python/modsupport.c in python version 2.3.4 */
SWIGINTERN int
PyModule_AddObject(PyObject *m, char *name, PyObject *o)
{
  PyObject *dict;
  if (!PyModule_Check(m)) {
    PyErr_SetString(PyExc_TypeError,
		    "PyModule_AddObject() needs module as first arg");
    return SWIG_ERROR;
  }
  if (!o) {
    PyErr_SetString(PyExc_TypeError,
		    "PyModule_AddObject() needs non-NULL value");
    return SWIG_ERROR;
  }
  
  dict = PyModule_GetDict(m);
  if (dict == NULL) {
    /* Internal error -- modules must have a dict! */
    PyErr_Format(PyExc_SystemError, "module '%s' has no __dict__",
		 PyModule_GetName(m));
    return SWIG_ERROR;
  }
  if (PyDict_SetItemString(dict, name, o))
    return SWIG_ERROR;
  Py_DECREF(o);
  return SWIG_OK;
}
#endif

SWIGRUNTIME void
#ifdef SWIGPY_USE_CAPSULE
SWIG_Python_DestroyModule(PyObject *obj)
#else
SWIG_Python_DestroyModule(void *vptr)
#endif
{
#ifdef SWIGPY_USE_CAPSULE
  swig_module_info *swig_module = (swig_module_info *) PyCapsule_GetPointer(obj, SWIGPY_CAPSULE_NAME);
#else
  swig_module_info *swig_module = (swig_module_info *) vptr;
#endif
  swig_type_info **types = swig_module->types;
  size_t i;
  for (i =0; i < swig_module->size; ++i) {
    swig_type_info *ty = types[i];
    if (ty->owndata) {
      SwigPyClientData *data = (SwigPyClientData *) ty->clientdata;
      if (data) SwigPyClientData_Del(data);
    }
  }
  Py_DECREF(SWIG_This());
  swig_this = NULL;
}

SWIGRUNTIME void
SWIG_Python_SetModule(swig_module_info *swig_module) {
#if PY_VERSION_HEX >= 0x03000000
 /* Add a dummy module object into sys.modules */
  PyObject *module = PyImport_AddModule((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION);
#else
  static PyMethodDef swig_empty_runtime_method_table[] = { {NULL, NULL, 0, NULL} }; /* Sentinel */
  PyObject *module = Py_InitModule((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION, swig_empty_runtime_method_table);
#endif
#ifdef SWIGPY_USE_CAPSULE
  PyObject *pointer = PyCapsule_New((void *) swig_module, SWIGPY_CAPSULE_NAME, SWIG_Python_DestroyModule);
  if (pointer && module) {
    PyModule_AddObject(module, (char*)"type_pointer_capsule" SWIG_TYPE_TABLE_NAME, pointer);
  } else {
    Py_XDECREF(pointer);
  }
#else
  PyObject *pointer = PyCObject_FromVoidPtr((void *) swig_module, SWIG_Python_DestroyModule);
  if (pointer && module) {
    PyModule_AddObject(module, (char*)"type_pointer" SWIG_TYPE_TABLE_NAME, pointer);
  } else {
    Py_XDECREF(pointer);
  }
#endif
}

/* The python cached type query */
SWIGRUNTIME PyObject *
SWIG_Python_TypeCache(void) {
  static PyObject *SWIG_STATIC_POINTER(cache) = PyDict_New();
  return cache;
}

SWIGRUNTIME swig_type_info *
SWIG_Python_TypeQuery(const char *type)
{
  PyObject *cache = SWIG_Python_TypeCache();
  PyObject *key = SWIG_Python_str_FromChar(type); 
  PyObject *obj = PyDict_GetItem(cache, key);
  swig_type_info *descriptor;
  if (obj) {
#ifdef SWIGPY_USE_CAPSULE
    descriptor = (swig_type_info *) PyCapsule_GetPointer(obj, NULL);
#else
    descriptor = (swig_type_info *) PyCObject_AsVoidPtr(obj);
#endif
  } else {
    swig_module_info *swig_module = SWIG_GetModule(0);
    descriptor = SWIG_TypeQueryModule(swig_module, swig_module, type);
    if (descriptor) {
#ifdef SWIGPY_USE_CAPSULE
      obj = PyCapsule_New((void*) descriptor, NULL, NULL);
#else
      obj = PyCObject_FromVoidPtr(descriptor, NULL);
#endif
      PyDict_SetItem(cache, key, obj);
      Py_DECREF(obj);
    }
  }
  Py_DECREF(key);
  return descriptor;
}

/* 
   For backward compatibility only
*/
#define SWIG_POINTER_EXCEPTION  0
#define SWIG_arg_fail(arg)      SWIG_Python_ArgFail(arg)
#define SWIG_MustGetPtr(p, type, argnum, flags)  SWIG_Python_MustGetPtr(p, type, argnum, flags)

SWIGRUNTIME int
SWIG_Python_AddErrMesg(const char* mesg, int infront)
{  
  if (PyErr_Occurred()) {
    PyObject *type = 0;
    PyObject *value = 0;
    PyObject *traceback = 0;
    PyErr_Fetch(&type, &value, &traceback);
    if (value) {
      char *tmp;
      PyObject *old_str = PyObject_Str(value);
      Py_XINCREF(type);
      PyErr_Clear();
      if (infront) {
	PyErr_Format(type, "%s %s", mesg, tmp = SWIG_Python_str_AsChar(old_str));
      } else {
	PyErr_Format(type, "%s %s", tmp = SWIG_Python_str_AsChar(old_str), mesg);
      }
      SWIG_Python_str_DelForPy3(tmp);
      Py_DECREF(old_str);
    }
    return 1;
  } else {
    return 0;
  }
}
  
SWIGRUNTIME int
SWIG_Python_ArgFail(int argnum)
{
  if (PyErr_Occurred()) {
    /* add information about failing argument */
    char mesg[256];
    PyOS_snprintf(mesg, sizeof(mesg), "argument number %d:", argnum);
    return SWIG_Python_AddErrMesg(mesg, 1);
  } else {
    return 0;
  }
}

SWIGRUNTIMEINLINE const char *
SwigPyObject_GetDesc(PyObject *self)
{
  SwigPyObject *v = (SwigPyObject *)self;
  swig_type_info *ty = v ? v->ty : 0;
  return ty ? ty->str : "";
}

SWIGRUNTIME void
SWIG_Python_TypeError(const char *type, PyObject *obj)
{
  if (type) {
#if defined(SWIG_COBJECT_TYPES)
    if (obj && SwigPyObject_Check(obj)) {
      const char *otype = (const char *) SwigPyObject_GetDesc(obj);
      if (otype) {
	PyErr_Format(PyExc_TypeError, "a '%s' is expected, 'SwigPyObject(%s)' is received",
		     type, otype);
	return;
      }
    } else 
#endif      
    {
      const char *otype = (obj ? obj->ob_type->tp_name : 0); 
      if (otype) {
	PyObject *str = PyObject_Str(obj);
	const char *cstr = str ? SWIG_Python_str_AsChar(str) : 0;
	if (cstr) {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s(%s)' is received",
		       type, otype, cstr);
          SWIG_Python_str_DelForPy3(cstr);
	} else {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s' is received",
		       type, otype);
	}
	Py_XDECREF(str);
	return;
      }
    }   
    PyErr_Format(PyExc_TypeError, "a '%s' is expected", type);
  } else {
    PyErr_Format(PyExc_TypeError, "unexpected type is received");
  }
}


/* Convert a pointer value, signal an exception on a type mismatch */
SWIGRUNTIME void *
SWIG_Python_MustGetPtr(PyObject *obj, swig_type_info *ty, int SWIGUNUSEDPARM(argnum), int flags) {
  void *result;
  if (SWIG_Python_ConvertPtr(obj, &result, ty, flags) == -1) {
    PyErr_Clear();
#if SWIG_POINTER_EXCEPTION
    if (flags) {
      SWIG_Python_TypeError(SWIG_TypePrettyName(ty), obj);
      SWIG_Python_ArgFail(argnum);
    }
#endif
  }
  return result;
}

#ifdef SWIGPYTHON_BUILTIN
SWIGRUNTIME int
SWIG_Python_NonDynamicSetAttr(PyObject *obj, PyObject *name, PyObject *value) {
  PyTypeObject *tp = obj->ob_type;
  PyObject *descr;
  PyObject *encoded_name;
  descrsetfunc f;
  int res = -1;

# ifdef Py_USING_UNICODE
  if (PyString_Check(name)) {
    name = PyUnicode_Decode(PyString_AsString(name), PyString_Size(name), NULL, NULL);
    if (!name)
      return -1;
  } else if (!PyUnicode_Check(name))
# else
  if (!PyString_Check(name))
# endif
  {
    PyErr_Format(PyExc_TypeError, "attribute name must be string, not '%.200s'", name->ob_type->tp_name);
    return -1;
  } else {
    Py_INCREF(name);
  }

  if (!tp->tp_dict) {
    if (PyType_Ready(tp) < 0)
      goto done;
  }

  descr = _PyType_Lookup(tp, name);
  f = NULL;
  if (descr != NULL)
    f = descr->ob_type->tp_descr_set;
  if (!f) {
    if (PyString_Check(name)) {
      encoded_name = name;
      Py_INCREF(name);
    } else {
      encoded_name = PyUnicode_AsUTF8String(name);
    }
    PyErr_Format(PyExc_AttributeError, "'%.100s' object has no attribute '%.200s'", tp->tp_name, PyString_AsString(encoded_name));
    Py_DECREF(encoded_name);
  } else {
    res = f(descr, obj, value);
  }
  
  done:
  Py_DECREF(name);
  return res;
}
#endif


#ifdef __cplusplus
}
#endif



#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } else 



  #define SWIG_exception(code, msg) do { SWIG_Error(code, msg); SWIG_fail;; } while(0) 


/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_CPUSolver swig_types[0]
#define SWIGTYPE_p_Cell swig_types[1]
#define SWIGTYPE_p_Cmfd swig_types[2]
#define SWIGTYPE_p_EqualAnglePolarQuad swig_types[3]
#define SWIGTYPE_p_EqualWeightPolarQuad swig_types[4]
#define SWIGTYPE_p_ExpEvaluator swig_types[5]
#define SWIGTYPE_p_GLPolarQuad swig_types[6]
#define SWIGTYPE_p_Geometry swig_types[7]
#define SWIGTYPE_p_Lattice swig_types[8]
#define SWIGTYPE_p_LeonardPolarQuad swig_types[9]
#define SWIGTYPE_p_LocalCoords swig_types[10]
#define SWIGTYPE_p_Material swig_types[11]
#define SWIGTYPE_p_Matrix swig_types[12]
#define SWIGTYPE_p_ParallelHashMapT_std__string_fsr_data_p_t swig_types[13]
#define SWIGTYPE_p_Plane swig_types[14]
#define SWIGTYPE_p_Point swig_types[15]
#define SWIGTYPE_p_Quadrature swig_types[16]
#define SWIGTYPE_p_Solver swig_types[17]
#define SWIGTYPE_p_Surface swig_types[18]
#define SWIGTYPE_p_TYPolarQuad swig_types[19]
#define SWIGTYPE_p_Timer swig_types[20]
#define SWIGTYPE_p_Track swig_types[21]
#define SWIGTYPE_p_TrackGenerator swig_types[22]
#define SWIGTYPE_p_Universe swig_types[23]
#define SWIGTYPE_p_Vector swig_types[24]
#define SWIGTYPE_p_XPlane swig_types[25]
#define SWIGTYPE_p_YPlane swig_types[26]
#define SWIGTYPE_p_ZCylinder swig_types[27]
#define SWIGTYPE_p_ZPlane swig_types[28]
#define SWIGTYPE_p_allocator_type swig_types[29]
#define SWIGTYPE_p_char swig_types[30]
#define SWIGTYPE_p_difference_type swig_types[31]
#define SWIGTYPE_p_double swig_types[32]
#define SWIGTYPE_p_float swig_types[33]
#define SWIGTYPE_p_fsr_data swig_types[34]
#define SWIGTYPE_p_int swig_types[35]
#define SWIGTYPE_p_logLevels swig_types[36]
#define SWIGTYPE_p_omp_lock_t swig_types[37]
#define SWIGTYPE_p_p_Lattice swig_types[38]
#define SWIGTYPE_p_p_Material swig_types[39]
#define SWIGTYPE_p_p_PyObject swig_types[40]
#define SWIGTYPE_p_p_Track swig_types[41]
#define SWIGTYPE_p_p_Universe swig_types[42]
#define SWIGTYPE_p_p_double swig_types[43]
#define SWIGTYPE_p_p_float swig_types[44]
#define SWIGTYPE_p_segment swig_types[45]
#define SWIGTYPE_p_segmentationType swig_types[46]
#define SWIGTYPE_p_size_type swig_types[47]
#define SWIGTYPE_p_std__allocatorT_double_t swig_types[48]
#define SWIGTYPE_p_std__allocatorT_int_t swig_types[49]
#define SWIGTYPE_p_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t swig_types[50]
#define SWIGTYPE_p_std__invalid_argument swig_types[51]
#define SWIGTYPE_p_std__mapT_int_Cell_p_std__lessT_int_t_std__allocatorT_std__pairT_int_const_Cell_p_t_t_t swig_types[52]
#define SWIGTYPE_p_std__pairT_int_float_t swig_types[53]
#define SWIGTYPE_p_std__string swig_types[54]
#define SWIGTYPE_p_std__vectorT_Cell_p_std__allocatorT_Cell_p_t_t swig_types[55]
#define SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t swig_types[56]
#define SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t swig_types[57]
#define SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t swig_types[58]
#define SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t swig_types[59]
#define SWIGTYPE_p_std__vectorT_std__vectorT_std__vectorT_std__pairT_int_Universe_p_t_std__allocatorT_std__pairT_int_Universe_p_t_t_t_std__allocatorT_std__vectorT_std__pairT_int_Universe_p_t_std__allocatorT_std__pairT_int_Universe_p_t_t_t_t_t_std__allocatorT_std__vectorT_std__vectorT_std__pairT_int_Universe_p_t_std__allocatorT_std__pairT_int_Universe_p_t_t_t_std__allocatorT_std__vectorT_std__pairT_int_Universe_p_t_std__allocatorT_std__pairT_int_Universe_p_t_t_t_t_t_t_t swig_types[60]
#define SWIGTYPE_p_surface_halfspace swig_types[61]
#define SWIGTYPE_p_swig__SwigPyIterator swig_types[62]
#define SWIGTYPE_p_value_type swig_types[63]
static swig_type_info *swig_types[65];
static swig_module_info swig_module = {swig_types, 64, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#if (PY_VERSION_HEX <= 0x02000000)
# if !defined(SWIG_PYTHON_CLASSIC)
#  error "This python version requires swig to be run with the '-classic' option"
# endif
#endif

/*-----------------------------------------------
              @(target):= _openmoc.so
  ------------------------------------------------*/
#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_init    PyInit__openmoc

#else
#  define SWIG_init    init_openmoc

#endif
#define SWIG_name    "_openmoc"

#define SWIGVERSION 0x030007 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>


namespace swig {
  class SwigPtr_PyObject {
  protected:
    PyObject *_obj;

  public:
    SwigPtr_PyObject() :_obj(0)
    {
    }

    SwigPtr_PyObject(const SwigPtr_PyObject& item) : _obj(item._obj)
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      Py_XINCREF(_obj);      
      SWIG_PYTHON_THREAD_END_BLOCK;
    }
    
    SwigPtr_PyObject(PyObject *obj, bool initial_ref = true) :_obj(obj)
    {
      if (initial_ref) {
        SWIG_PYTHON_THREAD_BEGIN_BLOCK;
        Py_XINCREF(_obj);
        SWIG_PYTHON_THREAD_END_BLOCK;
      }
    }
    
    SwigPtr_PyObject & operator=(const SwigPtr_PyObject& item) 
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      Py_XINCREF(item._obj);
      Py_XDECREF(_obj);
      _obj = item._obj;
      SWIG_PYTHON_THREAD_END_BLOCK;
      return *this;      
    }
    
    ~SwigPtr_PyObject() 
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      Py_XDECREF(_obj);
      SWIG_PYTHON_THREAD_END_BLOCK;
    }
    
    operator PyObject *() const
    {
      return _obj;
    }

    PyObject *operator->() const
    {
      return _obj;
    }
  };
}


namespace swig {
  struct SwigVar_PyObject : SwigPtr_PyObject {
    SwigVar_PyObject(PyObject* obj = 0) : SwigPtr_PyObject(obj, false) { }
    
    SwigVar_PyObject & operator = (PyObject* obj)
    {
      Py_XDECREF(_obj);
      _obj = obj;
      return *this;      
    }
  };
}


  #define SWIG_FILE_WITH_INIT
  #include <cstddef>
  #include "../src/constants.h"
  #include "../src/Cell.h"
  #include "../src/Geometry.h"
  #include "../src/LocalCoords.h"
  #include "../src/log.h"
  #include "../src/Material.h"
  #include "../src/ExpEvaluator.h"
  #include "../src/Point.h"
  #include "../src/Quadrature.h"
  #include "../src/Solver.h"
  #include "../src/CPUSolver.h"
  #include "../src/boundary_type.h"
  #include "../src/Surface.h"
  #include "../src/Timer.h"
  #include "../src/Track.h"
  #include "../src/TrackGenerator.h"
  #include "../src/Universe.h"
  #include "../src/Cmfd.h"
  #include "../src/Vector.h"
  #include "../src/Matrix.h"
  #include "../src/linalg.h"

  #ifdef ICPC
  #include "../src/VectorizedSolver.h"
  #endif

  #define printf PySys_WriteStdout

  /* Exception helpers */
  static int swig_c_error_num = 0;
  static char swig_c_err_msg[1024];

  const char* err_occurred(void) {
    if (swig_c_error_num) {
      swig_c_error_num = 0;
      return (const char*)swig_c_err_msg;
    }
    return NULL;
  }

  void set_err(const char *msg) {
    swig_c_error_num = 1;
    strncpy(swig_c_err_msg, msg, 1024);
  }




  Lattice* castUniverseToLattice(Universe* universe) {
    return dynamic_cast<Lattice*>(universe);
  }

  Universe* castLatticeToUniverse(Lattice* lattice) {
    return dynamic_cast<Universe*>(lattice);
  }

  Plane* castSurfaceToPlane(Surface* plane) {
    return dynamic_cast<Plane*>(plane);
  }

  XPlane* castSurfaceToXPlane(Surface* xplane) {
    return dynamic_cast<XPlane*>(xplane);
  }

  YPlane* castSurfaceToYPlane(Surface* yplane) {
    return dynamic_cast<YPlane*>(yplane);
  }

  ZPlane* castSurfaceToZPlane(Surface* zplane) {
    return dynamic_cast<ZPlane*>(zplane);
  }

  ZCylinder* castSurfaceToZCylinder(Surface* zcylinder) {
    return dynamic_cast<ZCylinder*>(zcylinder);
  }



#include <stdexcept>


#if defined(__GNUC__)
#  if __GNUC__ == 2 && __GNUC_MINOR <= 96
#     define SWIG_STD_NOMODERN_STL
#  endif
#endif


#include <string>


#include <stddef.h>


#include <utility>


#include <iostream>

#if PY_VERSION_HEX >= 0x03020000
# define SWIGPY_SLICE_ARG(obj) ((PyObject*) (obj))
#else
# define SWIGPY_SLICE_ARG(obj) ((PySliceObject*) (obj))
#endif


namespace swig {
  struct stop_iteration {
  };

  struct SwigPyIterator {
  private:
    SwigPtr_PyObject _seq;

  protected:
    SwigPyIterator(PyObject *seq) : _seq(seq)
    {
    }
      
  public:
    virtual ~SwigPyIterator() {}

    // Access iterator method, required by Python
    virtual PyObject *value() const = 0;

    // Forward iterator method, required by Python
    virtual SwigPyIterator *incr(size_t n = 1) = 0;
    
    // Backward iterator method, very common in C++, but not required in Python
    virtual SwigPyIterator *decr(size_t /*n*/ = 1)
    {
      throw stop_iteration();
    }

    // Random access iterator methods, but not required in Python
    virtual ptrdiff_t distance(const SwigPyIterator &/*x*/) const
    {
      throw std::invalid_argument("operation not supported");
    }

    virtual bool equal (const SwigPyIterator &/*x*/) const
    {
      throw std::invalid_argument("operation not supported");
    }
    
    // C++ common/needed methods
    virtual SwigPyIterator *copy() const = 0;

    PyObject *next()     
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK; // disable threads       
      PyObject *obj = value();
      incr();       
      SWIG_PYTHON_THREAD_END_BLOCK; // re-enable threads
      return obj;     
    }

    /* Make an alias for Python 3.x */
    PyObject *__next__()
    {
      return next();
    }

    PyObject *previous()
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK; // disable threads       
      decr();
      PyObject *obj = value();
      SWIG_PYTHON_THREAD_END_BLOCK; // re-enable threads       
      return obj;
    }

    SwigPyIterator *advance(ptrdiff_t n)
    {
      return  (n > 0) ?  incr(n) : decr(-n);
    }
      
    bool operator == (const SwigPyIterator& x)  const
    {
      return equal(x);
    }
      
    bool operator != (const SwigPyIterator& x) const
    {
      return ! operator==(x);
    }
      
    SwigPyIterator& operator += (ptrdiff_t n)
    {
      return *advance(n);
    }

    SwigPyIterator& operator -= (ptrdiff_t n)
    {
      return *advance(-n);
    }
      
    SwigPyIterator* operator + (ptrdiff_t n) const
    {
      return copy()->advance(n);
    }

    SwigPyIterator* operator - (ptrdiff_t n) const
    {
      return copy()->advance(-n);
    }
      
    ptrdiff_t operator - (const SwigPyIterator& x) const
    {
      return x.distance(*this);
    }
      
    static swig_type_info* descriptor() {
      static int init = 0;
      static swig_type_info* desc = 0;
      if (!init) {
	desc = SWIG_TypeQuery("swig::SwigPyIterator *");
	init = 1;
      }	
      return desc;
    }    
  };

#if defined(SWIGPYTHON_BUILTIN)
  inline PyObject* make_output_iterator_builtin (PyObject *pyself)
  {
    Py_INCREF(pyself);
    return pyself;
  }
#endif
}


SWIGINTERN int
SWIG_AsVal_double (PyObject *obj, double *val)
{
  int res = SWIG_TypeError;
  if (PyFloat_Check(obj)) {
    if (val) *val = PyFloat_AsDouble(obj);
    return SWIG_OK;
  } else if (PyInt_Check(obj)) {
    if (val) *val = PyInt_AsLong(obj);
    return SWIG_OK;
  } else if (PyLong_Check(obj)) {
    double v = PyLong_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    double d = PyFloat_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = d;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      long v = PyLong_AsLong(obj);
      if (!PyErr_Occurred()) {
	if (val) *val = v;
	return SWIG_AddCast(SWIG_AddCast(SWIG_OK));
      } else {
	PyErr_Clear();
      }
    }
  }
#endif
  return res;
}


#include <float.h>


#include <math.h>


SWIGINTERNINLINE int
SWIG_CanCastAsInteger(double *d, double min, double max) {
  double x = *d;
  if ((min <= x && x <= max)) {
   double fx = floor(x);
   double cx = ceil(x);
   double rd =  ((x - fx) < 0.5) ? fx : cx; /* simple rint */
   if ((errno == EDOM) || (errno == ERANGE)) {
     errno = 0;
   } else {
     double summ, reps, diff;
     if (rd < x) {
       diff = x - rd;
     } else if (rd > x) {
       diff = rd - x;
     } else {
       return 1;
     }
     summ = rd + x;
     reps = diff/summ;
     if (reps < 8*DBL_EPSILON) {
       *d = rd;
       return 1;
     }
   }
  }
  return 0;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_long (PyObject *obj, unsigned long *val) 
{
#if PY_VERSION_HEX < 0x03000000
  if (PyInt_Check(obj)) {
    long v = PyInt_AsLong(obj);
    if (v >= 0) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      return SWIG_OverflowError;
    }
  } else
#endif
  if (PyLong_Check(obj)) {
    unsigned long v = PyLong_AsUnsignedLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
#if PY_VERSION_HEX >= 0x03000000
      {
        long v = PyLong_AsLong(obj);
        if (!PyErr_Occurred()) {
          if (v < 0) {
            return SWIG_OverflowError;
          }
        } else {
          PyErr_Clear();
        }
      }
#endif
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    unsigned long v = PyLong_AsUnsignedLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double (obj,&d));
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, 0, ULONG_MAX)) {
	if (val) *val = (unsigned long)(d);
	return res;
      }
    }
  }
#endif
  return SWIG_TypeError;
}


SWIGINTERNINLINE int
SWIG_AsVal_size_t (PyObject * obj, size_t *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, val ? &v : 0);
  if (SWIG_IsOK(res) && val) *val = static_cast< size_t >(v);
  return res;
}


  #define SWIG_From_long   PyLong_FromLong 


SWIGINTERNINLINE PyObject *
SWIG_From_ptrdiff_t  (ptrdiff_t value)
{    
  return SWIG_From_long  (static_cast< long >(value));
}


SWIGINTERNINLINE PyObject*
  SWIG_From_bool  (bool value)
{
  return PyBool_FromLong(value ? 1 : 0);
}


SWIGINTERN int
SWIG_AsVal_long (PyObject *obj, long* val)
{
  if (PyInt_Check(obj)) {
    if (val) *val = PyInt_AsLong(obj);
    return SWIG_OK;
  } else if (PyLong_Check(obj)) {
    long v = PyLong_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    long v = PyInt_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double (obj,&d));
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, LONG_MIN, LONG_MAX)) {
	if (val) *val = (long)(d);
	return res;
      }
    }
  }
#endif
  return SWIG_TypeError;
}


SWIGINTERNINLINE int
SWIG_AsVal_ptrdiff_t (PyObject * obj, ptrdiff_t *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, val ? &v : 0);
  if (SWIG_IsOK(res) && val) *val = static_cast< ptrdiff_t >(v);
  return res;
}


#include <algorithm>


#include <map>


#include <algorithm>


#ifndef SWIG_FILE_WITH_INIT
#define NO_IMPORT_ARRAY
#endif
#include "stdio.h"
#define NPY_NO_DEPRECATED_API NPY_1_7_API_VERSION
#include <numpy/arrayobject.h>


#include <vector>


namespace swig {  
  template <class Type>
  struct noconst_traits {
    typedef Type noconst_type;
  };

  template <class Type>
  struct noconst_traits<const Type> {
    typedef Type noconst_type;
  };

  /*
    type categories
  */
  struct pointer_category { };  
  struct value_category { };

  /*
    General traits that provides type_name and type_info
  */
  template <class Type> struct traits { };

  template <class Type>
  inline const char* type_name() {
    return traits<typename noconst_traits<Type >::noconst_type >::type_name();
  }

  template <class Type> 
  struct traits_info {
    static swig_type_info *type_query(std::string name) {
      name += " *";
      return SWIG_TypeQuery(name.c_str());
    }    
    static swig_type_info *type_info() {
      static swig_type_info *info = type_query(type_name<Type>());
      return info;
    }
  };

  template <class Type>
  inline swig_type_info *type_info() {
    return traits_info<Type>::type_info();
  }

  /*
    Partial specialization for pointers
  */
  template <class Type> struct traits <Type *> {
    typedef pointer_category category;
    static std::string make_ptr_name(const char* name) {
      std::string ptrname = name;
      ptrname += " *";
      return ptrname;
    }    
    static const char* type_name() {
      static std::string name = make_ptr_name(swig::type_name<Type>());
      return name.c_str();
    }
  };

  template <class Type, class Category> 
  struct traits_as { };
 
  template <class Type, class Category> 
  struct traits_check { };

}


namespace swig {  
  /*
    Traits that provides the from method
  */
  template <class Type> struct traits_from_ptr {
    static PyObject *from(Type *val, int owner = 0) {
      return SWIG_InternalNewPointerObj(val, type_info<Type>(), owner);
    }
  };

  template <class Type> struct traits_from {
    static PyObject *from(const Type& val) {
      return traits_from_ptr<Type>::from(new Type(val), 1);
    }
  };

  template <class Type> struct traits_from<Type *> {
    static PyObject *from(Type* val) {
      return traits_from_ptr<Type>::from(val, 0);
    }
  };

  template <class Type> struct traits_from<const Type *> {
    static PyObject *from(const Type* val) {
      return traits_from_ptr<Type>::from(const_cast<Type*>(val), 0);
    }
  };


  template <class Type>
  inline PyObject *from(const Type& val) {
    return traits_from<Type>::from(val);
  }

  template <class Type>
  inline PyObject *from_ptr(Type* val, int owner) {
    return traits_from_ptr<Type>::from(val, owner);
  }

  /*
    Traits that provides the asval/as/check method
  */
  template <class Type>
  struct traits_asptr {   
    static int asptr(PyObject *obj, Type **val) {
      Type *p;
      int res = SWIG_ConvertPtr(obj, (void**)&p, type_info<Type>(), 0);
      if (SWIG_IsOK(res)) {
	if (val) *val = p;
      }
      return res;
    }
  }; 

  template <class Type>
  inline int asptr(PyObject *obj, Type **vptr) {
    return traits_asptr<Type>::asptr(obj, vptr);
  }

  template <class Type> 
  struct traits_asval {
    static int asval(PyObject *obj, Type *val) {
      if (val) {
	Type *p = 0;
	int res = traits_asptr<Type>::asptr(obj, &p);
	if (!SWIG_IsOK(res)) return res;	
	if (p) {
	  typedef typename noconst_traits<Type>::noconst_type noconst_type;
	  *(const_cast<noconst_type*>(val)) = *p;
	  if (SWIG_IsNewObj(res)){
	    delete p;
	    res = SWIG_DelNewMask(res);
	  }
	  return res;
	} else {
	  return SWIG_ERROR;
	}
      } else {
	return traits_asptr<Type>::asptr(obj, (Type **)(0));
      }
    }
  };

  template <class Type> struct traits_asval<Type*> {
    static int asval(PyObject *obj, Type **val) {
      if (val) {
        typedef typename noconst_traits<Type>::noconst_type noconst_type;
        noconst_type *p = 0;
        int res = traits_asptr<noconst_type>::asptr(obj,  &p);
        if (SWIG_IsOK(res)) {
          *(const_cast<noconst_type**>(val)) = p;
	}
	return res;
      } else {
	return traits_asptr<Type>::asptr(obj, (Type **)(0));
      }
    }
  };
  
  template <class Type>
  inline int asval(PyObject *obj, Type *val) {
    return traits_asval<Type>::asval(obj, val);
  }

  template <class Type> 
  struct traits_as<Type, value_category> {
    static Type as(PyObject *obj, bool throw_error) {
      Type v;
      int res = asval(obj, &v);
      if (!obj || !SWIG_IsOK(res)) {
	if (!PyErr_Occurred()) {
	  ::SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	if (throw_error) throw std::invalid_argument("bad type");
      }
      return v;
    }
  };

  template <class Type> 
  struct traits_as<Type, pointer_category> {
    static Type as(PyObject *obj, bool throw_error) {
      Type *v = 0;      
      int res = (obj ? traits_asptr<Type>::asptr(obj, &v) : SWIG_ERROR);
      if (SWIG_IsOK(res) && v) {
	if (SWIG_IsNewObj(res)) {
	  Type r(*v);
	  delete v;
	  return r;
	} else {
	  return *v;
	}
      } else {
	// Uninitialized return value, no Type() constructor required.
	static Type *v_def = (Type*) malloc(sizeof(Type));
	if (!PyErr_Occurred()) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	if (throw_error) throw std::invalid_argument("bad type");
	memset(v_def,0,sizeof(Type));
	return *v_def;
      }
    }
  };

  template <class Type> 
  struct traits_as<Type*, pointer_category> {
    static Type* as(PyObject *obj, bool throw_error) {
      Type *v = 0;      
      int res = (obj ? traits_asptr<Type>::asptr(obj, &v) : SWIG_ERROR);
      if (SWIG_IsOK(res)) {
	return v;
      } else {
	if (!PyErr_Occurred()) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	if (throw_error) throw std::invalid_argument("bad type");
	return 0;
      }
    }
  };
    
  template <class Type>
  inline Type as(PyObject *obj, bool te = false) {
    return traits_as<Type, typename traits<Type>::category>::as(obj, te);
  }

  template <class Type> 
  struct traits_check<Type, value_category> {
    static bool check(PyObject *obj) {
      int res = obj ? asval(obj, (Type *)(0)) : SWIG_ERROR;
      return SWIG_IsOK(res) ? true : false;
    }
  };

  template <class Type> 
  struct traits_check<Type, pointer_category> {
    static bool check(PyObject *obj) {
      int res = obj ? asptr(obj, (Type **)(0)) : SWIG_ERROR;
      return SWIG_IsOK(res) ? true : false;
    }
  };

  template <class Type>
  inline bool check(PyObject *obj) {
    return traits_check<Type, typename traits<Type>::category>::check(obj);
  }
}


#include <functional>

namespace std {
  template <>
  struct less <PyObject *>: public binary_function<PyObject *, PyObject *, bool>
  {
    bool
    operator()(PyObject * v, PyObject *w) const
    { 
      bool res;
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      res = PyObject_RichCompareBool(v, w, Py_LT) ? true : false;
      /* This may fall into a case of inconsistent
               eg. ObjA > ObjX > ObjB
               but ObjA < ObjB
      */
      if( PyErr_Occurred() && PyErr_ExceptionMatches(PyExc_TypeError) )
      {
        /* Objects can't be compared, this mostly occurred in Python 3.0 */
        /* Compare their ptr directly for a workaround */
        res = (v < w);
        PyErr_Clear();
      }
      SWIG_PYTHON_THREAD_END_BLOCK;
      return res;
    }
  };

  template <>
  struct less <swig::SwigPtr_PyObject>: public binary_function<swig::SwigPtr_PyObject, swig::SwigPtr_PyObject, bool>
  {
    bool
    operator()(const swig::SwigPtr_PyObject& v, const swig::SwigPtr_PyObject& w) const
    {
      return std::less<PyObject *>()(v, w);
    }
  };

  template <>
  struct less <swig::SwigVar_PyObject>: public binary_function<swig::SwigVar_PyObject, swig::SwigVar_PyObject, bool>
  {
    bool
    operator()(const swig::SwigVar_PyObject& v, const swig::SwigVar_PyObject& w) const
    {
      return std::less<PyObject *>()(v, w);
    }
  };

}

namespace swig {
  template <> struct traits<PyObject *> {
    typedef value_category category;
    static const char* type_name() { return "PyObject *"; }
  };  

  template <>  struct traits_asval<PyObject * > {   
    typedef PyObject * value_type;
    static int asval(PyObject *obj, value_type *val) {
      if (val) *val = obj;
      return SWIG_OK;
    }
  };

  template <> 
  struct traits_check<PyObject *, value_category> {
    static bool check(PyObject *) {
      return true;
    }
  };

  template <>  struct traits_from<PyObject *> {
    typedef PyObject * value_type;
    static PyObject *from(const value_type& val) {
      Py_XINCREF(val);
      return val;
    }
  };
  
}

namespace swig {
  template <class Difference>
  inline size_t
  check_index(Difference i, size_t size, bool insert = false) {
    if ( i < 0 ) {
      if ((size_t) (-i) <= size)
	return (size_t) (i + size);
    } else if ( (size_t) i < size ) {
      return (size_t) i;
    } else if (insert && ((size_t) i == size)) {
      return size;
    }
    throw std::out_of_range("index out of range");
  }

  template <class Difference>
  void
  slice_adjust(Difference i, Difference j, Py_ssize_t step, size_t size, Difference &ii, Difference &jj, bool insert = false) {
    if (step == 0) {
      throw std::invalid_argument("slice step cannot be zero");
    } else if (step > 0) {
      // Required range: 0 <= i < size, 0 <= j < size
      if (i < 0) {
        ii = 0;
      } else if (i < (Difference)size) {
        ii = i;
      } else if (insert && (i >= (Difference)size)) {
        ii = (Difference)size;
      }
      if ( j < 0 ) {
        jj = 0;
      } else {
        jj = (j < (Difference)size) ? j : (Difference)size;
      }
    } else {
      // Required range: -1 <= i < size-1, -1 <= j < size-1
      if (i < -1) {
        ii = -1;
      } else if (i < (Difference) size) {
        ii = i;
      } else if (i >= (Difference)(size-1)) {
        ii = (Difference)(size-1);
      }
      if (j < -1) {
        jj = -1;
      } else {
        jj = (j < (Difference)size ) ? j : (Difference)(size-1);
      }
    }
  }

  template <class Sequence, class Difference>
  inline typename Sequence::iterator
  getpos(Sequence* self, Difference i)  {
    typename Sequence::iterator pos = self->begin();
    std::advance(pos, check_index(i,self->size()));
    return pos;
  }

  template <class Sequence, class Difference>
  inline typename Sequence::const_iterator
  cgetpos(const Sequence* self, Difference i)  {
    typename Sequence::const_iterator pos = self->begin();
    std::advance(pos, check_index(i,self->size()));
    return pos;
  }

  template <class Sequence, class Difference>
  inline Sequence*
  getslice(const Sequence* self, Difference i, Difference j, Py_ssize_t step) {
    typename Sequence::size_type size = self->size();
    Difference ii = 0;
    Difference jj = 0;
    swig::slice_adjust(i, j, step, size, ii, jj);

    if (step > 0) {
      typename Sequence::const_iterator sb = self->begin();
      typename Sequence::const_iterator se = self->begin();
      std::advance(sb,ii);
      std::advance(se,jj);
      if (step == 1) {
        return new Sequence(sb, se);
      } else {
        Sequence *sequence = new Sequence();
        typename Sequence::const_iterator it = sb;
        while (it!=se) {
          sequence->push_back(*it);
          for (Py_ssize_t c=0; c<step && it!=se; ++c)
            it++;
        }
        return sequence;
      } 
    } else {
      Sequence *sequence = new Sequence();
      if (ii > jj) {
        typename Sequence::const_reverse_iterator sb = self->rbegin();
        typename Sequence::const_reverse_iterator se = self->rbegin();
        std::advance(sb,size-ii-1);
        std::advance(se,size-jj-1);
        typename Sequence::const_reverse_iterator it = sb;
        while (it!=se) {
          sequence->push_back(*it);
          for (Py_ssize_t c=0; c<-step && it!=se; ++c)
            it++;
        }
      }
      return sequence;
    }
  }

  template <class Sequence, class Difference, class InputSeq>
  inline void
  setslice(Sequence* self, Difference i, Difference j, Py_ssize_t step, const InputSeq& is = InputSeq()) {
    typename Sequence::size_type size = self->size();
    Difference ii = 0;
    Difference jj = 0;
    swig::slice_adjust(i, j, step, size, ii, jj, true);
    if (step > 0) {
      if (jj < ii)
        jj = ii;
      if (step == 1) {
        size_t ssize = jj - ii;
        if (ssize <= is.size()) {
          // expanding/staying the same size
          typename Sequence::iterator sb = self->begin();
          typename InputSeq::const_iterator isit = is.begin();
          std::advance(sb,ii);
          std::advance(isit, jj - ii);
          self->insert(std::copy(is.begin(), isit, sb), isit, is.end());
        } else {
          // shrinking
          typename Sequence::iterator sb = self->begin();
          typename Sequence::iterator se = self->begin();
          std::advance(sb,ii);
          std::advance(se,jj);
          self->erase(sb,se);
          sb = self->begin();
          std::advance(sb,ii);
          self->insert(sb, is.begin(), is.end());
        }
      } else {
        size_t replacecount = (jj - ii + step - 1) / step;
        if (is.size() != replacecount) {
          char msg[1024];
          sprintf(msg, "attempt to assign sequence of size %lu to extended slice of size %lu", (unsigned long)is.size(), (unsigned long)replacecount);
          throw std::invalid_argument(msg);
        }
        typename Sequence::const_iterator isit = is.begin();
        typename Sequence::iterator it = self->begin();
        std::advance(it,ii);
        for (size_t rc=0; rc<replacecount; ++rc) {
          *it++ = *isit++;
          for (Py_ssize_t c=0; c<(step-1) && it != self->end(); ++c)
            it++;
        }
      }
    } else {
      if (jj > ii)
        jj = ii;
      size_t replacecount = (ii - jj - step - 1) / -step;
      if (is.size() != replacecount) {
        char msg[1024];
        sprintf(msg, "attempt to assign sequence of size %lu to extended slice of size %lu", (unsigned long)is.size(), (unsigned long)replacecount);
        throw std::invalid_argument(msg);
      }
      typename Sequence::const_iterator isit = is.begin();
      typename Sequence::reverse_iterator it = self->rbegin();
      std::advance(it,size-ii-1);
      for (size_t rc=0; rc<replacecount; ++rc) {
        *it++ = *isit++;
        for (Py_ssize_t c=0; c<(-step-1) && it != self->rend(); ++c)
          it++;
      }
    }
  }

  template <class Sequence, class Difference>
  inline void
  delslice(Sequence* self, Difference i, Difference j, Py_ssize_t step) {
    typename Sequence::size_type size = self->size();
    Difference ii = 0;
    Difference jj = 0;
    swig::slice_adjust(i, j, step, size, ii, jj, true);
    if (step > 0) {
      if (jj > ii) {
        typename Sequence::iterator sb = self->begin();
        std::advance(sb,ii);
        if (step == 1) {
          typename Sequence::iterator se = self->begin();
          std::advance(se,jj);
          self->erase(sb,se);
        } else {
          typename Sequence::iterator it = sb;
          size_t delcount = (jj - ii + step - 1) / step;
          while (delcount) {
            it = self->erase(it);
            for (Py_ssize_t c=0; c<(step-1) && it != self->end(); ++c)
              it++;
            delcount--;
          }
        }
      }
    } else {
      if (ii > jj) {
        typename Sequence::reverse_iterator sb = self->rbegin();
        std::advance(sb,size-ii-1);
        typename Sequence::reverse_iterator it = sb;
        size_t delcount = (ii - jj - step - 1) / -step;
        while (delcount) {
          it = typename Sequence::reverse_iterator(self->erase((++it).base()));
          for (Py_ssize_t c=0; c<(-step-1) && it != self->rend(); ++c)
            it++;
          delcount--;
        }
      }
    }
  }
}


#if defined(__SUNPRO_CC) && defined(_RWSTD_VER)
#  if !defined(SWIG_NO_STD_NOITERATOR_TRAITS_STL)
#    define SWIG_STD_NOITERATOR_TRAITS_STL
#  endif
#endif

#if !defined(SWIG_STD_NOITERATOR_TRAITS_STL)
#include <iterator>
#else
namespace std {
  template <class Iterator>
  struct iterator_traits {
    typedef ptrdiff_t difference_type;
    typedef typename Iterator::value_type value_type;
  };

  template <class Iterator, class Category,class T, class Reference, class Pointer, class Distance>
  struct iterator_traits<__reverse_bi_iterator<Iterator,Category,T,Reference,Pointer,Distance> > {
    typedef Distance difference_type;
    typedef T value_type;
  };

  template <class T>
  struct iterator_traits<T*> {
    typedef T value_type;
    typedef ptrdiff_t difference_type;
  };

  template<typename _InputIterator>
  inline typename iterator_traits<_InputIterator>::difference_type
  distance(_InputIterator __first, _InputIterator __last)
  {
    typename iterator_traits<_InputIterator>::difference_type __n = 0;
    while (__first != __last) {
      ++__first; ++__n;
    }
    return __n;
  }
}
#endif


namespace swig {
  template<typename OutIterator>
  class SwigPyIterator_T :  public SwigPyIterator
  {
  public:
    typedef OutIterator out_iterator;
    typedef typename std::iterator_traits<out_iterator>::value_type value_type;    
    typedef SwigPyIterator_T<out_iterator> self_type;

    SwigPyIterator_T(out_iterator curr, PyObject *seq)
      : SwigPyIterator(seq), current(curr)
    {
    }

    const out_iterator& get_current() const
    {
      return current;
    }

    
    bool equal (const SwigPyIterator &iter) const
    {
      const self_type *iters = dynamic_cast<const self_type *>(&iter);
      if (iters) {
	return (current == iters->get_current());
      } else {
	throw std::invalid_argument("bad iterator type");
      }
    }
    
    ptrdiff_t distance(const SwigPyIterator &iter) const
    {
      const self_type *iters = dynamic_cast<const self_type *>(&iter);
      if (iters) {
	return std::distance(current, iters->get_current());
      } else {
	throw std::invalid_argument("bad iterator type");
      }
    }    
    
  protected:
    out_iterator current;
  };
  
  template <class ValueType>
  struct from_oper 
  {
    typedef const ValueType& argument_type;
    typedef PyObject *result_type;
    result_type operator()(argument_type v) const
    {
      return swig::from(v);
    }
  };

  template<typename OutIterator, 
	   typename ValueType = typename std::iterator_traits<OutIterator>::value_type,
	   typename FromOper = from_oper<ValueType> >
  class SwigPyIteratorOpen_T :  public SwigPyIterator_T<OutIterator>
  {
  public:
    FromOper from;
    typedef OutIterator out_iterator;
    typedef ValueType value_type;
    typedef SwigPyIterator_T<out_iterator>  base;
    typedef SwigPyIteratorOpen_T<OutIterator, ValueType, FromOper> self_type;
    
    SwigPyIteratorOpen_T(out_iterator curr, PyObject *seq)
      : SwigPyIterator_T<OutIterator>(curr, seq)
    {
    }
    
    PyObject *value() const {
      return from(static_cast<const value_type&>(*(base::current)));
    }
    
    SwigPyIterator *copy() const
    {
      return new self_type(*this);
    }

    SwigPyIterator *incr(size_t n = 1)
    {
      while (n--) {
	++base::current;
      }
      return this;
    }

    SwigPyIterator *decr(size_t n = 1)
    {
      while (n--) {
	--base::current;
      }
      return this;
    }
  };

  template<typename OutIterator, 
	   typename ValueType = typename std::iterator_traits<OutIterator>::value_type,
	   typename FromOper = from_oper<ValueType> >
  class SwigPyIteratorClosed_T :  public SwigPyIterator_T<OutIterator>
  {
  public:
    FromOper from;
    typedef OutIterator out_iterator;
    typedef ValueType value_type;
    typedef SwigPyIterator_T<out_iterator>  base;    
    typedef SwigPyIteratorClosed_T<OutIterator, ValueType, FromOper> self_type;
    
    SwigPyIteratorClosed_T(out_iterator curr, out_iterator first, out_iterator last, PyObject *seq)
      : SwigPyIterator_T<OutIterator>(curr, seq), begin(first), end(last)
    {
    }
    
    PyObject *value() const {
      if (base::current == end) {
	throw stop_iteration();
      } else {
	return from(static_cast<const value_type&>(*(base::current)));
      }
    }
    
    SwigPyIterator *copy() const
    {
      return new self_type(*this);
    }

    SwigPyIterator *incr(size_t n = 1)
    {
      while (n--) {
	if (base::current == end) {
	  throw stop_iteration();
	} else {
	  ++base::current;
	}
      }
      return this;
    }

    SwigPyIterator *decr(size_t n = 1)
    {
      while (n--) {
	if (base::current == begin) {
	  throw stop_iteration();
	} else {
	  --base::current;
	}
      }
      return this;
    }

  private:
    out_iterator begin;
    out_iterator end;
  };

  template<typename OutIter>
  inline SwigPyIterator*
  make_output_iterator(const OutIter& current, const OutIter& begin,const OutIter& end, PyObject *seq = 0)
  {
    return new SwigPyIteratorClosed_T<OutIter>(current, begin, end, seq);
  }

  template<typename OutIter>
  inline SwigPyIterator*
  make_output_iterator(const OutIter& current, PyObject *seq = 0)
  {
    return new SwigPyIteratorOpen_T<OutIter>(current, seq);
  }

}


namespace swig
{
  template <class T>
  struct SwigPySequence_Ref
  {
    SwigPySequence_Ref(PyObject* seq, int index)
      : _seq(seq), _index(index)
    {
    }
    
    operator T () const
    {
      swig::SwigVar_PyObject item = PySequence_GetItem(_seq, _index);
      try {
	return swig::as<T>(item, true);
      } catch (std::exception& e) {
	char msg[1024];
	sprintf(msg, "in sequence element %d ", _index);
	if (!PyErr_Occurred()) {
	  ::SWIG_Error(SWIG_TypeError,  swig::type_name<T>());
	}
	SWIG_Python_AddErrorMsg(msg);
	SWIG_Python_AddErrorMsg(e.what());
	throw;
      }
    }

    SwigPySequence_Ref& operator=(const T& v)
    {
      PySequence_SetItem(_seq, _index, swig::from<T>(v));
      return *this;
    }

  private:
    PyObject* _seq;
    int _index;
  };

  template <class T>
  struct SwigPySequence_ArrowProxy
  {
    SwigPySequence_ArrowProxy(const T& x): m_value(x) {}
    const T* operator->() const { return &m_value; }
    operator const T*() const { return &m_value; }
    T m_value;
  };

  template <class T, class Reference >
  struct SwigPySequence_InputIterator
  {
    typedef SwigPySequence_InputIterator<T, Reference > self;

    typedef std::random_access_iterator_tag iterator_category;
    typedef Reference reference;
    typedef T value_type;
    typedef T* pointer;
    typedef int difference_type;

    SwigPySequence_InputIterator()
    {
    }

    SwigPySequence_InputIterator(PyObject* seq, int index)
      : _seq(seq), _index(index)
    {
    }

    reference operator*() const
    {
      return reference(_seq, _index);
    }

    SwigPySequence_ArrowProxy<T>
    operator->() const {
      return SwigPySequence_ArrowProxy<T>(operator*());
    }

    bool operator==(const self& ri) const
    {
      return (_index == ri._index) && (_seq == ri._seq);
    }

    bool operator!=(const self& ri) const
    {
      return !(operator==(ri));
    }

    self& operator ++ ()
    {
      ++_index;
      return *this;
    }

    self& operator -- ()
    {
      --_index;
      return *this;
    }

    self& operator += (difference_type n)
    {
      _index += n;
      return *this;
    }

    self operator +(difference_type n) const
    {
      return self(_seq, _index + n);
    }

    self& operator -= (difference_type n)
    {
      _index -= n;
      return *this;
    }

    self operator -(difference_type n) const
    {
      return self(_seq, _index - n);
    }

    difference_type operator - (const self& ri) const
    {
      return _index - ri._index;
    }

    bool operator < (const self& ri) const
    {
      return _index < ri._index;
    }

    reference
    operator[](difference_type n) const
    {
      return reference(_seq, _index + n);
    }

  private:
    PyObject* _seq;
    difference_type _index;
  };

  template <class T>
  struct SwigPySequence_Cont
  {
    typedef SwigPySequence_Ref<T> reference;
    typedef const SwigPySequence_Ref<T> const_reference;
    typedef T value_type;
    typedef T* pointer;
    typedef int difference_type;
    typedef int size_type;
    typedef const pointer const_pointer;
    typedef SwigPySequence_InputIterator<T, reference> iterator;
    typedef SwigPySequence_InputIterator<T, const_reference> const_iterator;

    SwigPySequence_Cont(PyObject* seq) : _seq(0)
    {
      if (!PySequence_Check(seq)) {
	throw std::invalid_argument("a sequence is expected");
      }
      _seq = seq;
      Py_INCREF(_seq);
    }

    ~SwigPySequence_Cont()
    {
      Py_XDECREF(_seq);
    }

    size_type size() const
    {
      return static_cast<size_type>(PySequence_Size(_seq));
    }

    bool empty() const
    {
      return size() == 0;
    }

    iterator begin()
    {
      return iterator(_seq, 0);
    }

    const_iterator begin() const
    {
      return const_iterator(_seq, 0);
    }

    iterator end()
    {
      return iterator(_seq, size());
    }

    const_iterator end() const
    {
      return const_iterator(_seq, size());
    }

    reference operator[](difference_type n)
    {
      return reference(_seq, n);
    }

    const_reference operator[](difference_type n)  const
    {
      return const_reference(_seq, n);
    }

    bool check(bool set_err = true) const
    {
      int s = size();
      for (int i = 0; i < s; ++i) {
	swig::SwigVar_PyObject item = PySequence_GetItem(_seq, i);
	if (!swig::check<value_type>(item)) {
	  if (set_err) {
	    char msg[1024];
	    sprintf(msg, "in sequence element %d", i);
	    SWIG_Error(SWIG_RuntimeError, msg);
	  }
	  return false;
	}
      }
      return true;
    }

  private:
    PyObject* _seq;
  };

}


  #define SWIG_From_double   PyFloat_FromDouble 


namespace swig {
  template <> struct traits<double > {
    typedef value_category category;
    static const char* type_name() { return"double"; }
  };  
  template <>  struct traits_asval<double > {   
    typedef double value_type;
    static int asval(PyObject *obj, value_type *val) { 
      return SWIG_AsVal_double (obj, val);
    }
  };
  template <>  struct traits_from<double > {
    typedef double value_type;
    static PyObject *from(const value_type& val) {
      return SWIG_From_double  (val);
    }
  };
}


namespace swig {
  template <class SwigPySeq, class Seq>
  inline void
  assign(const SwigPySeq& swigpyseq, Seq* seq) {
    // seq->assign(swigpyseq.begin(), swigpyseq.end()); // not used as not always implemented
    typedef typename SwigPySeq::value_type value_type;
    typename SwigPySeq::const_iterator it = swigpyseq.begin();
    for (;it != swigpyseq.end(); ++it) {
      seq->insert(seq->end(),(value_type)(*it));
    }
  }

  template <class Seq, class T = typename Seq::value_type >
  struct traits_asptr_stdseq {
    typedef Seq sequence;
    typedef T value_type;

    static int asptr(PyObject *obj, sequence **seq) {
      if (obj == Py_None || SWIG_Python_GetSwigThis(obj)) {
	sequence *p;
	if (::SWIG_ConvertPtr(obj,(void**)&p,
			      swig::type_info<sequence>(),0) == SWIG_OK) {
	  if (seq) *seq = p;
	  return SWIG_OLDOBJ;
	}
      } else if (PySequence_Check(obj)) {
	try {
	  SwigPySequence_Cont<value_type> swigpyseq(obj);
	  if (seq) {
	    sequence *pseq = new sequence();
	    assign(swigpyseq, pseq);
	    *seq = pseq;
	    return SWIG_NEWOBJ;
	  } else {
	    return swigpyseq.check() ? SWIG_OK : SWIG_ERROR;
	  }
	} catch (std::exception& e) {
	  if (seq) {
	    if (!PyErr_Occurred()) {
	      PyErr_SetString(PyExc_TypeError, e.what());
	    }
	  }
	  return SWIG_ERROR;
	}
      }
      return SWIG_ERROR;
    }
  };

  template <class Seq, class T = typename Seq::value_type >
  struct traits_from_stdseq {
    typedef Seq sequence;
    typedef T value_type;
    typedef typename Seq::size_type size_type;
    typedef typename sequence::const_iterator const_iterator;

    static PyObject *from(const sequence& seq) {
#ifdef SWIG_PYTHON_EXTRA_NATIVE_CONTAINERS
      swig_type_info *desc = swig::type_info<sequence>();
      if (desc && desc->clientdata) {
	return SWIG_NewPointerObj(new sequence(seq), desc, SWIG_POINTER_OWN);
      }
#endif
      size_type size = seq.size();
      if (size <= (size_type)INT_MAX) {
	PyObject *obj = PyTuple_New((int)size);
	int i = 0;
	for (const_iterator it = seq.begin();
	     it != seq.end(); ++it, ++i) {
	  PyTuple_SetItem(obj,i,swig::from<value_type>(*it));
	}
	return obj;
      } else {
	PyErr_SetString(PyExc_OverflowError,"sequence size not valid in python");
	return NULL;
      }
    }
  };
}


  namespace swig {
    template <class T>
    struct traits_asptr<std::vector<T> >  {
      static int asptr(PyObject *obj, std::vector<T> **vec) {
	return traits_asptr_stdseq<std::vector<T> >::asptr(obj, vec);
      }
    };
    
    template <class T>
    struct traits_from<std::vector<T> > {
      static PyObject *from(const std::vector<T>& vec) {
	return traits_from_stdseq<std::vector<T> >::from(vec);
      }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector<double, std::allocator< double > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "double" "," "std::allocator< double >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_double_Sg__iterator(std::vector< double > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_double_Sg____nonzero__(std::vector< double > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_double_Sg____bool__(std::vector< double > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< double >::size_type std_vector_Sl_double_Sg____len__(std::vector< double > const *self){
      return self->size();
    }

SWIGINTERNINLINE PyObject* 
SWIG_From_unsigned_SS_long  (unsigned long value)
{
  return (value > LONG_MAX) ?
    PyLong_FromUnsignedLong(value) : PyLong_FromLong(static_cast< long >(value)); 
}


SWIGINTERNINLINE PyObject *
SWIG_From_size_t  (size_t value)
{    
  return SWIG_From_unsigned_SS_long  (static_cast< unsigned long >(value));
}

SWIGINTERN std::vector< double >::value_type std_vector_Sl_double_Sg__pop(std::vector< double > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector<double,std::allocator< double > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN std::vector< double,std::allocator< double > > *std_vector_Sl_double_Sg____getslice__(std::vector< double > *self,std::vector< double >::difference_type i,std::vector< double >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_double_Sg____setslice__(std::vector< double > *self,std::vector< double >::difference_type i,std::vector< double >::difference_type j,std::vector< double,std::allocator< double > > const &v=std::vector< double,std::allocator< double > >()){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void std_vector_Sl_double_Sg____delslice__(std::vector< double > *self,std::vector< double >::difference_type i,std::vector< double >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_double_Sg____delitem____SWIG_0(std::vector< double > *self,std::vector< double >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
SWIGINTERN std::vector< double,std::allocator< double > > *std_vector_Sl_double_Sg____getitem____SWIG_0(std::vector< double > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector<double,std::allocator< double > >::difference_type id = i;
      std::vector<double,std::allocator< double > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_double_Sg____setitem____SWIG_0(std::vector< double > *self,PySliceObject *slice,std::vector< double,std::allocator< double > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector<double,std::allocator< double > >::difference_type id = i;
      std::vector<double,std::allocator< double > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void std_vector_Sl_double_Sg____setitem____SWIG_1(std::vector< double > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector<double,std::allocator< double > >::difference_type id = i;
      std::vector<double,std::allocator< double > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_double_Sg____delitem____SWIG_1(std::vector< double > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector<double,std::allocator< double > >::difference_type id = i;
      std::vector<double,std::allocator< double > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN std::vector< double >::value_type const &std_vector_Sl_double_Sg____getitem____SWIG_1(std::vector< double > const *self,std::vector< double >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_double_Sg____setitem____SWIG_2(std::vector< double > *self,std::vector< double >::difference_type i,std::vector< double >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void std_vector_Sl_double_Sg__append(std::vector< double > *self,std::vector< double >::value_type const &x){
      self->push_back(x);
    }
SWIGINTERN std::vector< double >::iterator std_vector_Sl_double_Sg__erase__SWIG_0(std::vector< double > *self,std::vector< double >::iterator pos){ return self->erase(pos); }
SWIGINTERN std::vector< double >::iterator std_vector_Sl_double_Sg__erase__SWIG_1(std::vector< double > *self,std::vector< double >::iterator first,std::vector< double >::iterator last){ return self->erase(first, last); }
SWIGINTERN std::vector< double >::iterator std_vector_Sl_double_Sg__insert__SWIG_0(std::vector< double > *self,std::vector< double >::iterator pos,std::vector< double >::value_type const &x){ return self->insert(pos, x); }
SWIGINTERN void std_vector_Sl_double_Sg__insert__SWIG_1(std::vector< double > *self,std::vector< double >::iterator pos,std::vector< double >::size_type n,std::vector< double >::value_type const &x){ self->insert(pos, n, x); }

#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


SWIGINTERN int
SWIG_AsVal_int (PyObject * obj, int *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < INT_MIN || v > INT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< int >(v);
    }
  }  
  return res;
}


SWIGINTERNINLINE PyObject*
  SWIG_From_int  (int value)
{
  return PyInt_FromLong((long) value);
}


namespace swig {
  template <> struct traits<int > {
    typedef value_category category;
    static const char* type_name() { return"int"; }
  };  
  template <>  struct traits_asval<int > {   
    typedef int value_type;
    static int asval(PyObject *obj, value_type *val) { 
      return SWIG_AsVal_int (obj, val);
    }
  };
  template <>  struct traits_from<int > {
    typedef int value_type;
    static PyObject *from(const value_type& val) {
      return SWIG_From_int  (val);
    }
  };
}


      namespace swig {
	template <>  struct traits<std::vector<int, std::allocator< int > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "int" "," "std::allocator< int >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_int_Sg__iterator(std::vector< int > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_int_Sg____nonzero__(std::vector< int > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_int_Sg____bool__(std::vector< int > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< int >::size_type std_vector_Sl_int_Sg____len__(std::vector< int > const *self){
      return self->size();
    }
SWIGINTERN std::vector< int >::value_type std_vector_Sl_int_Sg__pop(std::vector< int > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector<int,std::allocator< int > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN std::vector< int,std::allocator< int > > *std_vector_Sl_int_Sg____getslice__(std::vector< int > *self,std::vector< int >::difference_type i,std::vector< int >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_int_Sg____setslice__(std::vector< int > *self,std::vector< int >::difference_type i,std::vector< int >::difference_type j,std::vector< int,std::allocator< int > > const &v=std::vector< int,std::allocator< int > >()){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void std_vector_Sl_int_Sg____delslice__(std::vector< int > *self,std::vector< int >::difference_type i,std::vector< int >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_int_Sg____delitem____SWIG_0(std::vector< int > *self,std::vector< int >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
SWIGINTERN std::vector< int,std::allocator< int > > *std_vector_Sl_int_Sg____getitem____SWIG_0(std::vector< int > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector<int,std::allocator< int > >::difference_type id = i;
      std::vector<int,std::allocator< int > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_int_Sg____setitem____SWIG_0(std::vector< int > *self,PySliceObject *slice,std::vector< int,std::allocator< int > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector<int,std::allocator< int > >::difference_type id = i;
      std::vector<int,std::allocator< int > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void std_vector_Sl_int_Sg____setitem____SWIG_1(std::vector< int > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector<int,std::allocator< int > >::difference_type id = i;
      std::vector<int,std::allocator< int > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_int_Sg____delitem____SWIG_1(std::vector< int > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector<int,std::allocator< int > >::difference_type id = i;
      std::vector<int,std::allocator< int > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN std::vector< int >::value_type const &std_vector_Sl_int_Sg____getitem____SWIG_1(std::vector< int > const *self,std::vector< int >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_int_Sg____setitem____SWIG_2(std::vector< int > *self,std::vector< int >::difference_type i,std::vector< int >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void std_vector_Sl_int_Sg__append(std::vector< int > *self,std::vector< int >::value_type const &x){
      self->push_back(x);
    }
SWIGINTERN std::vector< int >::iterator std_vector_Sl_int_Sg__erase__SWIG_0(std::vector< int > *self,std::vector< int >::iterator pos){ return self->erase(pos); }
SWIGINTERN std::vector< int >::iterator std_vector_Sl_int_Sg__erase__SWIG_1(std::vector< int > *self,std::vector< int >::iterator first,std::vector< int >::iterator last){ return self->erase(first, last); }
SWIGINTERN std::vector< int >::iterator std_vector_Sl_int_Sg__insert__SWIG_0(std::vector< int > *self,std::vector< int >::iterator pos,std::vector< int >::value_type const &x){ return self->insert(pos, x); }
SWIGINTERN void std_vector_Sl_int_Sg__insert__SWIG_1(std::vector< int > *self,std::vector< int >::iterator pos,std::vector< int >::size_type n,std::vector< int >::value_type const &x){ self->insert(pos, n, x); }

      namespace swig {
	template <>  struct traits<std::vector<std::vector< int,std::allocator< int > >, std::allocator< std::vector< int,std::allocator< int > > > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "std::vector< int,std::allocator< int > >" "," "std::allocator< std::vector< int,std::allocator< int > > >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_std_vector_Sl_int_Sg__Sg__iterator(std::vector< std::vector< int > > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_std_vector_Sl_int_Sg__Sg____nonzero__(std::vector< std::vector< int > > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_std_vector_Sl_int_Sg__Sg____bool__(std::vector< std::vector< int > > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< std::vector< int > >::size_type std_vector_Sl_std_vector_Sl_int_Sg__Sg____len__(std::vector< std::vector< int > > const *self){
      return self->size();
    }
SWIGINTERN std::vector< std::vector< int > >::value_type std_vector_Sl_std_vector_Sl_int_Sg__Sg__pop(std::vector< std::vector< int > > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector<std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > *std_vector_Sl_std_vector_Sl_int_Sg__Sg____getslice__(std::vector< std::vector< int > > *self,std::vector< std::vector< int > >::difference_type i,std::vector< std::vector< int > >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_int_Sg__Sg____setslice__(std::vector< std::vector< int > > *self,std::vector< std::vector< int > >::difference_type i,std::vector< std::vector< int > >::difference_type j,std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > const &v=std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > >()){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_int_Sg__Sg____delslice__(std::vector< std::vector< int > > *self,std::vector< std::vector< int > >::difference_type i,std::vector< std::vector< int > >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_int_Sg__Sg____delitem____SWIG_0(std::vector< std::vector< int > > *self,std::vector< std::vector< int > >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
SWIGINTERN std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > *std_vector_Sl_std_vector_Sl_int_Sg__Sg____getitem____SWIG_0(std::vector< std::vector< int > > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector<std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > >::difference_type id = i;
      std::vector<std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_int_Sg__Sg____setitem____SWIG_0(std::vector< std::vector< int > > *self,PySliceObject *slice,std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector<std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > >::difference_type id = i;
      std::vector<std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_int_Sg__Sg____setitem____SWIG_1(std::vector< std::vector< int > > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector<std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > >::difference_type id = i;
      std::vector<std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_int_Sg__Sg____delitem____SWIG_1(std::vector< std::vector< int > > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector<std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > >::difference_type id = i;
      std::vector<std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN std::vector< std::vector< int > >::value_type const &std_vector_Sl_std_vector_Sl_int_Sg__Sg____getitem____SWIG_1(std::vector< std::vector< int > > const *self,std::vector< std::vector< int > >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_int_Sg__Sg____setitem____SWIG_2(std::vector< std::vector< int > > *self,std::vector< std::vector< int > >::difference_type i,std::vector< std::vector< int > >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_int_Sg__Sg__append(std::vector< std::vector< int > > *self,std::vector< std::vector< int > >::value_type const &x){
      self->push_back(x);
    }
SWIGINTERN std::vector< std::vector< int > >::iterator std_vector_Sl_std_vector_Sl_int_Sg__Sg__erase__SWIG_0(std::vector< std::vector< int > > *self,std::vector< std::vector< int > >::iterator pos){ return self->erase(pos); }
SWIGINTERN std::vector< std::vector< int > >::iterator std_vector_Sl_std_vector_Sl_int_Sg__Sg__erase__SWIG_1(std::vector< std::vector< int > > *self,std::vector< std::vector< int > >::iterator first,std::vector< std::vector< int > >::iterator last){ return self->erase(first, last); }
SWIGINTERN std::vector< std::vector< int > >::iterator std_vector_Sl_std_vector_Sl_int_Sg__Sg__insert__SWIG_0(std::vector< std::vector< int > > *self,std::vector< std::vector< int > >::iterator pos,std::vector< std::vector< int > >::value_type const &x){ return self->insert(pos, x); }
SWIGINTERN void std_vector_Sl_std_vector_Sl_int_Sg__Sg__insert__SWIG_1(std::vector< std::vector< int > > *self,std::vector< std::vector< int > >::iterator pos,std::vector< std::vector< int > >::size_type n,std::vector< std::vector< int > >::value_type const &x){ self->insert(pos, n, x); }

SWIGINTERN swig_type_info*
SWIG_pchar_descriptor(void)
{
  static int init = 0;
  static swig_type_info* info = 0;
  if (!init) {
    info = SWIG_TypeQuery("_p_char");
    init = 1;
  }
  return info;
}


SWIGINTERN int
SWIG_AsCharPtrAndSize(PyObject *obj, char** cptr, size_t* psize, int *alloc)
{
#if PY_VERSION_HEX>=0x03000000
  if (PyUnicode_Check(obj))
#else  
  if (PyString_Check(obj))
#endif
  {
    char *cstr; Py_ssize_t len;
#if PY_VERSION_HEX>=0x03000000
    if (!alloc && cptr) {
        /* We can't allow converting without allocation, since the internal
           representation of string in Python 3 is UCS-2/UCS-4 but we require
           a UTF-8 representation.
           TODO(bhy) More detailed explanation */
        return SWIG_RuntimeError;
    }
    obj = PyUnicode_AsUTF8String(obj);
    PyBytes_AsStringAndSize(obj, &cstr, &len);
    if(alloc) *alloc = SWIG_NEWOBJ;
#else
    PyString_AsStringAndSize(obj, &cstr, &len);
#endif
    if (cptr) {
      if (alloc) {
	/* 
	   In python the user should not be able to modify the inner
	   string representation. To warranty that, if you define
	   SWIG_PYTHON_SAFE_CSTRINGS, a new/copy of the python string
	   buffer is always returned.

	   The default behavior is just to return the pointer value,
	   so, be careful.
	*/ 
#if defined(SWIG_PYTHON_SAFE_CSTRINGS)
	if (*alloc != SWIG_OLDOBJ) 
#else
	if (*alloc == SWIG_NEWOBJ) 
#endif
	  {
	    *cptr = reinterpret_cast< char* >(memcpy((new char[len + 1]), cstr, sizeof(char)*(len + 1)));
	    *alloc = SWIG_NEWOBJ;
	  }
	else {
	  *cptr = cstr;
	  *alloc = SWIG_OLDOBJ;
	}
      } else {
        #if PY_VERSION_HEX>=0x03000000
        assert(0); /* Should never reach here in Python 3 */
        #endif
	*cptr = SWIG_Python_str_AsChar(obj);
      }
    }
    if (psize) *psize = len + 1;
#if PY_VERSION_HEX>=0x03000000
    Py_XDECREF(obj);
#endif
    return SWIG_OK;
  } else {
    swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
    if (pchar_descriptor) {
      void* vptr = 0;
      if (SWIG_ConvertPtr(obj, &vptr, pchar_descriptor, 0) == SWIG_OK) {
	if (cptr) *cptr = (char *) vptr;
	if (psize) *psize = vptr ? (strlen((char *)vptr) + 1) : 0;
	if (alloc) *alloc = SWIG_OLDOBJ;
	return SWIG_OK;
      }
    }
  }
  return SWIG_TypeError;
}





SWIGINTERNINLINE PyObject *
SWIG_FromCharPtrAndSize(const char* carray, size_t size)
{
  if (carray) {
    if (size > INT_MAX) {
      swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
      return pchar_descriptor ? 
	SWIG_InternalNewPointerObj(const_cast< char * >(carray), pchar_descriptor, 0) : SWIG_Py_Void();
    } else {
#if PY_VERSION_HEX >= 0x03000000
#if PY_VERSION_HEX >= 0x03010000
      return PyUnicode_DecodeUTF8(carray, static_cast< int >(size), "surrogateescape");
#else
      return PyUnicode_FromStringAndSize(carray, static_cast< int >(size));
#endif
#else
      return PyString_FromStringAndSize(carray, static_cast< int >(size));
#endif
    }
  } else {
    return SWIG_Py_Void();
  }
}


SWIGINTERNINLINE PyObject * 
SWIG_FromCharPtr(const char *cptr)
{ 
  return SWIG_FromCharPtrAndSize(cptr, (cptr ? strlen(cptr) : 0));
}


#if NPY_API_VERSION < 0x00000007
#define NPY_ARRAY_DEFAULT NPY_DEFAULT
#define NPY_ARRAY_FARRAY  NPY_FARRAY
#define NPY_FORTRANORDER  NPY_FORTRAN
#endif


/* Macros to extract array attributes.
 */
#if NPY_API_VERSION < 0x00000007
#define is_array(a)            ((a) && PyArray_Check((PyArrayObject*)a))
#define array_type(a)          (int)(PyArray_TYPE((PyArrayObject*)a))
#define array_numdims(a)       (((PyArrayObject*)a)->nd)
#define array_dimensions(a)    (((PyArrayObject*)a)->dimensions)
#define array_size(a,i)        (((PyArrayObject*)a)->dimensions[i])
#define array_strides(a)       (((PyArrayObject*)a)->strides)
#define array_stride(a,i)      (((PyArrayObject*)a)->strides[i])
#define array_data(a)          (((PyArrayObject*)a)->data)
#define array_descr(a)         (((PyArrayObject*)a)->descr)
#define array_flags(a)         (((PyArrayObject*)a)->flags)
#define array_enableflags(a,f) (((PyArrayObject*)a)->flags) = f
#else
#define is_array(a)            ((a) && PyArray_Check(a))
#define array_type(a)          PyArray_TYPE((PyArrayObject*)a)
#define array_numdims(a)       PyArray_NDIM((PyArrayObject*)a)
#define array_dimensions(a)    PyArray_DIMS((PyArrayObject*)a)
#define array_strides(a)       PyArray_STRIDES((PyArrayObject*)a)
#define array_stride(a,i)      PyArray_STRIDE((PyArrayObject*)a,i)
#define array_size(a,i)        PyArray_DIM((PyArrayObject*)a,i)
#define array_data(a)          PyArray_DATA((PyArrayObject*)a)
#define array_descr(a)         PyArray_DESCR((PyArrayObject*)a)
#define array_flags(a)         PyArray_FLAGS((PyArrayObject*)a)
#define array_enableflags(a,f) PyArray_ENABLEFLAGS((PyArrayObject*)a,f)
#endif
#define array_is_contiguous(a) (PyArray_ISCONTIGUOUS((PyArrayObject*)a))
#define array_is_native(a)     (PyArray_ISNOTSWAPPED((PyArrayObject*)a))
#define array_is_fortran(a)    (PyArray_ISFORTRAN((PyArrayObject*)a))


  /* Given a PyObject, return a string describing its type.
   */
  const char* pytype_string(PyObject* py_obj)
  {
    if (py_obj == NULL          ) return "C NULL value";
    if (py_obj == Py_None       ) return "Python None" ;
    if (PyCallable_Check(py_obj)) return "callable"    ;
    if (PyString_Check(  py_obj)) return "string"      ;
    if (PyInt_Check(     py_obj)) return "int"         ;
    if (PyFloat_Check(   py_obj)) return "float"       ;
    if (PyDict_Check(    py_obj)) return "dict"        ;
    if (PyList_Check(    py_obj)) return "list"        ;
    if (PyTuple_Check(   py_obj)) return "tuple"       ;
#if PY_MAJOR_VERSION < 3
    if (PyFile_Check(    py_obj)) return "file"        ;
    if (PyModule_Check(  py_obj)) return "module"      ;
    if (PyInstance_Check(py_obj)) return "instance"    ;
#endif

    return "unkown type";
  }

  /* Given a NumPy typecode, return a string describing the type.
   */
  const char* typecode_string(int typecode)
  {
    static const char* type_names[25] = {"bool",
                                         "byte",
                                         "unsigned byte",
                                         "short",
                                         "unsigned short",
                                         "int",
                                         "unsigned int",
                                         "long",
                                         "unsigned long",
                                         "long long",
                                         "unsigned long long",
                                         "float",
                                         "double",
                                         "long double",
                                         "complex float",
                                         "complex double",
                                         "complex long double",
                                         "object",
                                         "string",
                                         "unicode",
                                         "void",
                                         "ntypes",
                                         "notype",
                                         "char",
                                         "unknown"};
    return typecode < 24 ? type_names[typecode] : type_names[24];
  }

  /* Make sure input has correct numpy type.  This now just calls
     PyArray_EquivTypenums().
   */
  int type_match(int actual_type,
                 int desired_type)
  {
    return PyArray_EquivTypenums(actual_type, desired_type);
  }

#ifdef SWIGPY_USE_CAPSULE
  void free_cap(PyObject * cap)
  {
    void* array = (void*) PyCapsule_GetPointer(cap,SWIGPY_CAPSULE_NAME);
    if (array != NULL) free(array);
  }
#endif




  /* Given a PyObject pointer, cast it to a PyArrayObject pointer if
   * legal.  If not, set the python error string appropriately and
   * return NULL.
   */
  PyArrayObject* obj_to_array_no_conversion(PyObject* input,
                                            int        typecode)
  {
    PyArrayObject* ary = NULL;
    if (is_array(input) && (typecode == NPY_NOTYPE ||
                            PyArray_EquivTypenums(array_type(input), typecode)))
    {
      ary = (PyArrayObject*) input;
    }
    else if is_array(input)
    {
      const char* desired_type = typecode_string(typecode);
      const char* actual_type  = typecode_string(array_type(input));
      PyErr_Format(PyExc_TypeError,
                   "Array of type '%s' required.  Array of type '%s' given",
                   desired_type, actual_type);
      ary = NULL;
    }
    else
    {
      const char* desired_type = typecode_string(typecode);
      const char* actual_type  = pytype_string(input);
      PyErr_Format(PyExc_TypeError,
                   "Array of type '%s' required.  A '%s' was given",
                   desired_type,
                   actual_type);
      ary = NULL;
    }
    return ary;
  }

  /* Convert the given PyObject to a NumPy array with the given
   * typecode.  On success, return a valid PyArrayObject* with the
   * correct type.  On failure, the python error string will be set and
   * the routine returns NULL.
   */
  PyArrayObject* obj_to_array_allow_conversion(PyObject* input,
                                               int       typecode,
                                               int*      is_new_object)
  {
    PyArrayObject* ary = NULL;
    PyObject*      py_obj;
    if (is_array(input) && (typecode == NPY_NOTYPE ||
                            PyArray_EquivTypenums(array_type(input),typecode)))
    {
      ary = (PyArrayObject*) input;
      *is_new_object = 0;
    }
    else
    {
      py_obj = PyArray_FROMANY(input, typecode, 0, 0, NPY_ARRAY_DEFAULT);
      /* If NULL, PyArray_FromObject will have set python error value.*/
      ary = (PyArrayObject*) py_obj;
      *is_new_object = 1;
    }
    return ary;
  }

  /* Given a PyArrayObject, check to see if it is contiguous.  If so,
   * return the input pointer and flag it as not a new object.  If it is
   * not contiguous, create a new PyArrayObject using the original data,
   * flag it as a new object and return the pointer.
   */
  PyArrayObject* make_contiguous(PyArrayObject* ary,
                                 int*           is_new_object,
                                 int            min_dims,
                                 int            max_dims)
  {
    PyArrayObject* result;
    if (array_is_contiguous(ary))
    {
      result = ary;
      *is_new_object = 0;
    }
    else
    {
      result = (PyArrayObject*) PyArray_ContiguousFromObject((PyObject*)ary,
                                                              array_type(ary),
                                                              min_dims,
                                                              max_dims);
      *is_new_object = 1;
    }
    return result;
  }

  /* Given a PyArrayObject, check to see if it is Fortran-contiguous.
   * If so, return the input pointer, but do not flag it as not a new
   * object.  If it is not Fortran-contiguous, create a new
   * PyArrayObject using the original data, flag it as a new object
   * and return the pointer.
   */
  PyArrayObject* make_fortran(PyArrayObject* ary,
                              int*           is_new_object)
  {
    PyArrayObject* result;
    if (array_is_fortran(ary))
    {
      result = ary;
      *is_new_object = 0;
    }
    else
    {
      Py_INCREF(array_descr(ary));
      result = (PyArrayObject*) PyArray_FromArray(ary,
                                                  array_descr(ary),
                                                  NPY_FORTRANORDER);
      *is_new_object = 1;
    }
    return result;
  }

  /* Convert a given PyObject to a contiguous PyArrayObject of the
   * specified type.  If the input object is not a contiguous
   * PyArrayObject, a new one will be created and the new object flag
   * will be set.
   */
  PyArrayObject* obj_to_array_contiguous_allow_conversion(PyObject* input,
                                                          int       typecode,
                                                          int*      is_new_object)
  {
    int is_new1 = 0;
    int is_new2 = 0;
    PyArrayObject* ary2;
    PyArrayObject* ary1 = obj_to_array_allow_conversion(input,
                                                        typecode,
                                                        &is_new1);
    if (ary1)
    {
      ary2 = make_contiguous(ary1, &is_new2, 0, 0);
      if ( is_new1 && is_new2)
      {
        Py_DECREF(ary1);
      }
      ary1 = ary2;
    }
    *is_new_object = is_new1 || is_new2;
    return ary1;
  }

  /* Convert a given PyObject to a Fortran-ordered PyArrayObject of the
   * specified type.  If the input object is not a Fortran-ordered
   * PyArrayObject, a new one will be created and the new object flag
   * will be set.
   */
  PyArrayObject* obj_to_array_fortran_allow_conversion(PyObject* input,
                                                       int       typecode,
                                                       int*      is_new_object)
  {
    int is_new1 = 0;
    int is_new2 = 0;
    PyArrayObject* ary2;
    PyArrayObject* ary1 = obj_to_array_allow_conversion(input,
                                                        typecode,
                                                        &is_new1);
    if (ary1)
    {
      ary2 = make_fortran(ary1, &is_new2);
      if (is_new1 && is_new2)
      {
        Py_DECREF(ary1);
      }
      ary1 = ary2;
    }
    *is_new_object = is_new1 || is_new2;
    return ary1;
  }


  /* Test whether a python object is contiguous.  If array is
   * contiguous, return 1.  Otherwise, set the python error string and
   * return 0.
   */
  int require_contiguous(PyArrayObject* ary)
  {
    int contiguous = 1;
    if (!array_is_contiguous(ary))
    {
      PyErr_SetString(PyExc_TypeError,
                      "Array must be contiguous.  A non-contiguous array was given");
      contiguous = 0;
    }
    return contiguous;
  }

  /* Require that a numpy array is not byte-swapped.  If the array is
   * not byte-swapped, return 1.  Otherwise, set the python error string
   * and return 0.
   */
  int require_native(PyArrayObject* ary)
  {
    int native = 1;
    if (!array_is_native(ary))
    {
      PyErr_SetString(PyExc_TypeError,
                      "Array must have native byteorder.  "
                      "A byte-swapped array was given");
      native = 0;
    }
    return native;
  }

  /* Require the given PyArrayObject to have a specified number of
   * dimensions.  If the array has the specified number of dimensions,
   * return 1.  Otherwise, set the python error string and return 0.
   */
  int require_dimensions(PyArrayObject* ary,
                         int            exact_dimensions)
  {
    int success = 1;
    if (array_numdims(ary) != exact_dimensions)
    {
      PyErr_Format(PyExc_TypeError,
                   "Array must have %d dimensions.  Given array has %d dimensions",
                   exact_dimensions,
                   array_numdims(ary));
      success = 0;
    }
    return success;
  }

  /* Require the given PyArrayObject to have one of a list of specified
   * number of dimensions.  If the array has one of the specified number
   * of dimensions, return 1.  Otherwise, set the python error string
   * and return 0.
   */
  int require_dimensions_n(PyArrayObject* ary,
                           int*           exact_dimensions,
                           int            n)
  {
    int success = 0;
    int i;
    char dims_str[255] = "";
    char s[255];
    for (i = 0; i < n && !success; i++)
    {
      if (array_numdims(ary) == exact_dimensions[i])
      {
        success = 1;
      }
    }
    if (!success)
    {
      for (i = 0; i < n-1; i++)
      {
        sprintf(s, "%d, ", exact_dimensions[i]);
        strcat(dims_str,s);
      }
      sprintf(s, " or %d", exact_dimensions[n-1]);
      strcat(dims_str,s);
      PyErr_Format(PyExc_TypeError,
                   "Array must have %s dimensions.  Given array has %d dimensions",
                   dims_str,
                   array_numdims(ary));
    }
    return success;
  }

  /* Require the given PyArrayObject to have a specified shape.  If the
   * array has the specified shape, return 1.  Otherwise, set the python
   * error string and return 0.
   */
  int require_size(PyArrayObject* ary,
                   npy_intp*      size,
                   int            n)
  {
    int i;
    int success = 1;
    int len;
    char desired_dims[255] = "[";
    char s[255];
    char actual_dims[255] = "[";
    for(i=0; i < n;i++)
    {
      if (size[i] != -1 &&  size[i] != array_size(ary,i))
      {
        success = 0;
      }
    }
    if (!success)
    {
      for (i = 0; i < n; i++)
      {
        if (size[i] == -1)
        {
          sprintf(s, "*,");
        }
        else
        {
          sprintf(s, "%ld,", (long int)size[i]);
        }
        strcat(desired_dims,s);
      }
      len = strlen(desired_dims);
      desired_dims[len-1] = ']';
      for (i = 0; i < n; i++)
      {
        sprintf(s, "%ld,", (long int)array_size(ary,i));
        strcat(actual_dims,s);
      }
      len = strlen(actual_dims);
      actual_dims[len-1] = ']';
      PyErr_Format(PyExc_TypeError,
                   "Array must have shape of %s.  Given array has shape of %s",
                   desired_dims,
                   actual_dims);
    }
    return success;
  }

  /* Require the given PyArrayObject to to be Fortran ordered.  If the
   * the PyArrayObject is already Fortran ordered, do nothing.  Else,
   * set the Fortran ordering flag and recompute the strides.
   */
  int require_fortran(PyArrayObject* ary)
  {
    int success = 1;
    int nd = array_numdims(ary);
    int i;
    npy_intp * strides = array_strides(ary);
    if (array_is_fortran(ary)) return success;
    /* Set the Fortran ordered flag */
    array_enableflags(ary,NPY_ARRAY_FARRAY);
    /* Recompute the strides */
    strides[0] = strides[nd-1];
    for (i=1; i < nd; ++i)
      strides[i] = strides[i-1] * array_size(ary,i-1);
    return success;
  }




SWIGINTERN int
SWIG_AsVal_bool (PyObject *obj, bool *val)
{
  int r;
  if (!PyBool_Check(obj))
    return SWIG_ERROR;
  r = PyObject_IsTrue(obj);
  if (r == -1)
    return SWIG_ERROR;
  if (val) *val = r ? true : false;
  return SWIG_OK;
}


SWIGINTERN int
SWIG_AsCharArray(PyObject * obj, char *val, size_t size)
{ 
  char* cptr = 0; size_t csize = 0; int alloc = SWIG_OLDOBJ;
  int res = SWIG_AsCharPtrAndSize(obj, &cptr, &csize, &alloc);
  if (SWIG_IsOK(res)) {
    /* special case of single char conversion when we don't need space for NUL */
    if (size == 1 && csize == 2 && cptr && !cptr[1]) --csize;
    if (csize <= size) {
      if (val) {
	if (csize) memcpy(val, cptr, csize*sizeof(char));
	if (csize < size) memset(val + csize, 0, (size - csize)*sizeof(char));
      }
      if (alloc == SWIG_NEWOBJ) {
	delete[] cptr;
	res = SWIG_DelNewMask(res);
      }      
      return res;
    }
    if (alloc == SWIG_NEWOBJ) delete[] cptr;
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsVal_char (PyObject * obj, char *val)
{    
  int res = SWIG_AsCharArray(obj, val, 1);
  if (!SWIG_IsOK(res)) {
    long v;
    res = SWIG_AddCast(SWIG_AsVal_long (obj, &v));
    if (SWIG_IsOK(res)) {
      if ((CHAR_MIN <= v) && (v <= CHAR_MAX)) {
	if (val) *val = static_cast< char >(v);
      } else {
	res = SWIG_OverflowError;
      }
    }
  }
  return res;
}


SWIGINTERNINLINE PyObject *
SWIG_From_char  (char c) 
{ 
  return SWIG_FromCharPtrAndSize(&c,1);
}


SWIGINTERNINLINE PyObject *
SWIG_From_float  (float value)
{    
  return SWIG_From_double  (value);
}


/* Getting isfinite working pre C99 across multiple platforms is non-trivial. Users can provide SWIG_isfinite on older platforms. */
#ifndef SWIG_isfinite
# if defined(isfinite)
#  define SWIG_isfinite(X) (isfinite(X))
# elif defined(_MSC_VER)
#  define SWIG_isfinite(X) (_finite(X))
# elif defined(__sun) && defined(__SVR4)
#  include <ieeefp.h>
#  define SWIG_isfinite(X) (finite(X))
# endif
#endif


/* Accept infinite as a valid float value unless we are unable to check if a value is finite */
#ifdef SWIG_isfinite
# define SWIG_Float_Overflow_Check(X) ((X < -FLT_MAX || X > FLT_MAX) && SWIG_isfinite(X))
#else
# define SWIG_Float_Overflow_Check(X) ((X < -FLT_MAX || X > FLT_MAX))
#endif


SWIGINTERN int
SWIG_AsVal_float (PyObject * obj, float *val)
{
  double v;
  int res = SWIG_AsVal_double (obj, &v);
  if (SWIG_IsOK(res)) {
    if (SWIG_Float_Overflow_Check(v)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< float >(v);
    }
  }  
  return res;
}

#ifdef __cplusplus
extern "C" {
#endif
SWIGINTERN PyObject *_wrap_castUniverseToLattice(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Universe *arg1 = (Universe *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char *  kwnames[] = {
    (char *) "universe", NULL 
  };
  Lattice *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:castUniverseToLattice",kwnames,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Universe, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "castUniverseToLattice" "', argument " "1"" of type '" "Universe *""'"); 
  }
  arg1 = reinterpret_cast< Universe * >(argp1);
  {
    try {
      result = (Lattice *)castUniverseToLattice(arg1);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Lattice, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_castLatticeToUniverse(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Lattice *arg1 = (Lattice *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char *  kwnames[] = {
    (char *) "lattice", NULL 
  };
  Universe *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:castLatticeToUniverse",kwnames,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Lattice, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "castLatticeToUniverse" "', argument " "1"" of type '" "Lattice *""'"); 
  }
  arg1 = reinterpret_cast< Lattice * >(argp1);
  {
    try {
      result = (Universe *)castLatticeToUniverse(arg1);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Universe, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_castSurfaceToPlane(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Surface *arg1 = (Surface *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char *  kwnames[] = {
    (char *) "plane", NULL 
  };
  Plane *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:castSurfaceToPlane",kwnames,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Surface, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "castSurfaceToPlane" "', argument " "1"" of type '" "Surface *""'"); 
  }
  arg1 = reinterpret_cast< Surface * >(argp1);
  {
    try {
      result = (Plane *)castSurfaceToPlane(arg1);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Plane, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_castSurfaceToXPlane(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Surface *arg1 = (Surface *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char *  kwnames[] = {
    (char *) "xplane", NULL 
  };
  XPlane *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:castSurfaceToXPlane",kwnames,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Surface, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "castSurfaceToXPlane" "', argument " "1"" of type '" "Surface *""'"); 
  }
  arg1 = reinterpret_cast< Surface * >(argp1);
  {
    try {
      result = (XPlane *)castSurfaceToXPlane(arg1);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XPlane, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_castSurfaceToYPlane(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Surface *arg1 = (Surface *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char *  kwnames[] = {
    (char *) "yplane", NULL 
  };
  YPlane *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:castSurfaceToYPlane",kwnames,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Surface, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "castSurfaceToYPlane" "', argument " "1"" of type '" "Surface *""'"); 
  }
  arg1 = reinterpret_cast< Surface * >(argp1);
  {
    try {
      result = (YPlane *)castSurfaceToYPlane(arg1);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_YPlane, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_castSurfaceToZPlane(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Surface *arg1 = (Surface *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char *  kwnames[] = {
    (char *) "zplane", NULL 
  };
  ZPlane *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:castSurfaceToZPlane",kwnames,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Surface, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "castSurfaceToZPlane" "', argument " "1"" of type '" "Surface *""'"); 
  }
  arg1 = reinterpret_cast< Surface * >(argp1);
  {
    try {
      result = (ZPlane *)castSurfaceToZPlane(arg1);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ZPlane, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_castSurfaceToZCylinder(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Surface *arg1 = (Surface *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char *  kwnames[] = {
    (char *) "zcylinder", NULL 
  };
  ZCylinder *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:castSurfaceToZCylinder",kwnames,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Surface, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "castSurfaceToZCylinder" "', argument " "1"" of type '" "Surface *""'"); 
  }
  arg1 = reinterpret_cast< Surface * >(argp1);
  {
    try {
      result = (ZCylinder *)castSurfaceToZCylinder(arg1);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ZCylinder, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SwigPyIterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_SwigPyIterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SwigPyIterator" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_value(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator_value",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_value" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  {
    try {
      try {
        result = (PyObject *)((swig::SwigPyIterator const *)arg1)->value();
      }
      catch(swig::stop_iteration &_e) {
        {
          (void)_e;
          SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
          SWIG_fail;
        }
      }
      
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_incr(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  size_t arg2 = (size_t) 1 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "n", NULL 
  };
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|O:SwigPyIterator_incr",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_incr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_size_t(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator_incr" "', argument " "2"" of type '" "size_t""'");
    } 
    arg2 = static_cast< size_t >(val2);
  }
  {
    try {
      try {
        result = (swig::SwigPyIterator *)(arg1)->incr(arg2);
      }
      catch(swig::stop_iteration &_e) {
        {
          (void)_e;
          SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
          SWIG_fail;
        }
      }
      
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_decr(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  size_t arg2 = (size_t) 1 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "n", NULL 
  };
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|O:SwigPyIterator_decr",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_decr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_size_t(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator_decr" "', argument " "2"" of type '" "size_t""'");
    } 
    arg2 = static_cast< size_t >(val2);
  }
  {
    try {
      try {
        result = (swig::SwigPyIterator *)(arg1)->decr(arg2);
      }
      catch(swig::stop_iteration &_e) {
        {
          (void)_e;
          SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
          SWIG_fail;
        }
      }
      
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_distance(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "x", NULL 
  };
  ptrdiff_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:SwigPyIterator_distance",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_distance" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator_distance" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator_distance" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  {
    try {
      try {
        result = ((swig::SwigPyIterator const *)arg1)->distance((swig::SwigPyIterator const &)*arg2);
      }
      catch(std::invalid_argument &_e) {
        SWIG_Python_Raise(SWIG_NewPointerObj((new std::invalid_argument(static_cast< const std::invalid_argument& >(_e))),SWIGTYPE_p_std__invalid_argument,SWIG_POINTER_OWN), "std::invalid_argument", SWIGTYPE_p_std__invalid_argument); SWIG_fail;
      }
      
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_ptrdiff_t(static_cast< ptrdiff_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_equal(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "x", NULL 
  };
  bool result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:SwigPyIterator_equal",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_equal" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator_equal" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator_equal" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  {
    try {
      try {
        result = (bool)((swig::SwigPyIterator const *)arg1)->equal((swig::SwigPyIterator const &)*arg2);
      }
      catch(std::invalid_argument &_e) {
        SWIG_Python_Raise(SWIG_NewPointerObj((new std::invalid_argument(static_cast< const std::invalid_argument& >(_e))),SWIGTYPE_p_std__invalid_argument,SWIG_POINTER_OWN), "std::invalid_argument", SWIGTYPE_p_std__invalid_argument); SWIG_fail;
      }
      
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_copy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator_copy",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_copy" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  {
    try {
      result = (swig::SwigPyIterator *)((swig::SwigPyIterator const *)arg1)->copy();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_next(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator_next",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_next" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  {
    try {
      try {
        result = (PyObject *)(arg1)->next();
      }
      catch(swig::stop_iteration &_e) {
        {
          (void)_e;
          SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
          SWIG_fail;
        }
      }
      
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___next__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator___next__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___next__" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  {
    try {
      try {
        result = (PyObject *)(arg1)->__next__();
      }
      catch(swig::stop_iteration &_e) {
        {
          (void)_e;
          SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
          SWIG_fail;
        }
      }
      
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_previous(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator_previous",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_previous" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  {
    try {
      try {
        result = (PyObject *)(arg1)->previous();
      }
      catch(swig::stop_iteration &_e) {
        {
          (void)_e;
          SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
          SWIG_fail;
        }
      }
      
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_advance(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "n", NULL 
  };
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:SwigPyIterator_advance",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_advance" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator_advance" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  {
    try {
      try {
        result = (swig::SwigPyIterator *)(arg1)->advance(arg2);
      }
      catch(swig::stop_iteration &_e) {
        {
          (void)_e;
          SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
          SWIG_fail;
        }
      }
      
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "x", NULL 
  };
  bool result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:SwigPyIterator___eq__",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___eq__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator___eq__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator___eq__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  {
    try {
      result = (bool)((swig::SwigPyIterator const *)arg1)->operator ==((swig::SwigPyIterator const &)*arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "x", NULL 
  };
  bool result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:SwigPyIterator___ne__",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___ne__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator___ne__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator___ne__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  {
    try {
      result = (bool)((swig::SwigPyIterator const *)arg1)->operator !=((swig::SwigPyIterator const &)*arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___iadd__(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "n", NULL 
  };
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:SwigPyIterator___iadd__",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___iadd__" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___iadd__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  {
    try {
      try {
        result = (swig::SwigPyIterator *) &(arg1)->operator +=(arg2);
      }
      catch(swig::stop_iteration &_e) {
        {
          (void)_e;
          SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
          SWIG_fail;
        }
      }
      
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___isub__(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "n", NULL 
  };
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:SwigPyIterator___isub__",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___isub__" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___isub__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  {
    try {
      try {
        result = (swig::SwigPyIterator *) &(arg1)->operator -=(arg2);
      }
      catch(swig::stop_iteration &_e) {
        {
          (void)_e;
          SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
          SWIG_fail;
        }
      }
      
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___add__(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "n", NULL 
  };
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:SwigPyIterator___add__",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___add__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___add__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  {
    try {
      try {
        result = (swig::SwigPyIterator *)((swig::SwigPyIterator const *)arg1)->operator +(arg2);
      }
      catch(swig::stop_iteration &_e) {
        {
          (void)_e;
          SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
          SWIG_fail;
        }
      }
      
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___sub____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___sub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___sub__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___sub__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  {
    try {
      try {
        result = (swig::SwigPyIterator *)((swig::SwigPyIterator const *)arg1)->operator -(arg2);
      }
      catch(swig::stop_iteration &_e) {
        {
          (void)_e;
          SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
          SWIG_fail;
        }
      }
      
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___sub____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ptrdiff_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___sub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___sub__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator___sub__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator___sub__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  {
    try {
      result = ((swig::SwigPyIterator const *)arg1)->operator -((swig::SwigPyIterator const &)*arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_ptrdiff_t(static_cast< ptrdiff_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___sub__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3] = {
    0
  };
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_swig__SwigPyIterator, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SwigPyIterator___sub____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SwigPyIterator___sub____SWIG_0(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *SwigPyIterator_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_swig__SwigPyIterator, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_DoubleVector_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:DoubleVector_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_iterator" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    try {
      result = (swig::SwigPyIterator *)std_vector_Sl_double_Sg__iterator(arg1,arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DoubleVector___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector___nonzero__" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    try {
      result = (bool)std_vector_Sl_double_Sg____nonzero__((std::vector< double > const *)arg1);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DoubleVector___bool__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector___bool__" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    try {
      result = (bool)std_vector_Sl_double_Sg____bool__((std::vector< double > const *)arg1);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< double >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DoubleVector___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector___len__" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    try {
      result = std_vector_Sl_double_Sg____len__((std::vector< double > const *)arg1);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< double >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DoubleVector_pop",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_pop" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    try {
      try {
        result = (std::vector< double >::value_type)std_vector_Sl_double_Sg__pop(arg1);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::difference_type arg2 ;
  std::vector< double >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i",(char *) "j", NULL 
  };
  std::vector< double,std::allocator< double > > *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:DoubleVector___getslice__",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector___getslice__" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DoubleVector___getslice__" "', argument " "2"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< double >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DoubleVector___getslice__" "', argument " "3"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< double >::difference_type >(val3);
  {
    try {
      try {
        result = (std::vector< double,std::allocator< double > > *)std_vector_Sl_double_Sg____getslice__(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector___setslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::difference_type arg2 ;
  std::vector< double >::difference_type arg3 ;
  std::vector< double,std::allocator< double > > const &arg4_defvalue = std::vector< double,std::allocator< double > >() ;
  std::vector< double,std::allocator< double > > *arg4 = (std::vector< double,std::allocator< double > > *) &arg4_defvalue ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i",(char *) "j",(char *) "v", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO|O:DoubleVector___setslice__",kwnames,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector___setslice__" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DoubleVector___setslice__" "', argument " "2"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< double >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DoubleVector___setslice__" "', argument " "3"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< double >::difference_type >(val3);
  if (obj3) {
    {
      std::vector<double,std::allocator< double > > *ptr = (std::vector<double,std::allocator< double > > *)0;
      res4 = swig::asptr(obj3, &ptr);
      if (!SWIG_IsOK(res4)) {
        SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "DoubleVector___setslice__" "', argument " "4"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
      }
      if (!ptr) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DoubleVector___setslice__" "', argument " "4"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
      }
      arg4 = ptr;
    }
  }
  {
    try {
      try {
        std_vector_Sl_double_Sg____setslice__(arg1,arg2,arg3,(std::vector< double,std::allocator< double > > const &)*arg4);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::difference_type arg2 ;
  std::vector< double >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i",(char *) "j", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:DoubleVector___delslice__",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector___delslice__" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DoubleVector___delslice__" "', argument " "2"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< double >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DoubleVector___delslice__" "', argument " "3"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< double >::difference_type >(val3);
  {
    try {
      try {
        std_vector_Sl_double_Sg____delslice__(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector___delitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DoubleVector___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector___delitem__" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DoubleVector___delitem__" "', argument " "2"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< double >::difference_type >(val2);
  {
    try {
      try {
        std_vector_Sl_double_Sg____delitem____SWIG_0(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< double,std::allocator< double > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DoubleVector___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector___getitem__" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "DoubleVector___getitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    try {
      try {
        result = (std::vector< double,std::allocator< double > > *)std_vector_Sl_double_Sg____getitem____SWIG_0(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< double,std::allocator< double > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DoubleVector___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector___setitem__" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "DoubleVector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    std::vector<double,std::allocator< double > > *ptr = (std::vector<double,std::allocator< double > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DoubleVector___setitem__" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DoubleVector___setitem__" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      try {
        std_vector_Sl_double_Sg____setitem____SWIG_0(arg1,arg2,(std::vector< double,std::allocator< double > > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DoubleVector___setitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector___setitem__" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "DoubleVector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    try {
      try {
        std_vector_Sl_double_Sg____setitem____SWIG_1(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector___delitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DoubleVector___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector___delitem__" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "DoubleVector___delitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    try {
      try {
        std_vector_Sl_double_Sg____delitem____SWIG_1(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector___delitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3] = {
    0
  };
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_DoubleVector___delitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_DoubleVector___delitem____SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'DoubleVector___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< double >::__delitem__(std::vector< double >::difference_type)\n"
    "    std::vector< double >::__delitem__(PySliceObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DoubleVector___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< double >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DoubleVector___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector___getitem__" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DoubleVector___getitem__" "', argument " "2"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< double >::difference_type >(val2);
  {
    try {
      try {
        result = (std::vector< double >::value_type *) &std_vector_Sl_double_Sg____getitem____SWIG_1((std::vector< double > const *)arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector___getitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3] = {
    0
  };
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_DoubleVector___getitem____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_DoubleVector___getitem____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'DoubleVector___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< double >::__getitem__(PySliceObject *)\n"
    "    std::vector< double >::__getitem__(std::vector< double >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DoubleVector___setitem____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::difference_type arg2 ;
  std::vector< double >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::vector< double >::value_type temp3 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DoubleVector___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector___setitem__" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DoubleVector___setitem__" "', argument " "2"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< double >::difference_type >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DoubleVector___setitem__" "', argument " "3"" of type '" "std::vector< double >::value_type""'");
  } 
  temp3 = static_cast< std::vector< double >::value_type >(val3);
  arg3 = &temp3;
  {
    try {
      try {
        std_vector_Sl_double_Sg____setitem____SWIG_2(arg1,arg2,(double const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector___setitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4] = {
    0
  };
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_DoubleVector___setitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<double,std::allocator< double > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_DoubleVector___setitem____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_DoubleVector___setitem____SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'DoubleVector___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< double >::__setitem__(PySliceObject *,std::vector< double,std::allocator< double > > const &)\n"
    "    std::vector< double >::__setitem__(PySliceObject *)\n"
    "    std::vector< double >::__setitem__(std::vector< double >::difference_type,std::vector< double >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DoubleVector_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< double >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "x", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:DoubleVector_append",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_append" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DoubleVector_append" "', argument " "2"" of type '" "std::vector< double >::value_type""'");
  } 
  temp2 = static_cast< std::vector< double >::value_type >(val2);
  arg2 = &temp2;
  {
    try {
      std_vector_Sl_double_Sg__append(arg1,(double const &)*arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DoubleVector__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_DoubleVector")) SWIG_fail;
  {
    try {
      result = (std::vector< double > *)new std::vector< double >();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DoubleVector__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::vector< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_DoubleVector",&obj0)) SWIG_fail;
  {
    std::vector<double,std::allocator< double > > *ptr = (std::vector<double,std::allocator< double > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DoubleVector" "', argument " "1"" of type '" "std::vector< double > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DoubleVector" "', argument " "1"" of type '" "std::vector< double > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (std::vector< double > *)new std::vector< double >((std::vector< double > const &)*arg1);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DoubleVector_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_empty" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    try {
      result = (bool)((std::vector< double > const *)arg1)->empty();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< double >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DoubleVector_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_size" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    try {
      result = ((std::vector< double > const *)arg1)->size();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DoubleVector_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_clear" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    try {
      (arg1)->clear();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "v", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:DoubleVector_swap",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_swap" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DoubleVector_swap" "', argument " "2"" of type '" "std::vector< double > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DoubleVector_swap" "', argument " "2"" of type '" "std::vector< double > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< double > * >(argp2);
  {
    try {
      (arg1)->swap(*arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< double > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DoubleVector_get_allocator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_get_allocator" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    try {
      result = ((std::vector< double > const *)arg1)->get_allocator();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new std::vector< double >::allocator_type(static_cast< const std::vector< double >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< double >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DoubleVector_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_begin" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    try {
      result = (arg1)->begin();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< double >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< double >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DoubleVector_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_end" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    try {
      result = (arg1)->end();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< double >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< double >::reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DoubleVector_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_rbegin" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    try {
      result = (arg1)->rbegin();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< double >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< double >::reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DoubleVector_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_rend" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    try {
      result = (arg1)->rend();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< double >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DoubleVector__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_DoubleVector",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_DoubleVector" "', argument " "1"" of type '" "std::vector< double >::size_type""'");
  } 
  arg1 = static_cast< std::vector< double >::size_type >(val1);
  {
    try {
      result = (std::vector< double > *)new std::vector< double >(arg1);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DoubleVector_pop_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_pop_back" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    try {
      (arg1)->pop_back();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DoubleVector_resize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_resize" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DoubleVector_resize" "', argument " "2"" of type '" "std::vector< double >::size_type""'");
  } 
  arg2 = static_cast< std::vector< double >::size_type >(val2);
  {
    try {
      (arg1)->resize(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< double >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DoubleVector_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_erase" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "DoubleVector_erase" "', argument " "2"" of type '" "std::vector< double >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< double >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< double >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "DoubleVector_erase" "', argument " "2"" of type '" "std::vector< double >::iterator""'");
    }
  }
  {
    try {
      result = std_vector_Sl_double_Sg__erase__SWIG_0(arg1,arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< double >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::iterator arg2 ;
  std::vector< double >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< double >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DoubleVector_erase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_erase" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "DoubleVector_erase" "', argument " "2"" of type '" "std::vector< double >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< double >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< double >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "DoubleVector_erase" "', argument " "2"" of type '" "std::vector< double >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "DoubleVector_erase" "', argument " "3"" of type '" "std::vector< double >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< double >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< double >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "DoubleVector_erase" "', argument " "3"" of type '" "std::vector< double >::iterator""'");
    }
  }
  {
    try {
      result = std_vector_Sl_double_Sg__erase__SWIG_1(arg1,arg2,arg3);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< double >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_erase(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4] = {
    0
  };
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< double >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_DoubleVector_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< double >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< double >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_DoubleVector_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'DoubleVector_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< double >::erase(std::vector< double >::iterator)\n"
    "    std::vector< double >::erase(std::vector< double >::iterator,std::vector< double >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_DoubleVector__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double >::size_type arg1 ;
  std::vector< double >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< double >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_DoubleVector",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_DoubleVector" "', argument " "1"" of type '" "std::vector< double >::size_type""'");
  } 
  arg1 = static_cast< std::vector< double >::size_type >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_DoubleVector" "', argument " "2"" of type '" "std::vector< double >::value_type""'");
  } 
  temp2 = static_cast< std::vector< double >::value_type >(val2);
  arg2 = &temp2;
  {
    try {
      result = (std::vector< double > *)new std::vector< double >(arg1,(std::vector< double >::value_type const &)*arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DoubleVector(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3] = {
    0
  };
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_DoubleVector__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_DoubleVector__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_DoubleVector__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_DoubleVector__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_DoubleVector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< double >::vector()\n"
    "    std::vector< double >::vector(std::vector< double > const &)\n"
    "    std::vector< double >::vector(std::vector< double >::size_type)\n"
    "    std::vector< double >::vector(std::vector< double >::size_type,std::vector< double >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DoubleVector_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< double >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "x", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:DoubleVector_push_back",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_push_back" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DoubleVector_push_back" "', argument " "2"" of type '" "std::vector< double >::value_type""'");
  } 
  temp2 = static_cast< std::vector< double >::value_type >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->push_back((std::vector< double >::value_type const &)*arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< double >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DoubleVector_front",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_front" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    try {
      result = (std::vector< double >::value_type *) &((std::vector< double > const *)arg1)->front();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< double >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DoubleVector_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_back" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    try {
      result = (std::vector< double >::value_type *) &((std::vector< double > const *)arg1)->back();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type arg2 ;
  std::vector< double >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  std::vector< double >::value_type temp3 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "n",(char *) "x", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:DoubleVector_assign",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_assign" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DoubleVector_assign" "', argument " "2"" of type '" "std::vector< double >::size_type""'");
  } 
  arg2 = static_cast< std::vector< double >::size_type >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DoubleVector_assign" "', argument " "3"" of type '" "std::vector< double >::value_type""'");
  } 
  temp3 = static_cast< std::vector< double >::value_type >(val3);
  arg3 = &temp3;
  {
    try {
      (arg1)->assign(arg2,(std::vector< double >::value_type const &)*arg3);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type arg2 ;
  std::vector< double >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  std::vector< double >::value_type temp3 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DoubleVector_resize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_resize" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DoubleVector_resize" "', argument " "2"" of type '" "std::vector< double >::size_type""'");
  } 
  arg2 = static_cast< std::vector< double >::size_type >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DoubleVector_resize" "', argument " "3"" of type '" "std::vector< double >::value_type""'");
  } 
  temp3 = static_cast< std::vector< double >::value_type >(val3);
  arg3 = &temp3;
  {
    try {
      (arg1)->resize(arg2,(std::vector< double >::value_type const &)*arg3);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_resize(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4] = {
    0
  };
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_DoubleVector_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_DoubleVector_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'DoubleVector_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< double >::resize(std::vector< double >::size_type)\n"
    "    std::vector< double >::resize(std::vector< double >::size_type,std::vector< double >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DoubleVector_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::iterator arg2 ;
  std::vector< double >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  std::vector< double >::value_type temp3 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< double >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DoubleVector_insert",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_insert" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "DoubleVector_insert" "', argument " "2"" of type '" "std::vector< double >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< double >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< double >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "DoubleVector_insert" "', argument " "2"" of type '" "std::vector< double >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DoubleVector_insert" "', argument " "3"" of type '" "std::vector< double >::value_type""'");
  } 
  temp3 = static_cast< std::vector< double >::value_type >(val3);
  arg3 = &temp3;
  {
    try {
      result = std_vector_Sl_double_Sg__insert__SWIG_0(arg1,arg2,(double const &)*arg3);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< double >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::iterator arg2 ;
  std::vector< double >::size_type arg3 ;
  std::vector< double >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  std::vector< double >::value_type temp4 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:DoubleVector_insert",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_insert" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "DoubleVector_insert" "', argument " "2"" of type '" "std::vector< double >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< double >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< double >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "DoubleVector_insert" "', argument " "2"" of type '" "std::vector< double >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DoubleVector_insert" "', argument " "3"" of type '" "std::vector< double >::size_type""'");
  } 
  arg3 = static_cast< std::vector< double >::size_type >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "DoubleVector_insert" "', argument " "4"" of type '" "std::vector< double >::value_type""'");
  } 
  temp4 = static_cast< std::vector< double >::value_type >(val4);
  arg4 = &temp4;
  {
    try {
      std_vector_Sl_double_Sg__insert__SWIG_1(arg1,arg2,arg3,(double const &)*arg4);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_insert(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5] = {
    0
  };
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< double >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_DoubleVector_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< double >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_DoubleVector_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'DoubleVector_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< double >::insert(std::vector< double >::iterator,std::vector< double >::value_type const &)\n"
    "    std::vector< double >::insert(std::vector< double >::iterator,std::vector< double >::size_type,std::vector< double >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DoubleVector_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "n", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:DoubleVector_reserve",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_reserve" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DoubleVector_reserve" "', argument " "2"" of type '" "std::vector< double >::size_type""'");
  } 
  arg2 = static_cast< std::vector< double >::size_type >(val2);
  {
    try {
      (arg1)->reserve(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< double >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DoubleVector_capacity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_capacity" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    try {
      result = ((std::vector< double > const *)arg1)->capacity();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_DoubleVector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_DoubleVector",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DoubleVector" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *DoubleVector_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_IntVector_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:IntVector_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector_iterator" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  {
    try {
      result = (swig::SwigPyIterator *)std_vector_Sl_int_Sg__iterator(arg1,arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IntVector___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector___nonzero__" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  {
    try {
      result = (bool)std_vector_Sl_int_Sg____nonzero__((std::vector< int > const *)arg1);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IntVector___bool__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector___bool__" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  {
    try {
      result = (bool)std_vector_Sl_int_Sg____bool__((std::vector< int > const *)arg1);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< int >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IntVector___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector___len__" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  {
    try {
      result = std_vector_Sl_int_Sg____len__((std::vector< int > const *)arg1);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< int >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IntVector_pop",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector_pop" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  {
    try {
      try {
        result = (std::vector< int >::value_type)std_vector_Sl_int_Sg__pop(arg1);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::difference_type arg2 ;
  std::vector< int >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i",(char *) "j", NULL 
  };
  std::vector< int,std::allocator< int > > *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:IntVector___getslice__",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector___getslice__" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntVector___getslice__" "', argument " "2"" of type '" "std::vector< int >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< int >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IntVector___getslice__" "', argument " "3"" of type '" "std::vector< int >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< int >::difference_type >(val3);
  {
    try {
      try {
        result = (std::vector< int,std::allocator< int > > *)std_vector_Sl_int_Sg____getslice__(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector___setslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::difference_type arg2 ;
  std::vector< int >::difference_type arg3 ;
  std::vector< int,std::allocator< int > > const &arg4_defvalue = std::vector< int,std::allocator< int > >() ;
  std::vector< int,std::allocator< int > > *arg4 = (std::vector< int,std::allocator< int > > *) &arg4_defvalue ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i",(char *) "j",(char *) "v", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO|O:IntVector___setslice__",kwnames,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector___setslice__" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntVector___setslice__" "', argument " "2"" of type '" "std::vector< int >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< int >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IntVector___setslice__" "', argument " "3"" of type '" "std::vector< int >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< int >::difference_type >(val3);
  if (obj3) {
    {
      std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
      res4 = swig::asptr(obj3, &ptr);
      if (!SWIG_IsOK(res4)) {
        SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "IntVector___setslice__" "', argument " "4"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
      }
      if (!ptr) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IntVector___setslice__" "', argument " "4"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
      }
      arg4 = ptr;
    }
  }
  {
    try {
      try {
        std_vector_Sl_int_Sg____setslice__(arg1,arg2,arg3,(std::vector< int,std::allocator< int > > const &)*arg4);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::difference_type arg2 ;
  std::vector< int >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i",(char *) "j", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:IntVector___delslice__",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector___delslice__" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntVector___delslice__" "', argument " "2"" of type '" "std::vector< int >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< int >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IntVector___delslice__" "', argument " "3"" of type '" "std::vector< int >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< int >::difference_type >(val3);
  {
    try {
      try {
        std_vector_Sl_int_Sg____delslice__(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector___delitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntVector___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector___delitem__" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntVector___delitem__" "', argument " "2"" of type '" "std::vector< int >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< int >::difference_type >(val2);
  {
    try {
      try {
        std_vector_Sl_int_Sg____delitem____SWIG_0(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< int,std::allocator< int > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntVector___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector___getitem__" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "IntVector___getitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    try {
      try {
        result = (std::vector< int,std::allocator< int > > *)std_vector_Sl_int_Sg____getitem____SWIG_0(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< int,std::allocator< int > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:IntVector___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector___setitem__" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "IntVector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IntVector___setitem__" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IntVector___setitem__" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      try {
        std_vector_Sl_int_Sg____setitem____SWIG_0(arg1,arg2,(std::vector< int,std::allocator< int > > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntVector___setitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector___setitem__" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "IntVector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    try {
      try {
        std_vector_Sl_int_Sg____setitem____SWIG_1(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector___delitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntVector___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector___delitem__" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "IntVector___delitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    try {
      try {
        std_vector_Sl_int_Sg____delitem____SWIG_1(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector___delitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3] = {
    0
  };
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_IntVector___delitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_IntVector___delitem____SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'IntVector___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< int >::__delitem__(std::vector< int >::difference_type)\n"
    "    std::vector< int >::__delitem__(PySliceObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_IntVector___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< int >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntVector___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector___getitem__" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntVector___getitem__" "', argument " "2"" of type '" "std::vector< int >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< int >::difference_type >(val2);
  {
    try {
      try {
        result = (std::vector< int >::value_type *) &std_vector_Sl_int_Sg____getitem____SWIG_1((std::vector< int > const *)arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector___getitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3] = {
    0
  };
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_IntVector___getitem____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_IntVector___getitem____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'IntVector___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< int >::__getitem__(PySliceObject *)\n"
    "    std::vector< int >::__getitem__(std::vector< int >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_IntVector___setitem____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::difference_type arg2 ;
  std::vector< int >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::vector< int >::value_type temp3 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:IntVector___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector___setitem__" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntVector___setitem__" "', argument " "2"" of type '" "std::vector< int >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< int >::difference_type >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IntVector___setitem__" "', argument " "3"" of type '" "std::vector< int >::value_type""'");
  } 
  temp3 = static_cast< std::vector< int >::value_type >(val3);
  arg3 = &temp3;
  {
    try {
      try {
        std_vector_Sl_int_Sg____setitem____SWIG_2(arg1,arg2,(int const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector___setitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4] = {
    0
  };
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_IntVector___setitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<int,std::allocator< int > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_IntVector___setitem____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_IntVector___setitem____SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'IntVector___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< int >::__setitem__(PySliceObject *,std::vector< int,std::allocator< int > > const &)\n"
    "    std::vector< int >::__setitem__(PySliceObject *)\n"
    "    std::vector< int >::__setitem__(std::vector< int >::difference_type,std::vector< int >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_IntVector_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< int >::value_type temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "x", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:IntVector_append",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector_append" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntVector_append" "', argument " "2"" of type '" "std::vector< int >::value_type""'");
  } 
  temp2 = static_cast< std::vector< int >::value_type >(val2);
  arg2 = &temp2;
  {
    try {
      std_vector_Sl_int_Sg__append(arg1,(int const &)*arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_IntVector__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_IntVector")) SWIG_fail;
  {
    try {
      result = (std::vector< int > *)new std::vector< int >();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_IntVector__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::vector< int > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_IntVector",&obj0)) SWIG_fail;
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_IntVector" "', argument " "1"" of type '" "std::vector< int > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_IntVector" "', argument " "1"" of type '" "std::vector< int > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (std::vector< int > *)new std::vector< int >((std::vector< int > const &)*arg1);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IntVector_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector_empty" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  {
    try {
      result = (bool)((std::vector< int > const *)arg1)->empty();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< int >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IntVector_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector_size" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  {
    try {
      result = ((std::vector< int > const *)arg1)->size();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IntVector_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector_clear" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  {
    try {
      (arg1)->clear();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "v", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:IntVector_swap",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector_swap" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IntVector_swap" "', argument " "2"" of type '" "std::vector< int > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IntVector_swap" "', argument " "2"" of type '" "std::vector< int > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< int > * >(argp2);
  {
    try {
      (arg1)->swap(*arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< int > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IntVector_get_allocator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector_get_allocator" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  {
    try {
      result = ((std::vector< int > const *)arg1)->get_allocator();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new std::vector< int >::allocator_type(static_cast< const std::vector< int >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_int_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< int >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IntVector_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector_begin" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  {
    try {
      result = (arg1)->begin();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< int >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< int >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IntVector_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector_end" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  {
    try {
      result = (arg1)->end();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< int >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< int >::reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IntVector_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector_rbegin" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  {
    try {
      result = (arg1)->rbegin();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< int >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< int >::reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IntVector_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector_rend" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  {
    try {
      result = (arg1)->rend();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< int >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_IntVector__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< int > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_IntVector",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_IntVector" "', argument " "1"" of type '" "std::vector< int >::size_type""'");
  } 
  arg1 = static_cast< std::vector< int >::size_type >(val1);
  {
    try {
      result = (std::vector< int > *)new std::vector< int >(arg1);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IntVector_pop_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector_pop_back" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  {
    try {
      (arg1)->pop_back();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntVector_resize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector_resize" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntVector_resize" "', argument " "2"" of type '" "std::vector< int >::size_type""'");
  } 
  arg2 = static_cast< std::vector< int >::size_type >(val2);
  {
    try {
      (arg1)->resize(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< int >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntVector_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector_erase" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "IntVector_erase" "', argument " "2"" of type '" "std::vector< int >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< int >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< int >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "IntVector_erase" "', argument " "2"" of type '" "std::vector< int >::iterator""'");
    }
  }
  {
    try {
      result = std_vector_Sl_int_Sg__erase__SWIG_0(arg1,arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< int >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::iterator arg2 ;
  std::vector< int >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< int >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:IntVector_erase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector_erase" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "IntVector_erase" "', argument " "2"" of type '" "std::vector< int >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< int >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< int >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "IntVector_erase" "', argument " "2"" of type '" "std::vector< int >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "IntVector_erase" "', argument " "3"" of type '" "std::vector< int >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< int >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< int >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "IntVector_erase" "', argument " "3"" of type '" "std::vector< int >::iterator""'");
    }
  }
  {
    try {
      result = std_vector_Sl_int_Sg__erase__SWIG_1(arg1,arg2,arg3);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< int >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector_erase(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4] = {
    0
  };
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< int >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_IntVector_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< int >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< int >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_IntVector_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'IntVector_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< int >::erase(std::vector< int >::iterator)\n"
    "    std::vector< int >::erase(std::vector< int >::iterator,std::vector< int >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_IntVector__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int >::size_type arg1 ;
  std::vector< int >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< int >::value_type temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< int > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_IntVector",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_IntVector" "', argument " "1"" of type '" "std::vector< int >::size_type""'");
  } 
  arg1 = static_cast< std::vector< int >::size_type >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_IntVector" "', argument " "2"" of type '" "std::vector< int >::value_type""'");
  } 
  temp2 = static_cast< std::vector< int >::value_type >(val2);
  arg2 = &temp2;
  {
    try {
      result = (std::vector< int > *)new std::vector< int >(arg1,(std::vector< int >::value_type const &)*arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_IntVector(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3] = {
    0
  };
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_IntVector__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_IntVector__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_IntVector__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_IntVector__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_IntVector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< int >::vector()\n"
    "    std::vector< int >::vector(std::vector< int > const &)\n"
    "    std::vector< int >::vector(std::vector< int >::size_type)\n"
    "    std::vector< int >::vector(std::vector< int >::size_type,std::vector< int >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_IntVector_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< int >::value_type temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "x", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:IntVector_push_back",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector_push_back" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntVector_push_back" "', argument " "2"" of type '" "std::vector< int >::value_type""'");
  } 
  temp2 = static_cast< std::vector< int >::value_type >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->push_back((std::vector< int >::value_type const &)*arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< int >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IntVector_front",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector_front" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  {
    try {
      result = (std::vector< int >::value_type *) &((std::vector< int > const *)arg1)->front();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< int >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IntVector_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector_back" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  {
    try {
      result = (std::vector< int >::value_type *) &((std::vector< int > const *)arg1)->back();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type arg2 ;
  std::vector< int >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  std::vector< int >::value_type temp3 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "n",(char *) "x", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:IntVector_assign",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector_assign" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntVector_assign" "', argument " "2"" of type '" "std::vector< int >::size_type""'");
  } 
  arg2 = static_cast< std::vector< int >::size_type >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IntVector_assign" "', argument " "3"" of type '" "std::vector< int >::value_type""'");
  } 
  temp3 = static_cast< std::vector< int >::value_type >(val3);
  arg3 = &temp3;
  {
    try {
      (arg1)->assign(arg2,(std::vector< int >::value_type const &)*arg3);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type arg2 ;
  std::vector< int >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  std::vector< int >::value_type temp3 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:IntVector_resize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector_resize" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntVector_resize" "', argument " "2"" of type '" "std::vector< int >::size_type""'");
  } 
  arg2 = static_cast< std::vector< int >::size_type >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IntVector_resize" "', argument " "3"" of type '" "std::vector< int >::value_type""'");
  } 
  temp3 = static_cast< std::vector< int >::value_type >(val3);
  arg3 = &temp3;
  {
    try {
      (arg1)->resize(arg2,(std::vector< int >::value_type const &)*arg3);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector_resize(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4] = {
    0
  };
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_IntVector_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_IntVector_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'IntVector_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< int >::resize(std::vector< int >::size_type)\n"
    "    std::vector< int >::resize(std::vector< int >::size_type,std::vector< int >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_IntVector_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::iterator arg2 ;
  std::vector< int >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  std::vector< int >::value_type temp3 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< int >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:IntVector_insert",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector_insert" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "IntVector_insert" "', argument " "2"" of type '" "std::vector< int >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< int >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< int >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "IntVector_insert" "', argument " "2"" of type '" "std::vector< int >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IntVector_insert" "', argument " "3"" of type '" "std::vector< int >::value_type""'");
  } 
  temp3 = static_cast< std::vector< int >::value_type >(val3);
  arg3 = &temp3;
  {
    try {
      result = std_vector_Sl_int_Sg__insert__SWIG_0(arg1,arg2,(int const &)*arg3);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< int >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::iterator arg2 ;
  std::vector< int >::size_type arg3 ;
  std::vector< int >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  std::vector< int >::value_type temp4 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:IntVector_insert",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector_insert" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "IntVector_insert" "', argument " "2"" of type '" "std::vector< int >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< int >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< int >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "IntVector_insert" "', argument " "2"" of type '" "std::vector< int >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IntVector_insert" "', argument " "3"" of type '" "std::vector< int >::size_type""'");
  } 
  arg3 = static_cast< std::vector< int >::size_type >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IntVector_insert" "', argument " "4"" of type '" "std::vector< int >::value_type""'");
  } 
  temp4 = static_cast< std::vector< int >::value_type >(val4);
  arg4 = &temp4;
  {
    try {
      std_vector_Sl_int_Sg__insert__SWIG_1(arg1,arg2,arg3,(int const &)*arg4);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector_insert(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5] = {
    0
  };
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< int >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_IntVector_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< int >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_IntVector_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'IntVector_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< int >::insert(std::vector< int >::iterator,std::vector< int >::value_type const &)\n"
    "    std::vector< int >::insert(std::vector< int >::iterator,std::vector< int >::size_type,std::vector< int >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_IntVector_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "n", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:IntVector_reserve",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector_reserve" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntVector_reserve" "', argument " "2"" of type '" "std::vector< int >::size_type""'");
  } 
  arg2 = static_cast< std::vector< int >::size_type >(val2);
  {
    try {
      (arg1)->reserve(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< int >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IntVector_capacity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector_capacity" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  {
    try {
      result = ((std::vector< int > const *)arg1)->capacity();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_IntVector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_IntVector",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IntVector" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *IntVector_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_Array_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:Array_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Array_iterator" "', argument " "1"" of type '" "std::vector< std::vector< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  {
    try {
      result = (swig::SwigPyIterator *)std_vector_Sl_std_vector_Sl_int_Sg__Sg__iterator(arg1,arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Array___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Array___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Array___nonzero__" "', argument " "1"" of type '" "std::vector< std::vector< int > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  {
    try {
      result = (bool)std_vector_Sl_std_vector_Sl_int_Sg__Sg____nonzero__((std::vector< std::vector< int > > const *)arg1);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Array___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Array___bool__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Array___bool__" "', argument " "1"" of type '" "std::vector< std::vector< int > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  {
    try {
      result = (bool)std_vector_Sl_std_vector_Sl_int_Sg__Sg____bool__((std::vector< std::vector< int > > const *)arg1);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Array___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::vector< int > >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Array___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Array___len__" "', argument " "1"" of type '" "std::vector< std::vector< int > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  {
    try {
      result = std_vector_Sl_std_vector_Sl_int_Sg__Sg____len__((std::vector< std::vector< int > > const *)arg1);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Array_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::vector< int > >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Array_pop",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Array_pop" "', argument " "1"" of type '" "std::vector< std::vector< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  {
    try {
      try {
        result = std_vector_Sl_std_vector_Sl_int_Sg__Sg__pop(arg1);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = swig::from(static_cast< std::vector<int,std::allocator< int > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Array___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  std::vector< std::vector< int > >::difference_type arg2 ;
  std::vector< std::vector< int > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i",(char *) "j", NULL 
  };
  std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:Array___getslice__",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Array___getslice__" "', argument " "1"" of type '" "std::vector< std::vector< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Array___getslice__" "', argument " "2"" of type '" "std::vector< std::vector< int > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< int > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Array___getslice__" "', argument " "3"" of type '" "std::vector< std::vector< int > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::vector< int > >::difference_type >(val3);
  {
    try {
      try {
        result = (std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > *)std_vector_Sl_std_vector_Sl_int_Sg__Sg____getslice__(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Array___setslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  std::vector< std::vector< int > >::difference_type arg2 ;
  std::vector< std::vector< int > >::difference_type arg3 ;
  std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > const &arg4_defvalue = std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > >() ;
  std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > *arg4 = (std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > *) &arg4_defvalue ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i",(char *) "j",(char *) "v", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO|O:Array___setslice__",kwnames,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Array___setslice__" "', argument " "1"" of type '" "std::vector< std::vector< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Array___setslice__" "', argument " "2"" of type '" "std::vector< std::vector< int > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< int > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Array___setslice__" "', argument " "3"" of type '" "std::vector< std::vector< int > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::vector< int > >::difference_type >(val3);
  if (obj3) {
    {
      std::vector<std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > *ptr = (std::vector<std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > *)0;
      res4 = swig::asptr(obj3, &ptr);
      if (!SWIG_IsOK(res4)) {
        SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Array___setslice__" "', argument " "4"" of type '" "std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > const &""'"); 
      }
      if (!ptr) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Array___setslice__" "', argument " "4"" of type '" "std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > const &""'"); 
      }
      arg4 = ptr;
    }
  }
  {
    try {
      try {
        std_vector_Sl_std_vector_Sl_int_Sg__Sg____setslice__(arg1,arg2,arg3,(std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > const &)*arg4);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Array___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  std::vector< std::vector< int > >::difference_type arg2 ;
  std::vector< std::vector< int > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i",(char *) "j", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:Array___delslice__",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Array___delslice__" "', argument " "1"" of type '" "std::vector< std::vector< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Array___delslice__" "', argument " "2"" of type '" "std::vector< std::vector< int > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< int > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Array___delslice__" "', argument " "3"" of type '" "std::vector< std::vector< int > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::vector< int > >::difference_type >(val3);
  {
    try {
      try {
        std_vector_Sl_std_vector_Sl_int_Sg__Sg____delslice__(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Array___delitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  std::vector< std::vector< int > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Array___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Array___delitem__" "', argument " "1"" of type '" "std::vector< std::vector< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Array___delitem__" "', argument " "2"" of type '" "std::vector< std::vector< int > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< int > >::difference_type >(val2);
  {
    try {
      try {
        std_vector_Sl_std_vector_Sl_int_Sg__Sg____delitem____SWIG_0(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Array___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Array___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Array___getitem__" "', argument " "1"" of type '" "std::vector< std::vector< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "Array___getitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    try {
      try {
        result = (std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > *)std_vector_Sl_std_vector_Sl_int_Sg__Sg____getitem____SWIG_0(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Array___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Array___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Array___setitem__" "', argument " "1"" of type '" "std::vector< std::vector< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "Array___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    std::vector<std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > *ptr = (std::vector<std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Array___setitem__" "', argument " "3"" of type '" "std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Array___setitem__" "', argument " "3"" of type '" "std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      try {
        std_vector_Sl_std_vector_Sl_int_Sg__Sg____setitem____SWIG_0(arg1,arg2,(std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Array___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Array___setitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Array___setitem__" "', argument " "1"" of type '" "std::vector< std::vector< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "Array___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    try {
      try {
        std_vector_Sl_std_vector_Sl_int_Sg__Sg____setitem____SWIG_1(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Array___delitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Array___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Array___delitem__" "', argument " "1"" of type '" "std::vector< std::vector< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "Array___delitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    try {
      try {
        std_vector_Sl_std_vector_Sl_int_Sg__Sg____delitem____SWIG_1(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Array___delitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3] = {
    0
  };
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_Array___delitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Array___delitem____SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Array___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::vector< int > >::__delitem__(std::vector< std::vector< int > >::difference_type)\n"
    "    std::vector< std::vector< int > >::__delitem__(PySliceObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Array___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  std::vector< std::vector< int > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< std::vector< int > >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Array___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Array___getitem__" "', argument " "1"" of type '" "std::vector< std::vector< int > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Array___getitem__" "', argument " "2"" of type '" "std::vector< std::vector< int > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< int > >::difference_type >(val2);
  {
    try {
      try {
        result = (std::vector< std::vector< int > >::value_type *) &std_vector_Sl_std_vector_Sl_int_Sg__Sg____getitem____SWIG_1((std::vector< std::vector< int > > const *)arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = swig::from(static_cast< std::vector<int,std::allocator< int > > >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Array___getitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3] = {
    0
  };
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_Array___getitem____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Array___getitem____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Array___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::vector< int > >::__getitem__(PySliceObject *)\n"
    "    std::vector< std::vector< int > >::__getitem__(std::vector< std::vector< int > >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Array___setitem____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  std::vector< std::vector< int > >::difference_type arg2 ;
  std::vector< std::vector< int > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Array___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Array___setitem__" "', argument " "1"" of type '" "std::vector< std::vector< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Array___setitem__" "', argument " "2"" of type '" "std::vector< std::vector< int > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< int > >::difference_type >(val2);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Array___setitem__" "', argument " "3"" of type '" "std::vector< std::vector< int > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Array___setitem__" "', argument " "3"" of type '" "std::vector< std::vector< int > >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      try {
        std_vector_Sl_std_vector_Sl_int_Sg__Sg____setitem____SWIG_2(arg1,arg2,(std::vector< int,std::allocator< int > > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Array___setitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4] = {
    0
  };
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_Array___setitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Array___setitem____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<int,std::allocator< int > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Array___setitem____SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Array___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::vector< int > >::__setitem__(PySliceObject *,std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > const &)\n"
    "    std::vector< std::vector< int > >::__setitem__(PySliceObject *)\n"
    "    std::vector< std::vector< int > >::__setitem__(std::vector< std::vector< int > >::difference_type,std::vector< std::vector< int > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Array_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  std::vector< std::vector< int > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "x", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Array_append",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Array_append" "', argument " "1"" of type '" "std::vector< std::vector< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Array_append" "', argument " "2"" of type '" "std::vector< std::vector< int > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Array_append" "', argument " "2"" of type '" "std::vector< std::vector< int > >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      std_vector_Sl_std_vector_Sl_int_Sg__Sg__append(arg1,(std::vector< int,std::allocator< int > > const &)*arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Array__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Array")) SWIG_fail;
  {
    try {
      result = (std::vector< std::vector< int > > *)new std::vector< std::vector< int > >();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Array__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int,std::allocator< int > > > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::vector< std::vector< int > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Array",&obj0)) SWIG_fail;
  {
    std::vector<std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > *ptr = (std::vector<std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Array" "', argument " "1"" of type '" "std::vector< std::vector< int,std::allocator< int > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Array" "', argument " "1"" of type '" "std::vector< std::vector< int,std::allocator< int > > > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (std::vector< std::vector< int > > *)new std::vector< std::vector< int > >((std::vector< std::vector< int,std::allocator< int > > > const &)*arg1);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Array_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Array_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Array_empty" "', argument " "1"" of type '" "std::vector< std::vector< int > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  {
    try {
      result = (bool)((std::vector< std::vector< int > > const *)arg1)->empty();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Array_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::vector< int > >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Array_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Array_size" "', argument " "1"" of type '" "std::vector< std::vector< int > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  {
    try {
      result = ((std::vector< std::vector< int > > const *)arg1)->size();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Array_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Array_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Array_clear" "', argument " "1"" of type '" "std::vector< std::vector< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  {
    try {
      (arg1)->clear();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Array_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  std::vector< std::vector< int,std::allocator< int > > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "v", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Array_swap",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Array_swap" "', argument " "1"" of type '" "std::vector< std::vector< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Array_swap" "', argument " "2"" of type '" "std::vector< std::vector< int,std::allocator< int > > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Array_swap" "', argument " "2"" of type '" "std::vector< std::vector< int,std::allocator< int > > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< std::vector< int,std::allocator< int > > > * >(argp2);
  {
    try {
      (arg1)->swap(*arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Array_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< std::vector< int,std::allocator< int > > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Array_get_allocator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Array_get_allocator" "', argument " "1"" of type '" "std::vector< std::vector< int > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  {
    try {
      result = ((std::vector< std::vector< int > > const *)arg1)->get_allocator();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new std::vector< std::vector< int > >::allocator_type(static_cast< const std::vector< std::vector< int > >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Array_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::vector< int > >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Array_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Array_begin" "', argument " "1"" of type '" "std::vector< std::vector< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  {
    try {
      result = (arg1)->begin();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< int > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Array_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::vector< int > >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Array_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Array_end" "', argument " "1"" of type '" "std::vector< std::vector< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  {
    try {
      result = (arg1)->end();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< int > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Array_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::vector< int > >::reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Array_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Array_rbegin" "', argument " "1"" of type '" "std::vector< std::vector< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  {
    try {
      result = (arg1)->rbegin();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< int > >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Array_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::vector< int > >::reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Array_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Array_rend" "', argument " "1"" of type '" "std::vector< std::vector< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  {
    try {
      result = (arg1)->rend();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< int > >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Array__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::vector< int > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Array",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Array" "', argument " "1"" of type '" "std::vector< std::vector< int > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< std::vector< int > >::size_type >(val1);
  {
    try {
      result = (std::vector< std::vector< int > > *)new std::vector< std::vector< int > >(arg1);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Array_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Array_pop_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Array_pop_back" "', argument " "1"" of type '" "std::vector< std::vector< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  {
    try {
      (arg1)->pop_back();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Array_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  std::vector< std::vector< int > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Array_resize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Array_resize" "', argument " "1"" of type '" "std::vector< std::vector< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Array_resize" "', argument " "2"" of type '" "std::vector< std::vector< int > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< int > >::size_type >(val2);
  {
    try {
      (arg1)->resize(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Array_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  std::vector< std::vector< int > >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< std::vector< int > >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Array_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Array_erase" "', argument " "1"" of type '" "std::vector< std::vector< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "Array_erase" "', argument " "2"" of type '" "std::vector< std::vector< int > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::vector< int > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< int > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "Array_erase" "', argument " "2"" of type '" "std::vector< std::vector< int > >::iterator""'");
    }
  }
  {
    try {
      result = std_vector_Sl_std_vector_Sl_int_Sg__Sg__erase__SWIG_0(arg1,arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< int > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Array_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  std::vector< std::vector< int > >::iterator arg2 ;
  std::vector< std::vector< int > >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< std::vector< int > >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Array_erase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Array_erase" "', argument " "1"" of type '" "std::vector< std::vector< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "Array_erase" "', argument " "2"" of type '" "std::vector< std::vector< int > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::vector< int > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< int > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "Array_erase" "', argument " "2"" of type '" "std::vector< std::vector< int > >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "Array_erase" "', argument " "3"" of type '" "std::vector< std::vector< int > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::vector< int > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< int > >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "Array_erase" "', argument " "3"" of type '" "std::vector< std::vector< int > >::iterator""'");
    }
  }
  {
    try {
      result = std_vector_Sl_std_vector_Sl_int_Sg__Sg__erase__SWIG_1(arg1,arg2,arg3);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< int > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Array_erase(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4] = {
    0
  };
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< int > >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_Array_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< int > >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< int > >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_Array_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Array_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::vector< int > >::erase(std::vector< std::vector< int > >::iterator)\n"
    "    std::vector< std::vector< int > >::erase(std::vector< std::vector< int > >::iterator,std::vector< std::vector< int > >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_Array__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > >::size_type arg1 ;
  std::vector< std::vector< int > >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< std::vector< int > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_Array",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Array" "', argument " "1"" of type '" "std::vector< std::vector< int > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< std::vector< int > >::size_type >(val1);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Array" "', argument " "2"" of type '" "std::vector< std::vector< int > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Array" "', argument " "2"" of type '" "std::vector< std::vector< int > >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (std::vector< std::vector< int > > *)new std::vector< std::vector< int > >(arg1,(std::vector< std::vector< int > >::value_type const &)*arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Array(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3] = {
    0
  };
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_Array__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_Array__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Array__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector<int,std::allocator< int > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_Array__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Array'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::vector< int > >::vector()\n"
    "    std::vector< std::vector< int > >::vector(std::vector< std::vector< int,std::allocator< int > > > const &)\n"
    "    std::vector< std::vector< int > >::vector(std::vector< std::vector< int > >::size_type)\n"
    "    std::vector< std::vector< int > >::vector(std::vector< std::vector< int > >::size_type,std::vector< std::vector< int > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Array_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  std::vector< std::vector< int > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "x", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Array_push_back",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Array_push_back" "', argument " "1"" of type '" "std::vector< std::vector< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Array_push_back" "', argument " "2"" of type '" "std::vector< std::vector< int > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Array_push_back" "', argument " "2"" of type '" "std::vector< std::vector< int > >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->push_back((std::vector< std::vector< int > >::value_type const &)*arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Array_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::vector< int > >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Array_front",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Array_front" "', argument " "1"" of type '" "std::vector< std::vector< int > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  {
    try {
      result = (std::vector< std::vector< int > >::value_type *) &((std::vector< std::vector< int > > const *)arg1)->front();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = swig::from(static_cast< std::vector<int,std::allocator< int > > >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Array_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::vector< int > >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Array_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Array_back" "', argument " "1"" of type '" "std::vector< std::vector< int > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  {
    try {
      result = (std::vector< std::vector< int > >::value_type *) &((std::vector< std::vector< int > > const *)arg1)->back();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = swig::from(static_cast< std::vector<int,std::allocator< int > > >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Array_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  std::vector< std::vector< int > >::size_type arg2 ;
  std::vector< std::vector< int > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "n",(char *) "x", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:Array_assign",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Array_assign" "', argument " "1"" of type '" "std::vector< std::vector< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Array_assign" "', argument " "2"" of type '" "std::vector< std::vector< int > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< int > >::size_type >(val2);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Array_assign" "', argument " "3"" of type '" "std::vector< std::vector< int > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Array_assign" "', argument " "3"" of type '" "std::vector< std::vector< int > >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      (arg1)->assign(arg2,(std::vector< std::vector< int > >::value_type const &)*arg3);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Array_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  std::vector< std::vector< int > >::size_type arg2 ;
  std::vector< std::vector< int > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Array_resize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Array_resize" "', argument " "1"" of type '" "std::vector< std::vector< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Array_resize" "', argument " "2"" of type '" "std::vector< std::vector< int > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< int > >::size_type >(val2);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Array_resize" "', argument " "3"" of type '" "std::vector< std::vector< int > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Array_resize" "', argument " "3"" of type '" "std::vector< std::vector< int > >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      (arg1)->resize(arg2,(std::vector< std::vector< int > >::value_type const &)*arg3);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Array_resize(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4] = {
    0
  };
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Array_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<int,std::allocator< int > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Array_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Array_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::vector< int > >::resize(std::vector< std::vector< int > >::size_type)\n"
    "    std::vector< std::vector< int > >::resize(std::vector< std::vector< int > >::size_type,std::vector< std::vector< int > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Array_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  std::vector< std::vector< int > >::iterator arg2 ;
  std::vector< std::vector< int > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< std::vector< int > >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Array_insert",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Array_insert" "', argument " "1"" of type '" "std::vector< std::vector< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "Array_insert" "', argument " "2"" of type '" "std::vector< std::vector< int > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::vector< int > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< int > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "Array_insert" "', argument " "2"" of type '" "std::vector< std::vector< int > >::iterator""'");
    }
  }
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Array_insert" "', argument " "3"" of type '" "std::vector< std::vector< int > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Array_insert" "', argument " "3"" of type '" "std::vector< std::vector< int > >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      result = std_vector_Sl_std_vector_Sl_int_Sg__Sg__insert__SWIG_0(arg1,arg2,(std::vector< int,std::allocator< int > > const &)*arg3);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< int > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Array_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  std::vector< std::vector< int > >::iterator arg2 ;
  std::vector< std::vector< int > >::size_type arg3 ;
  std::vector< std::vector< int > >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Array_insert",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Array_insert" "', argument " "1"" of type '" "std::vector< std::vector< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "Array_insert" "', argument " "2"" of type '" "std::vector< std::vector< int > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::vector< int > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< int > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "Array_insert" "', argument " "2"" of type '" "std::vector< std::vector< int > >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Array_insert" "', argument " "3"" of type '" "std::vector< std::vector< int > >::size_type""'");
  } 
  arg3 = static_cast< std::vector< std::vector< int > >::size_type >(val3);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Array_insert" "', argument " "4"" of type '" "std::vector< std::vector< int > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Array_insert" "', argument " "4"" of type '" "std::vector< std::vector< int > >::value_type const &""'"); 
    }
    arg4 = ptr;
  }
  {
    try {
      std_vector_Sl_std_vector_Sl_int_Sg__Sg__insert__SWIG_1(arg1,arg2,arg3,(std::vector< int,std::allocator< int > > const &)*arg4);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Array_insert(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5] = {
    0
  };
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< int > >::iterator > *>(iter) != 0));
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<int,std::allocator< int > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Array_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< int > >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector<int,std::allocator< int > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_Array_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Array_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::vector< int > >::insert(std::vector< std::vector< int > >::iterator,std::vector< std::vector< int > >::value_type const &)\n"
    "    std::vector< std::vector< int > >::insert(std::vector< std::vector< int > >::iterator,std::vector< std::vector< int > >::size_type,std::vector< std::vector< int > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Array_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  std::vector< std::vector< int > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "n", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Array_reserve",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Array_reserve" "', argument " "1"" of type '" "std::vector< std::vector< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Array_reserve" "', argument " "2"" of type '" "std::vector< std::vector< int > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< int > >::size_type >(val2);
  {
    try {
      (arg1)->reserve(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Array_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::vector< int > >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Array_capacity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Array_capacity" "', argument " "1"" of type '" "std::vector< std::vector< int > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  {
    try {
      result = ((std::vector< std::vector< int > > const *)arg1)->capacity();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Array(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Array",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Array" "', argument " "1"" of type '" "std::vector< std::vector< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Array_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *REPORT_WIDTH_swigconstant(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *module;
  PyObject *d;
  if (!PyArg_ParseTuple(args,(char*)"O:swigconstant", &module)) return NULL;
  d = PyModule_GetDict(module);
  if (!d) return NULL;
  SWIG_Python_SetConstant(d, "REPORT_WIDTH",SWIG_From_int(static_cast< int >(53)));
  return SWIG_Py_Void();
}


SWIGINTERN PyObject *DEFAULT_INIT_ID_swigconstant(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *module;
  PyObject *d;
  if (!PyArg_ParseTuple(args,(char*)"O:swigconstant", &module)) return NULL;
  d = PyModule_GetDict(module);
  if (!d) return NULL;
  SWIG_Python_SetConstant(d, "DEFAULT_INIT_ID",SWIG_From_int(static_cast< int >(10000)));
  return SWIG_Py_Void();
}


SWIGINTERN PyObject *FOUR_PI_swigconstant(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *module;
  PyObject *d;
  if (!PyArg_ParseTuple(args,(char*)"O:swigconstant", &module)) return NULL;
  d = PyModule_GetDict(module);
  if (!d) return NULL;
  SWIG_Python_SetConstant(d, "FOUR_PI",SWIG_From_double(static_cast< double >(12.566370614359172)));
  return SWIG_Py_Void();
}


SWIGINTERN PyObject *ONE_OVER_FOUR_PI_swigconstant(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *module;
  PyObject *d;
  if (!PyArg_ParseTuple(args,(char*)"O:swigconstant", &module)) return NULL;
  d = PyModule_GetDict(module);
  if (!d) return NULL;
  SWIG_Python_SetConstant(d, "ONE_OVER_FOUR_PI",SWIG_From_double(static_cast< double >(0.07957747154594767)));
  return SWIG_Py_Void();
}


SWIGINTERN PyObject *ZERO_SIGMA_T_swigconstant(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *module;
  PyObject *d;
  if (!PyArg_ParseTuple(args,(char*)"O:swigconstant", &module)) return NULL;
  d = PyModule_GetDict(module);
  if (!d) return NULL;
  SWIG_Python_SetConstant(d, "ZERO_SIGMA_T",SWIG_From_double(static_cast< double >(1E-10)));
  return SWIG_Py_Void();
}


SWIGINTERN PyObject *SIGMA_T_THRESH_swigconstant(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *module;
  PyObject *d;
  if (!PyArg_ParseTuple(args,(char*)"O:swigconstant", &module)) return NULL;
  d = PyModule_GetDict(module);
  if (!d) return NULL;
  SWIG_Python_SetConstant(d, "SIGMA_T_THRESH",SWIG_From_double(static_cast< double >(1E-3)));
  return SWIG_Py_Void();
}


SWIGINTERN PyObject *TINY_MOVE_swigconstant(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *module;
  PyObject *d;
  if (!PyArg_ParseTuple(args,(char*)"O:swigconstant", &module)) return NULL;
  d = PyModule_GetDict(module);
  if (!d) return NULL;
  SWIG_Python_SetConstant(d, "TINY_MOVE",SWIG_From_double(static_cast< double >(1E-8)));
  return SWIG_Py_Void();
}


SWIGINTERN PyObject *ON_LATTICE_CELL_THRESH_swigconstant(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *module;
  PyObject *d;
  if (!PyArg_ParseTuple(args,(char*)"O:swigconstant", &module)) return NULL;
  d = PyModule_GetDict(module);
  if (!d) return NULL;
  SWIG_Python_SetConstant(d, "ON_LATTICE_CELL_THRESH",SWIG_From_double(static_cast< double >(1E-12)));
  return SWIG_Py_Void();
}


SWIGINTERN PyObject *ON_SURFACE_THRESH_swigconstant(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *module;
  PyObject *d;
  if (!PyArg_ParseTuple(args,(char*)"O:swigconstant", &module)) return NULL;
  d = PyModule_GetDict(module);
  if (!d) return NULL;
  SWIG_Python_SetConstant(d, "ON_SURFACE_THRESH",SWIG_From_double(static_cast< double >(1E-12)));
  return SWIG_Py_Void();
}


SWIGINTERN PyObject *POLAR_WEIGHT_SUM_TOL_swigconstant(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *module;
  PyObject *d;
  if (!PyArg_ParseTuple(args,(char*)"O:swigconstant", &module)) return NULL;
  d = PyModule_GetDict(module);
  if (!d) return NULL;
  SWIG_Python_SetConstant(d, "POLAR_WEIGHT_SUM_TOL",SWIG_From_double(static_cast< double >(1E-5)));
  return SWIG_Py_Void();
}


SWIGINTERN PyObject *TAU_NUDGE_swigconstant(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *module;
  PyObject *d;
  if (!PyArg_ParseTuple(args,(char*)"O:swigconstant", &module)) return NULL;
  d = PyModule_GetDict(module);
  if (!d) return NULL;
  SWIG_Python_SetConstant(d, "TAU_NUDGE",SWIG_From_double(static_cast< double >(1E-12)));
  return SWIG_Py_Void();
}


SWIGINTERN PyObject *MIN_LINALG_POWER_ITERATIONS_swigconstant(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *module;
  PyObject *d;
  if (!PyArg_ParseTuple(args,(char*)"O:swigconstant", &module)) return NULL;
  d = PyModule_GetDict(module);
  if (!d) return NULL;
  SWIG_Python_SetConstant(d, "MIN_LINALG_POWER_ITERATIONS",SWIG_From_int(static_cast< int >(10)));
  return SWIG_Py_Void();
}


SWIGINTERN PyObject *MAX_LINALG_POWER_ITERATIONS_swigconstant(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *module;
  PyObject *d;
  if (!PyArg_ParseTuple(args,(char*)"O:swigconstant", &module)) return NULL;
  d = PyModule_GetDict(module);
  if (!d) return NULL;
  SWIG_Python_SetConstant(d, "MAX_LINALG_POWER_ITERATIONS",SWIG_From_int(static_cast< int >(25000)));
  return SWIG_Py_Void();
}


SWIGINTERN PyObject *MIN_LINEAR_SOLVE_ITERATIONS_swigconstant(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *module;
  PyObject *d;
  if (!PyArg_ParseTuple(args,(char*)"O:swigconstant", &module)) return NULL;
  d = PyModule_GetDict(module);
  if (!d) return NULL;
  SWIG_Python_SetConstant(d, "MIN_LINEAR_SOLVE_ITERATIONS",SWIG_From_int(static_cast< int >(10)));
  return SWIG_Py_Void();
}


SWIGINTERN PyObject *MAX_LINEAR_SOLVE_ITERATIONS_swigconstant(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *module;
  PyObject *d;
  if (!PyArg_ParseTuple(args,(char*)"O:swigconstant", &module)) return NULL;
  d = PyModule_GetDict(module);
  if (!d) return NULL;
  SWIG_Python_SetConstant(d, "MAX_LINEAR_SOLVE_ITERATIONS",SWIG_From_int(static_cast< int >(1000)));
  return SWIG_Py_Void();
}


SWIGINTERN PyObject *NUM_FACES_swigconstant(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *module;
  PyObject *d;
  if (!PyArg_ParseTuple(args,(char*)"O:swigconstant", &module)) return NULL;
  d = PyModule_GetDict(module);
  if (!d) return NULL;
  SWIG_Python_SetConstant(d, "NUM_FACES",SWIG_From_int(static_cast< int >(4)));
  return SWIG_Py_Void();
}


SWIGINTERN PyObject *NUM_EDGES_swigconstant(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *module;
  PyObject *d;
  if (!PyArg_ParseTuple(args,(char*)"O:swigconstant", &module)) return NULL;
  d = PyModule_GetDict(module);
  if (!d) return NULL;
  SWIG_Python_SetConstant(d, "NUM_EDGES",SWIG_From_int(static_cast< int >(4)));
  return SWIG_Py_Void();
}


SWIGINTERN PyObject *NUM_SURFACES_swigconstant(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *module;
  PyObject *d;
  if (!PyArg_ParseTuple(args,(char*)"O:swigconstant", &module)) return NULL;
  d = PyModule_GetDict(module);
  if (!d) return NULL;
  SWIG_Python_SetConstant(d, "NUM_SURFACES",SWIG_From_int(static_cast< int >(8)));
  return SWIG_Py_Void();
}


SWIGINTERN PyObject *SURFACE_X_MIN_swigconstant(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *module;
  PyObject *d;
  if (!PyArg_ParseTuple(args,(char*)"O:swigconstant", &module)) return NULL;
  d = PyModule_GetDict(module);
  if (!d) return NULL;
  SWIG_Python_SetConstant(d, "SURFACE_X_MIN",SWIG_From_int(static_cast< int >(0)));
  return SWIG_Py_Void();
}


SWIGINTERN PyObject *SURFACE_Y_MIN_swigconstant(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *module;
  PyObject *d;
  if (!PyArg_ParseTuple(args,(char*)"O:swigconstant", &module)) return NULL;
  d = PyModule_GetDict(module);
  if (!d) return NULL;
  SWIG_Python_SetConstant(d, "SURFACE_Y_MIN",SWIG_From_int(static_cast< int >(1)));
  return SWIG_Py_Void();
}


SWIGINTERN PyObject *SURFACE_X_MAX_swigconstant(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *module;
  PyObject *d;
  if (!PyArg_ParseTuple(args,(char*)"O:swigconstant", &module)) return NULL;
  d = PyModule_GetDict(module);
  if (!d) return NULL;
  SWIG_Python_SetConstant(d, "SURFACE_X_MAX",SWIG_From_int(static_cast< int >(2)));
  return SWIG_Py_Void();
}


SWIGINTERN PyObject *SURFACE_Y_MAX_swigconstant(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *module;
  PyObject *d;
  if (!PyArg_ParseTuple(args,(char*)"O:swigconstant", &module)) return NULL;
  d = PyModule_GetDict(module);
  if (!d) return NULL;
  SWIG_Python_SetConstant(d, "SURFACE_Y_MAX",SWIG_From_int(static_cast< int >(3)));
  return SWIG_Py_Void();
}


SWIGINTERN PyObject *SURFACE_X_MIN_Y_MIN_swigconstant(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *module;
  PyObject *d;
  if (!PyArg_ParseTuple(args,(char*)"O:swigconstant", &module)) return NULL;
  d = PyModule_GetDict(module);
  if (!d) return NULL;
  SWIG_Python_SetConstant(d, "SURFACE_X_MIN_Y_MIN",SWIG_From_int(static_cast< int >(4)));
  return SWIG_Py_Void();
}


SWIGINTERN PyObject *SURFACE_X_MAX_Y_MIN_swigconstant(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *module;
  PyObject *d;
  if (!PyArg_ParseTuple(args,(char*)"O:swigconstant", &module)) return NULL;
  d = PyModule_GetDict(module);
  if (!d) return NULL;
  SWIG_Python_SetConstant(d, "SURFACE_X_MAX_Y_MIN",SWIG_From_int(static_cast< int >(5)));
  return SWIG_Py_Void();
}


SWIGINTERN PyObject *SURFACE_X_MAX_Y_MAX_swigconstant(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *module;
  PyObject *d;
  if (!PyArg_ParseTuple(args,(char*)"O:swigconstant", &module)) return NULL;
  d = PyModule_GetDict(module);
  if (!d) return NULL;
  SWIG_Python_SetConstant(d, "SURFACE_X_MAX_Y_MAX",SWIG_From_int(static_cast< int >(6)));
  return SWIG_Py_Void();
}


SWIGINTERN PyObject *SURFACE_X_MIN_Y_MAX_swigconstant(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *module;
  PyObject *d;
  if (!PyArg_ParseTuple(args,(char*)"O:swigconstant", &module)) return NULL;
  d = PyModule_GetDict(module);
  if (!d) return NULL;
  SWIG_Python_SetConstant(d, "SURFACE_X_MIN_Y_MAX",SWIG_From_int(static_cast< int >(7)));
  return SWIG_Py_Void();
}


SWIGINTERN PyObject *NUM_VALUES_PER_RETRIEVED_TRACK_swigconstant(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *module;
  PyObject *d;
  if (!PyArg_ParseTuple(args,(char*)"O:swigconstant", &module)) return NULL;
  d = PyModule_GetDict(module);
  if (!d) return NULL;
  SWIG_Python_SetConstant(d, "NUM_VALUES_PER_RETRIEVED_TRACK",SWIG_From_int(static_cast< int >(6)));
  return SWIG_Py_Void();
}


SWIGINTERN PyObject *NUM_VALUES_PER_RETRIEVED_SEGMENT_swigconstant(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *module;
  PyObject *d;
  if (!PyArg_ParseTuple(args,(char*)"O:swigconstant", &module)) return NULL;
  d = PyModule_GetDict(module);
  if (!d) return NULL;
  SWIG_Python_SetConstant(d, "NUM_VALUES_PER_RETRIEVED_SEGMENT",SWIG_From_int(static_cast< int >(7)));
  return SWIG_Py_Void();
}


SWIGINTERN PyObject *_wrap_cell_id(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)":cell_id")) SWIG_fail;
  {
    try {
      result = (int)cell_id();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_reset_cell_id(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":reset_cell_id")) SWIG_fail;
  {
    try {
      reset_cell_id();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_maximize_cell_id(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  char *  kwnames[] = {
    (char *) "cell_id", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:maximize_cell_id",kwnames,&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "maximize_cell_id" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try {
      maximize_cell_id(arg1);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_surface_halfspace__surface_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  surface_halfspace *arg1 = (surface_halfspace *) 0 ;
  Surface *arg2 = (Surface *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:surface_halfspace__surface_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_surface_halfspace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "surface_halfspace__surface_set" "', argument " "1"" of type '" "surface_halfspace *""'"); 
  }
  arg1 = reinterpret_cast< surface_halfspace * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Surface, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "surface_halfspace__surface_set" "', argument " "2"" of type '" "Surface *""'"); 
  }
  arg2 = reinterpret_cast< Surface * >(argp2);
  if (arg1) (arg1)->_surface = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_surface_halfspace__surface_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  surface_halfspace *arg1 = (surface_halfspace *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Surface *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:surface_halfspace__surface_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_surface_halfspace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "surface_halfspace__surface_get" "', argument " "1"" of type '" "surface_halfspace *""'"); 
  }
  arg1 = reinterpret_cast< surface_halfspace * >(argp1);
  result = (Surface *) ((arg1)->_surface);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Surface, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_surface_halfspace__halfspace_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  surface_halfspace *arg1 = (surface_halfspace *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:surface_halfspace__halfspace_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_surface_halfspace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "surface_halfspace__halfspace_set" "', argument " "1"" of type '" "surface_halfspace *""'"); 
  }
  arg1 = reinterpret_cast< surface_halfspace * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "surface_halfspace__halfspace_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->_halfspace = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_surface_halfspace__halfspace_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  surface_halfspace *arg1 = (surface_halfspace *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:surface_halfspace__halfspace_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_surface_halfspace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "surface_halfspace__halfspace_get" "', argument " "1"" of type '" "surface_halfspace *""'"); 
  }
  arg1 = reinterpret_cast< surface_halfspace * >(argp1);
  result = (int) ((arg1)->_halfspace);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_surface_halfspace(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  surface_halfspace *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_surface_halfspace")) SWIG_fail;
  {
    try {
      result = (surface_halfspace *)new surface_halfspace();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_surface_halfspace, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_surface_halfspace(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  surface_halfspace *arg1 = (surface_halfspace *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_surface_halfspace",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_surface_halfspace, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_surface_halfspace" "', argument " "1"" of type '" "surface_halfspace *""'"); 
  }
  arg1 = reinterpret_cast< surface_halfspace * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *surface_halfspace_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_surface_halfspace, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *MATERIAL_swigconstant(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *module;
  PyObject *d;
  if (!PyArg_ParseTuple(args,(char*)"O:swigconstant", &module)) return NULL;
  d = PyModule_GetDict(module);
  if (!d) return NULL;
  SWIG_Python_SetConstant(d, "MATERIAL",SWIG_From_int(static_cast< int >(MATERIAL)));
  return SWIG_Py_Void();
}


SWIGINTERN PyObject *FILL_swigconstant(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *module;
  PyObject *d;
  if (!PyArg_ParseTuple(args,(char*)"O:swigconstant", &module)) return NULL;
  d = PyModule_GetDict(module);
  if (!d) return NULL;
  SWIG_Python_SetConstant(d, "FILL",SWIG_From_int(static_cast< int >(FILL)));
  return SWIG_Py_Void();
}


SWIGINTERN PyObject *UNFILLED_swigconstant(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *module;
  PyObject *d;
  if (!PyArg_ParseTuple(args,(char*)"O:swigconstant", &module)) return NULL;
  d = PyModule_GetDict(module);
  if (!d) return NULL;
  SWIG_Python_SetConstant(d, "UNFILLED",SWIG_From_int(static_cast< int >(UNFILLED)));
  return SWIG_Py_Void();
}


SWIGINTERN PyObject *_wrap_new_Cell(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  int arg1 = (int) 0 ;
  char *arg2 = (char *) "" ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "id",(char *) "name", NULL 
  };
  Cell *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"|OO:new_Cell",kwnames,&obj0,&obj1)) SWIG_fail;
  if (obj0) {
    ecode1 = SWIG_AsVal_int(obj0, &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Cell" "', argument " "1"" of type '" "int""'");
    } 
    arg1 = static_cast< int >(val1);
  }
  if (obj1) {
    res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Cell" "', argument " "2"" of type '" "char const *""'");
    }
    arg2 = reinterpret_cast< char * >(buf2);
  }
  {
    try {
      result = (Cell *)new Cell(arg1,(char const *)arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Cell, SWIG_POINTER_NEW |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Cell(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Cell *arg1 = (Cell *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Cell",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Cell, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Cell" "', argument " "1"" of type '" "Cell *""'"); 
  }
  arg1 = reinterpret_cast< Cell * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_getUid(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Cell *arg1 = (Cell *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Cell_getUid",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_getUid" "', argument " "1"" of type '" "Cell const *""'"); 
  }
  arg1 = reinterpret_cast< Cell * >(argp1);
  {
    try {
      result = (int)((Cell const *)arg1)->getUid();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_getId(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Cell *arg1 = (Cell *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Cell_getId",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_getId" "', argument " "1"" of type '" "Cell const *""'"); 
  }
  arg1 = reinterpret_cast< Cell * >(argp1);
  {
    try {
      result = (int)((Cell const *)arg1)->getId();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_getName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Cell *arg1 = (Cell *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Cell_getName",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_getName" "', argument " "1"" of type '" "Cell const *""'"); 
  }
  arg1 = reinterpret_cast< Cell * >(argp1);
  {
    try {
      result = (char *)((Cell const *)arg1)->getName();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_getType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Cell *arg1 = (Cell *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  cellType result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Cell_getType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_getType" "', argument " "1"" of type '" "Cell const *""'"); 
  }
  arg1 = reinterpret_cast< Cell * >(argp1);
  {
    try {
      result = (cellType)((Cell const *)arg1)->getType();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_getFillMaterial(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Cell *arg1 = (Cell *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Material *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Cell_getFillMaterial",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_getFillMaterial" "', argument " "1"" of type '" "Cell *""'"); 
  }
  arg1 = reinterpret_cast< Cell * >(argp1);
  {
    try {
      result = (Material *)(arg1)->getFillMaterial();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Material, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_getFillUniverse(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Cell *arg1 = (Cell *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Universe *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Cell_getFillUniverse",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_getFillUniverse" "', argument " "1"" of type '" "Cell *""'"); 
  }
  arg1 = reinterpret_cast< Cell * >(argp1);
  {
    try {
      result = (Universe *)(arg1)->getFillUniverse();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Universe, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_getVolume(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Cell *arg1 = (Cell *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Cell_getVolume",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_getVolume" "', argument " "1"" of type '" "Cell *""'"); 
  }
  arg1 = reinterpret_cast< Cell * >(argp1);
  {
    try {
      result = (double)(arg1)->getVolume();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_getNumInstances(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Cell *arg1 = (Cell *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Cell_getNumInstances",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_getNumInstances" "', argument " "1"" of type '" "Cell *""'"); 
  }
  arg1 = reinterpret_cast< Cell * >(argp1);
  {
    try {
      result = (int)(arg1)->getNumInstances();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_isRotated(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Cell *arg1 = (Cell *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Cell_isRotated",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_isRotated" "', argument " "1"" of type '" "Cell *""'"); 
  }
  arg1 = reinterpret_cast< Cell * >(argp1);
  {
    try {
      result = (bool)(arg1)->isRotated();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_isTranslated(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Cell *arg1 = (Cell *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Cell_isTranslated",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_isTranslated" "', argument " "1"" of type '" "Cell *""'"); 
  }
  arg1 = reinterpret_cast< Cell * >(argp1);
  {
    try {
      result = (bool)(arg1)->isTranslated();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_getPhi(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Cell *arg1 = (Cell *) 0 ;
  std::string arg2 = (std::string) "degrees" ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "units", NULL 
  };
  double result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|O:Cell_getPhi",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_getPhi" "', argument " "1"" of type '" "Cell *""'"); 
  }
  arg1 = reinterpret_cast< Cell * >(argp1);
  if (obj1) {
    {
      res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__string,  0  | 0);
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Cell_getPhi" "', argument " "2"" of type '" "std::string""'"); 
      }  
      if (!argp2) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Cell_getPhi" "', argument " "2"" of type '" "std::string""'");
      } else {
        std::string * temp = reinterpret_cast< std::string * >(argp2);
        arg2 = *temp;
        if (SWIG_IsNewObj(res2)) delete temp;
      }
    }
  }
  {
    try {
      result = (double)(arg1)->getPhi(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_getTheta(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Cell *arg1 = (Cell *) 0 ;
  std::string arg2 = (std::string) "degrees" ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "units", NULL 
  };
  double result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|O:Cell_getTheta",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_getTheta" "', argument " "1"" of type '" "Cell *""'"); 
  }
  arg1 = reinterpret_cast< Cell * >(argp1);
  if (obj1) {
    {
      res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__string,  0  | 0);
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Cell_getTheta" "', argument " "2"" of type '" "std::string""'"); 
      }  
      if (!argp2) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Cell_getTheta" "', argument " "2"" of type '" "std::string""'");
      } else {
        std::string * temp = reinterpret_cast< std::string * >(argp2);
        arg2 = *temp;
        if (SWIG_IsNewObj(res2)) delete temp;
      }
    }
  }
  {
    try {
      result = (double)(arg1)->getTheta(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_getPsi(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Cell *arg1 = (Cell *) 0 ;
  std::string arg2 = (std::string) "degrees" ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "units", NULL 
  };
  double result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|O:Cell_getPsi",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_getPsi" "', argument " "1"" of type '" "Cell *""'"); 
  }
  arg1 = reinterpret_cast< Cell * >(argp1);
  if (obj1) {
    {
      res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__string,  0  | 0);
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Cell_getPsi" "', argument " "2"" of type '" "std::string""'"); 
      }  
      if (!argp2) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Cell_getPsi" "', argument " "2"" of type '" "std::string""'");
      } else {
        std::string * temp = reinterpret_cast< std::string * >(argp2);
        arg2 = *temp;
        if (SWIG_IsNewObj(res2)) delete temp;
      }
    }
  }
  {
    try {
      result = (double)(arg1)->getPsi(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_getRotationMatrix(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Cell *arg1 = (Cell *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Cell_getRotationMatrix",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_getRotationMatrix" "', argument " "1"" of type '" "Cell *""'"); 
  }
  arg1 = reinterpret_cast< Cell * >(argp1);
  {
    try {
      result = (double *)(arg1)->getRotationMatrix();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_getTranslation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Cell *arg1 = (Cell *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Cell_getTranslation",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_getTranslation" "', argument " "1"" of type '" "Cell *""'"); 
  }
  arg1 = reinterpret_cast< Cell * >(argp1);
  {
    try {
      result = (double *)(arg1)->getTranslation();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_retrieveRotation(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Cell *arg1 = (Cell *) 0 ;
  double *arg2 = (double *) 0 ;
  int arg3 ;
  std::string arg4 = (std::string) "degrees" ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *array2 = NULL ;
  void *argp4 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "rotations",(char *) "units", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO|O:Cell_retrieveRotation",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_retrieveRotation" "', argument " "1"" of type '" "Cell *""'"); 
  }
  arg1 = reinterpret_cast< Cell * >(argp1);
  {
    npy_intp dims[1];
    if (!PyInt_Check(obj1))
    {
      const char* typestring = pytype_string(obj1);
      PyErr_Format(PyExc_TypeError,
        "Int dimension expected.  '%s' given.",
        typestring);
      SWIG_fail;
    }
    arg3 = (int) PyInt_AsLong(obj1);
    dims[0] = (npy_intp) arg3;
    array2 = PyArray_SimpleNew(1, dims, NPY_DOUBLE);
    if (!array2) SWIG_fail;
    arg2 = (double*) array_data(array2);
  }
  if (obj2) {
    {
      res4 = SWIG_ConvertPtr(obj2, &argp4, SWIGTYPE_p_std__string,  0  | 0);
      if (!SWIG_IsOK(res4)) {
        SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Cell_retrieveRotation" "', argument " "4"" of type '" "std::string""'"); 
      }  
      if (!argp4) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Cell_retrieveRotation" "', argument " "4"" of type '" "std::string""'");
      } else {
        std::string * temp = reinterpret_cast< std::string * >(argp4);
        arg4 = *temp;
        if (SWIG_IsNewObj(res4)) delete temp;
      }
    }
  }
  {
    try {
      (arg1)->retrieveRotation(arg2,arg3,arg4);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  {
    resultobj = SWIG_Python_AppendOutput(resultobj,(PyObject*)array2);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_retrieveTranslation(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Cell *arg1 = (Cell *) 0 ;
  double *arg2 = (double *) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *array2 = NULL ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "translations", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Cell_retrieveTranslation",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_retrieveTranslation" "', argument " "1"" of type '" "Cell *""'"); 
  }
  arg1 = reinterpret_cast< Cell * >(argp1);
  {
    npy_intp dims[1];
    if (!PyInt_Check(obj1))
    {
      const char* typestring = pytype_string(obj1);
      PyErr_Format(PyExc_TypeError,
        "Int dimension expected.  '%s' given.",
        typestring);
      SWIG_fail;
    }
    arg3 = (int) PyInt_AsLong(obj1);
    dims[0] = (npy_intp) arg3;
    array2 = PyArray_SimpleNew(1, dims, NPY_DOUBLE);
    if (!array2) SWIG_fail;
    arg2 = (double*) array_data(array2);
  }
  {
    try {
      (arg1)->retrieveTranslation(arg2,arg3);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  {
    resultobj = SWIG_Python_AppendOutput(resultobj,(PyObject*)array2);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_getNumRings(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Cell *arg1 = (Cell *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Cell_getNumRings",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_getNumRings" "', argument " "1"" of type '" "Cell *""'"); 
  }
  arg1 = reinterpret_cast< Cell * >(argp1);
  {
    try {
      result = (int)(arg1)->getNumRings();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_getNumSectors(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Cell *arg1 = (Cell *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Cell_getNumSectors",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_getNumSectors" "', argument " "1"" of type '" "Cell *""'"); 
  }
  arg1 = reinterpret_cast< Cell * >(argp1);
  {
    try {
      result = (int)(arg1)->getNumSectors();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_getMinX(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Cell *arg1 = (Cell *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Cell_getMinX",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_getMinX" "', argument " "1"" of type '" "Cell *""'"); 
  }
  arg1 = reinterpret_cast< Cell * >(argp1);
  {
    try {
      result = (double)(arg1)->getMinX();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_getMaxX(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Cell *arg1 = (Cell *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Cell_getMaxX",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_getMaxX" "', argument " "1"" of type '" "Cell *""'"); 
  }
  arg1 = reinterpret_cast< Cell * >(argp1);
  {
    try {
      result = (double)(arg1)->getMaxX();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_getMinY(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Cell *arg1 = (Cell *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Cell_getMinY",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_getMinY" "', argument " "1"" of type '" "Cell *""'"); 
  }
  arg1 = reinterpret_cast< Cell * >(argp1);
  {
    try {
      result = (double)(arg1)->getMinY();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_getMaxY(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Cell *arg1 = (Cell *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Cell_getMaxY",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_getMaxY" "', argument " "1"" of type '" "Cell *""'"); 
  }
  arg1 = reinterpret_cast< Cell * >(argp1);
  {
    try {
      result = (double)(arg1)->getMaxY();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_getMinZ(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Cell *arg1 = (Cell *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Cell_getMinZ",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_getMinZ" "', argument " "1"" of type '" "Cell *""'"); 
  }
  arg1 = reinterpret_cast< Cell * >(argp1);
  {
    try {
      result = (double)(arg1)->getMinZ();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_getMaxZ(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Cell *arg1 = (Cell *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Cell_getMaxZ",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_getMaxZ" "', argument " "1"" of type '" "Cell *""'"); 
  }
  arg1 = reinterpret_cast< Cell * >(argp1);
  {
    try {
      result = (double)(arg1)->getMaxZ();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_getMinXBoundaryType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Cell *arg1 = (Cell *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  boundaryType result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Cell_getMinXBoundaryType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_getMinXBoundaryType" "', argument " "1"" of type '" "Cell *""'"); 
  }
  arg1 = reinterpret_cast< Cell * >(argp1);
  {
    try {
      result = (boundaryType)(arg1)->getMinXBoundaryType();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_getMaxXBoundaryType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Cell *arg1 = (Cell *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  boundaryType result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Cell_getMaxXBoundaryType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_getMaxXBoundaryType" "', argument " "1"" of type '" "Cell *""'"); 
  }
  arg1 = reinterpret_cast< Cell * >(argp1);
  {
    try {
      result = (boundaryType)(arg1)->getMaxXBoundaryType();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_getMinYBoundaryType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Cell *arg1 = (Cell *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  boundaryType result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Cell_getMinYBoundaryType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_getMinYBoundaryType" "', argument " "1"" of type '" "Cell *""'"); 
  }
  arg1 = reinterpret_cast< Cell * >(argp1);
  {
    try {
      result = (boundaryType)(arg1)->getMinYBoundaryType();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_getMaxYBoundaryType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Cell *arg1 = (Cell *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  boundaryType result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Cell_getMaxYBoundaryType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_getMaxYBoundaryType" "', argument " "1"" of type '" "Cell *""'"); 
  }
  arg1 = reinterpret_cast< Cell * >(argp1);
  {
    try {
      result = (boundaryType)(arg1)->getMaxYBoundaryType();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_getNumSurfaces(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Cell *arg1 = (Cell *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Cell_getNumSurfaces",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_getNumSurfaces" "', argument " "1"" of type '" "Cell const *""'"); 
  }
  arg1 = reinterpret_cast< Cell * >(argp1);
  {
    try {
      result = (int)((Cell const *)arg1)->getNumSurfaces();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_getSurfaces(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Cell *arg1 = (Cell *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::map< int,surface_halfspace *,std::less< int >,std::allocator< std::pair< int const,surface_halfspace * > > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Cell_getSurfaces",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_getSurfaces" "', argument " "1"" of type '" "Cell const *""'"); 
  }
  arg1 = reinterpret_cast< Cell * >(argp1);
  {
    try {
      result = ((Cell const *)arg1)->getSurfaces();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    resultobj = PyDict_New();
    int size = (&result)->size();
    
    std::map<int, surface_halfspace*>::iterator iter;
    surface_halfspace* surf;
    int surf_id;
    
    for (iter = (&result)->begin(); iter != (&result)->end(); ++iter) {
      surf_id = iter->first;
      surf = iter->second;
      PyObject* value =
      SWIG_NewPointerObj(SWIG_as_voidptr(surf),
        SWIGTYPE_p_surface_halfspace, 0);
      PyDict_SetItem(resultobj, PyInt_FromLong(surf_id), value);
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_getNeighbors(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Cell *arg1 = (Cell *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< Cell *,std::allocator< Cell * > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Cell_getNeighbors",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_getNeighbors" "', argument " "1"" of type '" "Cell const *""'"); 
  }
  arg1 = reinterpret_cast< Cell * >(argp1);
  {
    try {
      result = ((Cell const *)arg1)->getNeighbors();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new std::vector< Cell *,std::allocator< Cell * > >(static_cast< const std::vector< Cell *,std::allocator< Cell * > >& >(result))), SWIGTYPE_p_std__vectorT_Cell_p_std__allocatorT_Cell_p_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_hasParent(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Cell *arg1 = (Cell *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Cell_hasParent",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_hasParent" "', argument " "1"" of type '" "Cell *""'"); 
  }
  arg1 = reinterpret_cast< Cell * >(argp1);
  {
    try {
      result = (bool)(arg1)->hasParent();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_getParent(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Cell *arg1 = (Cell *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Cell *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Cell_getParent",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_getParent" "', argument " "1"" of type '" "Cell *""'"); 
  }
  arg1 = reinterpret_cast< Cell * >(argp1);
  {
    try {
      result = (Cell *)(arg1)->getParent();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Cell, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_getOldestAncestor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Cell *arg1 = (Cell *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Cell *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Cell_getOldestAncestor",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_getOldestAncestor" "', argument " "1"" of type '" "Cell *""'"); 
  }
  arg1 = reinterpret_cast< Cell * >(argp1);
  {
    try {
      result = (Cell *)(arg1)->getOldestAncestor();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Cell, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_getAllCells(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Cell *arg1 = (Cell *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::map< int,Cell *,std::less< int >,std::allocator< std::pair< int const,Cell * > > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Cell_getAllCells",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_getAllCells" "', argument " "1"" of type '" "Cell *""'"); 
  }
  arg1 = reinterpret_cast< Cell * >(argp1);
  {
    try {
      result = (arg1)->getAllCells();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    resultobj = PyDict_New();
    int size = (&result)->size();
    
    std::map<int, Cell*>::iterator iter;
    Cell* cell;
    int cell_id;
    
    for (iter = (&result)->begin(); iter != (&result)->end(); ++iter) {
      cell_id = iter->first;
      cell = iter->second;
      PyObject* value =
      SWIG_NewPointerObj(SWIG_as_voidptr(cell), SWIGTYPE_p_Cell, 0);
      PyDict_SetItem(resultobj, PyInt_FromLong(cell_id), value);
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_getAllUniverses(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Cell *arg1 = (Cell *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::map< int,Universe *,std::less< int >,std::allocator< std::pair< int const,Universe * > > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Cell_getAllUniverses",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_getAllUniverses" "', argument " "1"" of type '" "Cell *""'"); 
  }
  arg1 = reinterpret_cast< Cell * >(argp1);
  {
    try {
      result = (arg1)->getAllUniverses();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    resultobj = PyDict_New();
    int size = (&result)->size();
    
    std::map<int, Universe*>::iterator iter;
    Universe* univ;
    int univ_id;
    
    for (iter = (&result)->begin(); iter != (&result)->end(); ++iter) {
      univ_id = iter->first;
      univ = iter->second;
      PyObject* value =
      SWIG_NewPointerObj(SWIG_as_voidptr(univ), SWIGTYPE_p_Universe, 0);
      PyDict_SetItem(resultobj, PyInt_FromLong(univ_id), value);
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_setName(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Cell *arg1 = (Cell *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "name", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Cell_setName",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_setName" "', argument " "1"" of type '" "Cell *""'"); 
  }
  arg1 = reinterpret_cast< Cell * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Cell_setName" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    try {
      (arg1)->setName((char const *)arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_setFill__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Cell *arg1 = (Cell *) 0 ;
  Material *arg2 = (Material *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Cell_setFill",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_setFill" "', argument " "1"" of type '" "Cell *""'"); 
  }
  arg1 = reinterpret_cast< Cell * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Material, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Cell_setFill" "', argument " "2"" of type '" "Material *""'"); 
  }
  arg2 = reinterpret_cast< Material * >(argp2);
  {
    try {
      (arg1)->setFill(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_setFill__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Cell *arg1 = (Cell *) 0 ;
  Universe *arg2 = (Universe *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Cell_setFill",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_setFill" "', argument " "1"" of type '" "Cell *""'"); 
  }
  arg1 = reinterpret_cast< Cell * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Universe, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Cell_setFill" "', argument " "2"" of type '" "Universe *""'"); 
  }
  arg2 = reinterpret_cast< Universe * >(argp2);
  {
    try {
      (arg1)->setFill(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_setFill(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3] = {
    0
  };
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Cell, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Material, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Cell_setFill__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Cell, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Universe, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Cell_setFill__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Cell_setFill'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Cell::setFill(Material *)\n"
    "    Cell::setFill(Universe *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Cell_setVolume(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Cell *arg1 = (Cell *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "volume", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Cell_setVolume",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_setVolume" "', argument " "1"" of type '" "Cell *""'"); 
  }
  arg1 = reinterpret_cast< Cell * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Cell_setVolume" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setVolume(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_incrementVolume(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Cell *arg1 = (Cell *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "volume", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Cell_incrementVolume",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_incrementVolume" "', argument " "1"" of type '" "Cell *""'"); 
  }
  arg1 = reinterpret_cast< Cell * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Cell_incrementVolume" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->incrementVolume(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_setNumInstances(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Cell *arg1 = (Cell *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "num_instances", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Cell_setNumInstances",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_setNumInstances" "', argument " "1"" of type '" "Cell *""'"); 
  }
  arg1 = reinterpret_cast< Cell * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Cell_setNumInstances" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->setNumInstances(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_incrementNumInstances(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Cell *arg1 = (Cell *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Cell_incrementNumInstances",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_incrementNumInstances" "', argument " "1"" of type '" "Cell *""'"); 
  }
  arg1 = reinterpret_cast< Cell * >(argp1);
  {
    try {
      (arg1)->incrementNumInstances();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_setRotation(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Cell *arg1 = (Cell *) 0 ;
  double *arg2 = (double *) 0 ;
  int arg3 ;
  std::string arg4 = (std::string) "degrees" ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "rotation",(char *) "units", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO|O:Cell_setRotation",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_setRotation" "', argument " "1"" of type '" "Cell *""'"); 
  }
  arg1 = reinterpret_cast< Cell * >(argp1);
  {
    npy_intp size[1] = {
      -1 
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double*) array_data(array2);
    arg3 = (int) array_size(array2,0);
  }
  if (obj2) {
    {
      res4 = SWIG_ConvertPtr(obj2, &argp4, SWIGTYPE_p_std__string,  0  | 0);
      if (!SWIG_IsOK(res4)) {
        SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Cell_setRotation" "', argument " "4"" of type '" "std::string""'"); 
      }  
      if (!argp4) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Cell_setRotation" "', argument " "4"" of type '" "std::string""'");
      } else {
        std::string * temp = reinterpret_cast< std::string * >(argp4);
        arg4 = *temp;
        if (SWIG_IsNewObj(res4)) delete temp;
      }
    }
  }
  {
    try {
      (arg1)->setRotation(arg2,arg3,arg4);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_setTranslation(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Cell *arg1 = (Cell *) 0 ;
  double *arg2 = (double *) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "translation", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Cell_setTranslation",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_setTranslation" "', argument " "1"" of type '" "Cell *""'"); 
  }
  arg1 = reinterpret_cast< Cell * >(argp1);
  {
    npy_intp size[1] = {
      -1 
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double*) array_data(array2);
    arg3 = (int) array_size(array2,0);
  }
  {
    try {
      (arg1)->setTranslation(arg2,arg3);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_setNumRings(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Cell *arg1 = (Cell *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "num_rings", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Cell_setNumRings",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_setNumRings" "', argument " "1"" of type '" "Cell *""'"); 
  }
  arg1 = reinterpret_cast< Cell * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Cell_setNumRings" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->setNumRings(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_setNumSectors(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Cell *arg1 = (Cell *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "num_sectors", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Cell_setNumSectors",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_setNumSectors" "', argument " "1"" of type '" "Cell *""'"); 
  }
  arg1 = reinterpret_cast< Cell * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Cell_setNumSectors" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->setNumSectors(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_setParent(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Cell *arg1 = (Cell *) 0 ;
  Cell *arg2 = (Cell *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "parent", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Cell_setParent",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_setParent" "', argument " "1"" of type '" "Cell *""'"); 
  }
  arg1 = reinterpret_cast< Cell * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Cell, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Cell_setParent" "', argument " "2"" of type '" "Cell *""'"); 
  }
  arg2 = reinterpret_cast< Cell * >(argp2);
  {
    try {
      (arg1)->setParent(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_addSurface(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Cell *arg1 = (Cell *) 0 ;
  int arg2 ;
  Surface *arg3 = (Surface *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "halfspace",(char *) "surface", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:Cell_addSurface",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_addSurface" "', argument " "1"" of type '" "Cell *""'"); 
  }
  arg1 = reinterpret_cast< Cell * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Cell_addSurface" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_Surface, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Cell_addSurface" "', argument " "3"" of type '" "Surface *""'"); 
  }
  arg3 = reinterpret_cast< Surface * >(argp3);
  {
    try {
      (arg1)->addSurface(arg2,arg3);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_removeSurface(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Cell *arg1 = (Cell *) 0 ;
  Surface *arg2 = (Surface *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "surface", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Cell_removeSurface",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_removeSurface" "', argument " "1"" of type '" "Cell *""'"); 
  }
  arg1 = reinterpret_cast< Cell * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Surface, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Cell_removeSurface" "', argument " "2"" of type '" "Surface *""'"); 
  }
  arg2 = reinterpret_cast< Surface * >(argp2);
  {
    try {
      (arg1)->removeSurface(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_addNeighborCell(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Cell *arg1 = (Cell *) 0 ;
  Cell *arg2 = (Cell *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "cell", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Cell_addNeighborCell",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_addNeighborCell" "', argument " "1"" of type '" "Cell *""'"); 
  }
  arg1 = reinterpret_cast< Cell * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Cell, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Cell_addNeighborCell" "', argument " "2"" of type '" "Cell *""'"); 
  }
  arg2 = reinterpret_cast< Cell * >(argp2);
  {
    try {
      (arg1)->addNeighborCell(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_isFissionable(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Cell *arg1 = (Cell *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Cell_isFissionable",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_isFissionable" "', argument " "1"" of type '" "Cell *""'"); 
  }
  arg1 = reinterpret_cast< Cell * >(argp1);
  {
    try {
      result = (bool)(arg1)->isFissionable();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_containsPoint(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Cell *arg1 = (Cell *) 0 ;
  Point *arg2 = (Point *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "point", NULL 
  };
  bool result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Cell_containsPoint",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_containsPoint" "', argument " "1"" of type '" "Cell *""'"); 
  }
  arg1 = reinterpret_cast< Cell * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Point, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Cell_containsPoint" "', argument " "2"" of type '" "Point *""'"); 
  }
  arg2 = reinterpret_cast< Point * >(argp2);
  {
    try {
      result = (bool)(arg1)->containsPoint(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_containsCoords(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Cell *arg1 = (Cell *) 0 ;
  LocalCoords *arg2 = (LocalCoords *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "coords", NULL 
  };
  bool result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Cell_containsCoords",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_containsCoords" "', argument " "1"" of type '" "Cell *""'"); 
  }
  arg1 = reinterpret_cast< Cell * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_LocalCoords, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Cell_containsCoords" "', argument " "2"" of type '" "LocalCoords *""'"); 
  }
  arg2 = reinterpret_cast< LocalCoords * >(argp2);
  {
    try {
      result = (bool)(arg1)->containsCoords(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_minSurfaceDist(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Cell *arg1 = (Cell *) 0 ;
  LocalCoords *arg2 = (LocalCoords *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "coords", NULL 
  };
  double result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Cell_minSurfaceDist",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_minSurfaceDist" "', argument " "1"" of type '" "Cell *""'"); 
  }
  arg1 = reinterpret_cast< Cell * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_LocalCoords, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Cell_minSurfaceDist" "', argument " "2"" of type '" "LocalCoords *""'"); 
  }
  arg2 = reinterpret_cast< LocalCoords * >(argp2);
  {
    try {
      result = (double)(arg1)->minSurfaceDist(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Cell *arg1 = (Cell *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Cell *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Cell_clone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_clone" "', argument " "1"" of type '" "Cell *""'"); 
  }
  arg1 = reinterpret_cast< Cell * >(argp1);
  {
    try {
      result = (Cell *)(arg1)->clone();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Cell, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_subdivideCell(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Cell *arg1 = (Cell *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "max_radius", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Cell_subdivideCell",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_subdivideCell" "', argument " "1"" of type '" "Cell *""'"); 
  }
  arg1 = reinterpret_cast< Cell * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Cell_subdivideCell" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->subdivideCell(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_buildNeighbors(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Cell *arg1 = (Cell *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Cell_buildNeighbors",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_buildNeighbors" "', argument " "1"" of type '" "Cell *""'"); 
  }
  arg1 = reinterpret_cast< Cell * >(argp1);
  {
    try {
      (arg1)->buildNeighbors();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_toString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Cell *arg1 = (Cell *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Cell_toString",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_toString" "', argument " "1"" of type '" "Cell *""'"); 
  }
  arg1 = reinterpret_cast< Cell * >(argp1);
  {
    try {
      result = (arg1)->toString();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new std::string(static_cast< const std::string& >(result))), SWIGTYPE_p_std__string, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_printString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Cell *arg1 = (Cell *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Cell_printString",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_printString" "', argument " "1"" of type '" "Cell *""'"); 
  }
  arg1 = reinterpret_cast< Cell * >(argp1);
  {
    try {
      (arg1)->printString();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Cell_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Cell, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_fsr_data__fsr_id_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fsr_data *arg1 = (fsr_data *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:fsr_data__fsr_id_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fsr_data, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fsr_data__fsr_id_set" "', argument " "1"" of type '" "fsr_data *""'"); 
  }
  arg1 = reinterpret_cast< fsr_data * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fsr_data__fsr_id_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->_fsr_id = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fsr_data__fsr_id_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fsr_data *arg1 = (fsr_data *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:fsr_data__fsr_id_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fsr_data, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fsr_data__fsr_id_get" "', argument " "1"" of type '" "fsr_data *""'"); 
  }
  arg1 = reinterpret_cast< fsr_data * >(argp1);
  result = (int) ((arg1)->_fsr_id);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fsr_data__cmfd_cell_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fsr_data *arg1 = (fsr_data *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:fsr_data__cmfd_cell_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fsr_data, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fsr_data__cmfd_cell_set" "', argument " "1"" of type '" "fsr_data *""'"); 
  }
  arg1 = reinterpret_cast< fsr_data * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fsr_data__cmfd_cell_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->_cmfd_cell = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fsr_data__cmfd_cell_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fsr_data *arg1 = (fsr_data *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:fsr_data__cmfd_cell_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fsr_data, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fsr_data__cmfd_cell_get" "', argument " "1"" of type '" "fsr_data *""'"); 
  }
  arg1 = reinterpret_cast< fsr_data * >(argp1);
  result = (int) ((arg1)->_cmfd_cell);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fsr_data__mat_id_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fsr_data *arg1 = (fsr_data *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:fsr_data__mat_id_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fsr_data, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fsr_data__mat_id_set" "', argument " "1"" of type '" "fsr_data *""'"); 
  }
  arg1 = reinterpret_cast< fsr_data * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fsr_data__mat_id_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->_mat_id = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fsr_data__mat_id_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fsr_data *arg1 = (fsr_data *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:fsr_data__mat_id_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fsr_data, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fsr_data__mat_id_get" "', argument " "1"" of type '" "fsr_data *""'"); 
  }
  arg1 = reinterpret_cast< fsr_data * >(argp1);
  result = (int) ((arg1)->_mat_id);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fsr_data__point_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fsr_data *arg1 = (fsr_data *) 0 ;
  Point *arg2 = (Point *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:fsr_data__point_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fsr_data, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fsr_data__point_set" "', argument " "1"" of type '" "fsr_data *""'"); 
  }
  arg1 = reinterpret_cast< fsr_data * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Point, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fsr_data__point_set" "', argument " "2"" of type '" "Point *""'"); 
  }
  arg2 = reinterpret_cast< Point * >(argp2);
  if (arg1) (arg1)->_point = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fsr_data__point_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fsr_data *arg1 = (fsr_data *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Point *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:fsr_data__point_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fsr_data, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fsr_data__point_get" "', argument " "1"" of type '" "fsr_data *""'"); 
  }
  arg1 = reinterpret_cast< fsr_data * >(argp1);
  result = (Point *) ((arg1)->_point);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Point, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fsr_data__centroid_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fsr_data *arg1 = (fsr_data *) 0 ;
  Point *arg2 = (Point *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:fsr_data__centroid_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fsr_data, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fsr_data__centroid_set" "', argument " "1"" of type '" "fsr_data *""'"); 
  }
  arg1 = reinterpret_cast< fsr_data * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Point, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fsr_data__centroid_set" "', argument " "2"" of type '" "Point *""'"); 
  }
  arg2 = reinterpret_cast< Point * >(argp2);
  if (arg1) (arg1)->_centroid = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fsr_data__centroid_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fsr_data *arg1 = (fsr_data *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Point *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:fsr_data__centroid_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fsr_data, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fsr_data__centroid_get" "', argument " "1"" of type '" "fsr_data *""'"); 
  }
  arg1 = reinterpret_cast< fsr_data * >(argp1);
  result = (Point *) ((arg1)->_centroid);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Point, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_fsr_data(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fsr_data *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_fsr_data")) SWIG_fail;
  {
    try {
      result = (fsr_data *)new fsr_data();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fsr_data, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_fsr_data(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fsr_data *arg1 = (fsr_data *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_fsr_data",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fsr_data, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_fsr_data" "', argument " "1"" of type '" "fsr_data *""'"); 
  }
  arg1 = reinterpret_cast< fsr_data * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *fsr_data_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_fsr_data, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_reset_auto_ids(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":reset_auto_ids")) SWIG_fail;
  {
    try {
      reset_auto_ids();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Geometry(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Geometry *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Geometry")) SWIG_fail;
  {
    try {
      result = (Geometry *)new Geometry();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Geometry, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Geometry(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Geometry *arg1 = (Geometry *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Geometry",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Geometry, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Geometry" "', argument " "1"" of type '" "Geometry *""'"); 
  }
  arg1 = reinterpret_cast< Geometry * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Geometry_getWidthX(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Geometry *arg1 = (Geometry *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Geometry_getWidthX",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Geometry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Geometry_getWidthX" "', argument " "1"" of type '" "Geometry *""'"); 
  }
  arg1 = reinterpret_cast< Geometry * >(argp1);
  {
    try {
      result = (double)(arg1)->getWidthX();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Geometry_getWidthY(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Geometry *arg1 = (Geometry *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Geometry_getWidthY",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Geometry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Geometry_getWidthY" "', argument " "1"" of type '" "Geometry *""'"); 
  }
  arg1 = reinterpret_cast< Geometry * >(argp1);
  {
    try {
      result = (double)(arg1)->getWidthY();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Geometry_getWidthZ(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Geometry *arg1 = (Geometry *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Geometry_getWidthZ",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Geometry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Geometry_getWidthZ" "', argument " "1"" of type '" "Geometry *""'"); 
  }
  arg1 = reinterpret_cast< Geometry * >(argp1);
  {
    try {
      result = (double)(arg1)->getWidthZ();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Geometry_getMinX(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Geometry *arg1 = (Geometry *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Geometry_getMinX",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Geometry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Geometry_getMinX" "', argument " "1"" of type '" "Geometry *""'"); 
  }
  arg1 = reinterpret_cast< Geometry * >(argp1);
  {
    try {
      result = (double)(arg1)->getMinX();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Geometry_getMaxX(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Geometry *arg1 = (Geometry *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Geometry_getMaxX",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Geometry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Geometry_getMaxX" "', argument " "1"" of type '" "Geometry *""'"); 
  }
  arg1 = reinterpret_cast< Geometry * >(argp1);
  {
    try {
      result = (double)(arg1)->getMaxX();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Geometry_getMinY(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Geometry *arg1 = (Geometry *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Geometry_getMinY",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Geometry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Geometry_getMinY" "', argument " "1"" of type '" "Geometry *""'"); 
  }
  arg1 = reinterpret_cast< Geometry * >(argp1);
  {
    try {
      result = (double)(arg1)->getMinY();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Geometry_getMaxY(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Geometry *arg1 = (Geometry *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Geometry_getMaxY",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Geometry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Geometry_getMaxY" "', argument " "1"" of type '" "Geometry *""'"); 
  }
  arg1 = reinterpret_cast< Geometry * >(argp1);
  {
    try {
      result = (double)(arg1)->getMaxY();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Geometry_getMinZ(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Geometry *arg1 = (Geometry *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Geometry_getMinZ",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Geometry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Geometry_getMinZ" "', argument " "1"" of type '" "Geometry *""'"); 
  }
  arg1 = reinterpret_cast< Geometry * >(argp1);
  {
    try {
      result = (double)(arg1)->getMinZ();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Geometry_getMaxZ(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Geometry *arg1 = (Geometry *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Geometry_getMaxZ",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Geometry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Geometry_getMaxZ" "', argument " "1"" of type '" "Geometry *""'"); 
  }
  arg1 = reinterpret_cast< Geometry * >(argp1);
  {
    try {
      result = (double)(arg1)->getMaxZ();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Geometry_getMinXBoundaryType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Geometry *arg1 = (Geometry *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  boundaryType result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Geometry_getMinXBoundaryType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Geometry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Geometry_getMinXBoundaryType" "', argument " "1"" of type '" "Geometry *""'"); 
  }
  arg1 = reinterpret_cast< Geometry * >(argp1);
  {
    try {
      result = (boundaryType)(arg1)->getMinXBoundaryType();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Geometry_getMaxXBoundaryType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Geometry *arg1 = (Geometry *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  boundaryType result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Geometry_getMaxXBoundaryType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Geometry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Geometry_getMaxXBoundaryType" "', argument " "1"" of type '" "Geometry *""'"); 
  }
  arg1 = reinterpret_cast< Geometry * >(argp1);
  {
    try {
      result = (boundaryType)(arg1)->getMaxXBoundaryType();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Geometry_getMinYBoundaryType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Geometry *arg1 = (Geometry *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  boundaryType result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Geometry_getMinYBoundaryType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Geometry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Geometry_getMinYBoundaryType" "', argument " "1"" of type '" "Geometry *""'"); 
  }
  arg1 = reinterpret_cast< Geometry * >(argp1);
  {
    try {
      result = (boundaryType)(arg1)->getMinYBoundaryType();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Geometry_getMaxYBoundaryType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Geometry *arg1 = (Geometry *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  boundaryType result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Geometry_getMaxYBoundaryType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Geometry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Geometry_getMaxYBoundaryType" "', argument " "1"" of type '" "Geometry *""'"); 
  }
  arg1 = reinterpret_cast< Geometry * >(argp1);
  {
    try {
      result = (boundaryType)(arg1)->getMaxYBoundaryType();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Geometry_getRootUniverse(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Geometry *arg1 = (Geometry *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Universe *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Geometry_getRootUniverse",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Geometry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Geometry_getRootUniverse" "', argument " "1"" of type '" "Geometry *""'"); 
  }
  arg1 = reinterpret_cast< Geometry * >(argp1);
  {
    try {
      result = (Universe *)(arg1)->getRootUniverse();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Universe, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Geometry_getNumFSRs(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Geometry *arg1 = (Geometry *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Geometry_getNumFSRs",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Geometry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Geometry_getNumFSRs" "', argument " "1"" of type '" "Geometry *""'"); 
  }
  arg1 = reinterpret_cast< Geometry * >(argp1);
  {
    try {
      result = (int)(arg1)->getNumFSRs();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Geometry_getNumEnergyGroups(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Geometry *arg1 = (Geometry *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Geometry_getNumEnergyGroups",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Geometry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Geometry_getNumEnergyGroups" "', argument " "1"" of type '" "Geometry *""'"); 
  }
  arg1 = reinterpret_cast< Geometry * >(argp1);
  {
    try {
      result = (int)(arg1)->getNumEnergyGroups();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Geometry_getNumMaterials(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Geometry *arg1 = (Geometry *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Geometry_getNumMaterials",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Geometry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Geometry_getNumMaterials" "', argument " "1"" of type '" "Geometry *""'"); 
  }
  arg1 = reinterpret_cast< Geometry * >(argp1);
  {
    try {
      result = (int)(arg1)->getNumMaterials();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Geometry_getNumCells(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Geometry *arg1 = (Geometry *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Geometry_getNumCells",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Geometry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Geometry_getNumCells" "', argument " "1"" of type '" "Geometry *""'"); 
  }
  arg1 = reinterpret_cast< Geometry * >(argp1);
  {
    try {
      result = (int)(arg1)->getNumCells();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Geometry_getAllMaterials(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Geometry *arg1 = (Geometry *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::map< int,Material *,std::less< int >,std::allocator< std::pair< int const,Material * > > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Geometry_getAllMaterials",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Geometry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Geometry_getAllMaterials" "', argument " "1"" of type '" "Geometry *""'"); 
  }
  arg1 = reinterpret_cast< Geometry * >(argp1);
  {
    try {
      result = (arg1)->getAllMaterials();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    resultobj = PyDict_New();
    int size = (&result)->size();
    
    std::map<int, Material*>::iterator iter;
    Material* mat;
    int mat_id;
    
    for (iter = (&result)->begin(); iter != (&result)->end(); ++iter) {
      mat_id = iter->first;
      mat = iter->second;
      PyObject* value =
      SWIG_NewPointerObj(SWIG_as_voidptr(mat), SWIGTYPE_p_Material, 0);
      PyDict_SetItem(resultobj, PyInt_FromLong(mat_id), value);
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Geometry_getAllSurfaces(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Geometry *arg1 = (Geometry *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::map< int,Surface *,std::less< int >,std::allocator< std::pair< int const,Surface * > > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Geometry_getAllSurfaces",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Geometry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Geometry_getAllSurfaces" "', argument " "1"" of type '" "Geometry *""'"); 
  }
  arg1 = reinterpret_cast< Geometry * >(argp1);
  {
    try {
      result = (arg1)->getAllSurfaces();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    resultobj = PyDict_New();
    int size = (&result)->size();
    
    std::map<int, Surface*>::iterator iter;
    Surface* surf;
    int surf_id;
    
    for (iter = (&result)->begin(); iter != (&result)->end(); ++iter) {
      surf_id = iter->first;
      surf = iter->second;
      PyObject* value =
      SWIG_NewPointerObj(SWIG_as_voidptr(surf),
        SWIGTYPE_p_Surface, 0);
      PyDict_SetItem(resultobj, PyInt_FromLong(surf_id), value);
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Geometry_getAllCells(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Geometry *arg1 = (Geometry *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::map< int,Cell *,std::less< int >,std::allocator< std::pair< int const,Cell * > > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Geometry_getAllCells",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Geometry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Geometry_getAllCells" "', argument " "1"" of type '" "Geometry *""'"); 
  }
  arg1 = reinterpret_cast< Geometry * >(argp1);
  {
    try {
      result = (arg1)->getAllCells();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    resultobj = PyDict_New();
    int size = (&result)->size();
    
    std::map<int, Cell*>::iterator iter;
    Cell* cell;
    int cell_id;
    
    for (iter = (&result)->begin(); iter != (&result)->end(); ++iter) {
      cell_id = iter->first;
      cell = iter->second;
      PyObject* value =
      SWIG_NewPointerObj(SWIG_as_voidptr(cell), SWIGTYPE_p_Cell, 0);
      PyDict_SetItem(resultobj, PyInt_FromLong(cell_id), value);
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Geometry_getAllMaterialCells(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Geometry *arg1 = (Geometry *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::map< int,Cell *,std::less< int >,std::allocator< std::pair< int const,Cell * > > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Geometry_getAllMaterialCells",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Geometry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Geometry_getAllMaterialCells" "', argument " "1"" of type '" "Geometry *""'"); 
  }
  arg1 = reinterpret_cast< Geometry * >(argp1);
  {
    try {
      result = (arg1)->getAllMaterialCells();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    resultobj = PyDict_New();
    int size = (&result)->size();
    
    std::map<int, Cell*>::iterator iter;
    Cell* cell;
    int cell_id;
    
    for (iter = (&result)->begin(); iter != (&result)->end(); ++iter) {
      cell_id = iter->first;
      cell = iter->second;
      PyObject* value =
      SWIG_NewPointerObj(SWIG_as_voidptr(cell), SWIGTYPE_p_Cell, 0);
      PyDict_SetItem(resultobj, PyInt_FromLong(cell_id), value);
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Geometry_getAllUniverses(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Geometry *arg1 = (Geometry *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::map< int,Universe *,std::less< int >,std::allocator< std::pair< int const,Universe * > > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Geometry_getAllUniverses",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Geometry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Geometry_getAllUniverses" "', argument " "1"" of type '" "Geometry *""'"); 
  }
  arg1 = reinterpret_cast< Geometry * >(argp1);
  {
    try {
      result = (arg1)->getAllUniverses();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    resultobj = PyDict_New();
    int size = (&result)->size();
    
    std::map<int, Universe*>::iterator iter;
    Universe* univ;
    int univ_id;
    
    for (iter = (&result)->begin(); iter != (&result)->end(); ++iter) {
      univ_id = iter->first;
      univ = iter->second;
      PyObject* value =
      SWIG_NewPointerObj(SWIG_as_voidptr(univ), SWIGTYPE_p_Universe, 0);
      PyDict_SetItem(resultobj, PyInt_FromLong(univ_id), value);
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Geometry_setRootUniverse(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Geometry *arg1 = (Geometry *) 0 ;
  Universe *arg2 = (Universe *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "root_universe", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Geometry_setRootUniverse",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Geometry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Geometry_setRootUniverse" "', argument " "1"" of type '" "Geometry *""'"); 
  }
  arg1 = reinterpret_cast< Geometry * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Universe, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Geometry_setRootUniverse" "', argument " "2"" of type '" "Universe *""'"); 
  }
  arg2 = reinterpret_cast< Universe * >(argp2);
  {
    try {
      (arg1)->setRootUniverse(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Geometry_getCmfd(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Geometry *arg1 = (Geometry *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Cmfd *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Geometry_getCmfd",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Geometry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Geometry_getCmfd" "', argument " "1"" of type '" "Geometry *""'"); 
  }
  arg1 = reinterpret_cast< Geometry * >(argp1);
  {
    try {
      result = (Cmfd *)(arg1)->getCmfd();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Cmfd, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Geometry_getFSRsToKeys(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Geometry *arg1 = (Geometry *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string,std::allocator< std::string > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Geometry_getFSRsToKeys",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Geometry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Geometry_getFSRsToKeys" "', argument " "1"" of type '" "Geometry *""'"); 
  }
  arg1 = reinterpret_cast< Geometry * >(argp1);
  {
    try {
      result = (std::vector< std::string,std::allocator< std::string > > *) &(arg1)->getFSRsToKeys();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Geometry_getFSRId(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Geometry *arg1 = (Geometry *) 0 ;
  LocalCoords *arg2 = (LocalCoords *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "coords", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Geometry_getFSRId",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Geometry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Geometry_getFSRId" "', argument " "1"" of type '" "Geometry *""'"); 
  }
  arg1 = reinterpret_cast< Geometry * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_LocalCoords, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Geometry_getFSRId" "', argument " "2"" of type '" "LocalCoords *""'"); 
  }
  arg2 = reinterpret_cast< LocalCoords * >(argp2);
  {
    try {
      result = (int)(arg1)->getFSRId(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Geometry_getFSRPoint(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Geometry *arg1 = (Geometry *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "fsr_id", NULL 
  };
  Point *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Geometry_getFSRPoint",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Geometry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Geometry_getFSRPoint" "', argument " "1"" of type '" "Geometry *""'"); 
  }
  arg1 = reinterpret_cast< Geometry * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Geometry_getFSRPoint" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (Point *)(arg1)->getFSRPoint(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Point, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Geometry_getFSRCentroid(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Geometry *arg1 = (Geometry *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "fsr_id", NULL 
  };
  Point *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Geometry_getFSRCentroid",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Geometry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Geometry_getFSRCentroid" "', argument " "1"" of type '" "Geometry *""'"); 
  }
  arg1 = reinterpret_cast< Geometry * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Geometry_getFSRCentroid" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (Point *)(arg1)->getFSRCentroid(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Point, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Geometry_getFSRKey(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Geometry *arg1 = (Geometry *) 0 ;
  LocalCoords *arg2 = (LocalCoords *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "coords", NULL 
  };
  std::string result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Geometry_getFSRKey",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Geometry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Geometry_getFSRKey" "', argument " "1"" of type '" "Geometry *""'"); 
  }
  arg1 = reinterpret_cast< Geometry * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_LocalCoords, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Geometry_getFSRKey" "', argument " "2"" of type '" "LocalCoords *""'"); 
  }
  arg2 = reinterpret_cast< LocalCoords * >(argp2);
  {
    try {
      result = (arg1)->getFSRKey(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new std::string(static_cast< const std::string& >(result))), SWIGTYPE_p_std__string, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Geometry_getFSRKeysMap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Geometry *arg1 = (Geometry *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ParallelHashMap< std::string,fsr_data * > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Geometry_getFSRKeysMap",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Geometry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Geometry_getFSRKeysMap" "', argument " "1"" of type '" "Geometry *""'"); 
  }
  arg1 = reinterpret_cast< Geometry * >(argp1);
  {
    try {
      result = (ParallelHashMap< std::string,fsr_data * > *) &(arg1)->getFSRKeysMap();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ParallelHashMapT_std__string_fsr_data_p_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Geometry_matchFSRstoCells(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Geometry *arg1 = (Geometry *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Geometry_matchFSRstoCells",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Geometry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Geometry_matchFSRstoCells" "', argument " "1"" of type '" "Geometry *""'"); 
  }
  arg1 = reinterpret_cast< Geometry * >(argp1);
  {
    try {
      (arg1)->matchFSRstoCells();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Geometry_getMapFSRstoCells(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Geometry *arg1 = (Geometry *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::map< int,Cell *,std::less< int >,std::allocator< std::pair< int const,Cell * > > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Geometry_getMapFSRstoCells",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Geometry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Geometry_getMapFSRstoCells" "', argument " "1"" of type '" "Geometry *""'"); 
  }
  arg1 = reinterpret_cast< Geometry * >(argp1);
  {
    try {
      result = (std::map< int,Cell *,std::less< int >,std::allocator< std::pair< int const,Cell * > > > *) &(arg1)->getMapFSRstoCells();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__mapT_int_Cell_p_std__lessT_int_t_std__allocatorT_std__pairT_int_const_Cell_p_t_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Geometry_setCmfd(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Geometry *arg1 = (Geometry *) 0 ;
  Cmfd *arg2 = (Cmfd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "cmfd", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Geometry_setCmfd",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Geometry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Geometry_setCmfd" "', argument " "1"" of type '" "Geometry *""'"); 
  }
  arg1 = reinterpret_cast< Geometry * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Cmfd, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Geometry_setCmfd" "', argument " "2"" of type '" "Cmfd *""'"); 
  }
  arg2 = reinterpret_cast< Cmfd * >(argp2);
  {
    try {
      (arg1)->setCmfd(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Geometry_findCellContainingCoords(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Geometry *arg1 = (Geometry *) 0 ;
  LocalCoords *arg2 = (LocalCoords *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "coords", NULL 
  };
  Cell *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Geometry_findCellContainingCoords",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Geometry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Geometry_findCellContainingCoords" "', argument " "1"" of type '" "Geometry *""'"); 
  }
  arg1 = reinterpret_cast< Geometry * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_LocalCoords, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Geometry_findCellContainingCoords" "', argument " "2"" of type '" "LocalCoords *""'"); 
  }
  arg2 = reinterpret_cast< LocalCoords * >(argp2);
  {
    try {
      result = (Cell *)(arg1)->findCellContainingCoords(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Cell, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Geometry_findFSRMaterial(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Geometry *arg1 = (Geometry *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "fsr_id", NULL 
  };
  Material *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Geometry_findFSRMaterial",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Geometry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Geometry_findFSRMaterial" "', argument " "1"" of type '" "Geometry *""'"); 
  }
  arg1 = reinterpret_cast< Geometry * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Geometry_findFSRMaterial" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (Material *)(arg1)->findFSRMaterial(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Material, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Geometry_findFSRId(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Geometry *arg1 = (Geometry *) 0 ;
  LocalCoords *arg2 = (LocalCoords *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "coords", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Geometry_findFSRId",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Geometry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Geometry_findFSRId" "', argument " "1"" of type '" "Geometry *""'"); 
  }
  arg1 = reinterpret_cast< Geometry * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_LocalCoords, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Geometry_findFSRId" "', argument " "2"" of type '" "LocalCoords *""'"); 
  }
  arg2 = reinterpret_cast< LocalCoords * >(argp2);
  {
    try {
      result = (int)(arg1)->findFSRId(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Geometry_findCellContainingFSR(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Geometry *arg1 = (Geometry *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "fsr_id", NULL 
  };
  Cell *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Geometry_findCellContainingFSR",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Geometry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Geometry_findCellContainingFSR" "', argument " "1"" of type '" "Geometry *""'"); 
  }
  arg1 = reinterpret_cast< Geometry * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Geometry_findCellContainingFSR" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (Cell *)(arg1)->findCellContainingFSR(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Cell, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Geometry_subdivideCells(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Geometry *arg1 = (Geometry *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Geometry_subdivideCells",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Geometry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Geometry_subdivideCells" "', argument " "1"" of type '" "Geometry *""'"); 
  }
  arg1 = reinterpret_cast< Geometry * >(argp1);
  {
    try {
      (arg1)->subdivideCells();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Geometry_initializeFSRs(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Geometry *arg1 = (Geometry *) 0 ;
  bool arg2 = (bool) false ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "neighbor_cells", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|O:Geometry_initializeFSRs",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Geometry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Geometry_initializeFSRs" "', argument " "1"" of type '" "Geometry *""'"); 
  }
  arg1 = reinterpret_cast< Geometry * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_bool(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Geometry_initializeFSRs" "', argument " "2"" of type '" "bool""'");
    } 
    arg2 = static_cast< bool >(val2);
  }
  {
    try {
      (arg1)->initializeFSRs(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Geometry_segmentize(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Geometry *arg1 = (Geometry *) 0 ;
  Track *arg2 = (Track *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "track", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Geometry_segmentize",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Geometry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Geometry_segmentize" "', argument " "1"" of type '" "Geometry *""'"); 
  }
  arg1 = reinterpret_cast< Geometry * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Track, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Geometry_segmentize" "', argument " "2"" of type '" "Track *""'"); 
  }
  arg2 = reinterpret_cast< Track * >(argp2);
  {
    try {
      (arg1)->segmentize(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Geometry_computeFissionability(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Geometry *arg1 = (Geometry *) 0 ;
  Universe *arg2 = (Universe *) NULL ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "univ", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|O:Geometry_computeFissionability",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Geometry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Geometry_computeFissionability" "', argument " "1"" of type '" "Geometry *""'"); 
  }
  arg1 = reinterpret_cast< Geometry * >(argp1);
  if (obj1) {
    res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Universe, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Geometry_computeFissionability" "', argument " "2"" of type '" "Universe *""'"); 
    }
    arg2 = reinterpret_cast< Universe * >(argp2);
  }
  {
    try {
      (arg1)->computeFissionability(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Geometry_getSpatialDataOnGrid(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Geometry *arg1 = (Geometry *) 0 ;
  std::vector< double,std::allocator< double > > arg2 ;
  std::vector< double,std::allocator< double > > arg3 ;
  double arg4 ;
  char *arg5 = (char *) "material" ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "grid_x",(char *) "grid_y",(char *) "zcoord",(char *) "domain_type", NULL 
  };
  std::vector< int,std::allocator< int > > result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOO|O:Geometry_getSpatialDataOnGrid",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Geometry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Geometry_getSpatialDataOnGrid" "', argument " "1"" of type '" "Geometry *""'"); 
  }
  arg1 = reinterpret_cast< Geometry * >(argp1);
  {
    std::vector<double,std::allocator< double > > *ptr = (std::vector<double,std::allocator< double > > *)0;
    int res = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Geometry_getSpatialDataOnGrid" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > >""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector<double,std::allocator< double > > *ptr = (std::vector<double,std::allocator< double > > *)0;
    int res = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Geometry_getSpatialDataOnGrid" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > >""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Geometry_getSpatialDataOnGrid" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  if (obj4) {
    res5 = SWIG_AsCharPtrAndSize(obj4, &buf5, NULL, &alloc5);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Geometry_getSpatialDataOnGrid" "', argument " "5"" of type '" "char const *""'");
    }
    arg5 = reinterpret_cast< char * >(buf5);
  }
  {
    try {
      result = (arg1)->getSpatialDataOnGrid(arg2,arg3,arg4,(char const *)arg5);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = swig::from(static_cast< std::vector<int,std::allocator< int > > >(result));
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return resultobj;
fail:
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Geometry_toString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Geometry *arg1 = (Geometry *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Geometry_toString",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Geometry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Geometry_toString" "', argument " "1"" of type '" "Geometry *""'"); 
  }
  arg1 = reinterpret_cast< Geometry * >(argp1);
  {
    try {
      result = (arg1)->toString();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new std::string(static_cast< const std::string& >(result))), SWIGTYPE_p_std__string, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Geometry_printString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Geometry *arg1 = (Geometry *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Geometry_printString",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Geometry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Geometry_printString" "', argument " "1"" of type '" "Geometry *""'"); 
  }
  arg1 = reinterpret_cast< Geometry * >(argp1);
  {
    try {
      (arg1)->printString();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Geometry_initializeCmfd(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Geometry *arg1 = (Geometry *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Geometry_initializeCmfd",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Geometry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Geometry_initializeCmfd" "', argument " "1"" of type '" "Geometry *""'"); 
  }
  arg1 = reinterpret_cast< Geometry * >(argp1);
  {
    try {
      (arg1)->initializeCmfd();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Geometry_withinBounds(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Geometry *arg1 = (Geometry *) 0 ;
  LocalCoords *arg2 = (LocalCoords *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "coords", NULL 
  };
  bool result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Geometry_withinBounds",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Geometry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Geometry_withinBounds" "', argument " "1"" of type '" "Geometry *""'"); 
  }
  arg1 = reinterpret_cast< Geometry * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_LocalCoords, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Geometry_withinBounds" "', argument " "2"" of type '" "LocalCoords *""'"); 
  }
  arg2 = reinterpret_cast< LocalCoords * >(argp2);
  {
    try {
      result = (bool)(arg1)->withinBounds(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Geometry_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Geometry, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *UNIV_swigconstant(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *module;
  PyObject *d;
  if (!PyArg_ParseTuple(args,(char*)"O:swigconstant", &module)) return NULL;
  d = PyModule_GetDict(module);
  if (!d) return NULL;
  SWIG_Python_SetConstant(d, "UNIV",SWIG_From_int(static_cast< int >(UNIV)));
  return SWIG_Py_Void();
}


SWIGINTERN PyObject *LAT_swigconstant(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *module;
  PyObject *d;
  if (!PyArg_ParseTuple(args,(char*)"O:swigconstant", &module)) return NULL;
  d = PyModule_GetDict(module);
  if (!d) return NULL;
  SWIG_Python_SetConstant(d, "LAT",SWIG_From_int(static_cast< int >(LAT)));
  return SWIG_Py_Void();
}


SWIGINTERN PyObject *_wrap_new_LocalCoords(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "x",(char *) "y",(char *) "z", NULL 
  };
  LocalCoords *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:new_LocalCoords",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_LocalCoords" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_LocalCoords" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_LocalCoords" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (LocalCoords *)new LocalCoords(arg1,arg2,arg3);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_LocalCoords, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_LocalCoords(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LocalCoords *arg1 = (LocalCoords *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_LocalCoords",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LocalCoords, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_LocalCoords" "', argument " "1"" of type '" "LocalCoords *""'"); 
  }
  arg1 = reinterpret_cast< LocalCoords * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocalCoords_getType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LocalCoords *arg1 = (LocalCoords *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  coordType result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LocalCoords_getType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LocalCoords, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocalCoords_getType" "', argument " "1"" of type '" "LocalCoords *""'"); 
  }
  arg1 = reinterpret_cast< LocalCoords * >(argp1);
  {
    try {
      result = (coordType)(arg1)->getType();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocalCoords_getUniverse(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LocalCoords *arg1 = (LocalCoords *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Universe *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LocalCoords_getUniverse",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LocalCoords, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocalCoords_getUniverse" "', argument " "1"" of type '" "LocalCoords const *""'"); 
  }
  arg1 = reinterpret_cast< LocalCoords * >(argp1);
  {
    try {
      result = (Universe *)((LocalCoords const *)arg1)->getUniverse();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Universe, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocalCoords_getCell(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LocalCoords *arg1 = (LocalCoords *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Cell *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LocalCoords_getCell",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LocalCoords, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocalCoords_getCell" "', argument " "1"" of type '" "LocalCoords const *""'"); 
  }
  arg1 = reinterpret_cast< LocalCoords * >(argp1);
  {
    try {
      result = (Cell *)((LocalCoords const *)arg1)->getCell();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Cell, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocalCoords_getLattice(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LocalCoords *arg1 = (LocalCoords *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Lattice *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LocalCoords_getLattice",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LocalCoords, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocalCoords_getLattice" "', argument " "1"" of type '" "LocalCoords const *""'"); 
  }
  arg1 = reinterpret_cast< LocalCoords * >(argp1);
  {
    try {
      result = (Lattice *)((LocalCoords const *)arg1)->getLattice();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Lattice, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocalCoords_getLatticeX(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LocalCoords *arg1 = (LocalCoords *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LocalCoords_getLatticeX",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LocalCoords, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocalCoords_getLatticeX" "', argument " "1"" of type '" "LocalCoords const *""'"); 
  }
  arg1 = reinterpret_cast< LocalCoords * >(argp1);
  {
    try {
      result = (int)((LocalCoords const *)arg1)->getLatticeX();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocalCoords_getLatticeY(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LocalCoords *arg1 = (LocalCoords *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LocalCoords_getLatticeY",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LocalCoords, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocalCoords_getLatticeY" "', argument " "1"" of type '" "LocalCoords const *""'"); 
  }
  arg1 = reinterpret_cast< LocalCoords * >(argp1);
  {
    try {
      result = (int)((LocalCoords const *)arg1)->getLatticeY();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocalCoords_getLatticeZ(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LocalCoords *arg1 = (LocalCoords *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LocalCoords_getLatticeZ",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LocalCoords, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocalCoords_getLatticeZ" "', argument " "1"" of type '" "LocalCoords const *""'"); 
  }
  arg1 = reinterpret_cast< LocalCoords * >(argp1);
  {
    try {
      result = (int)((LocalCoords const *)arg1)->getLatticeZ();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocalCoords_getX(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LocalCoords *arg1 = (LocalCoords *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LocalCoords_getX",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LocalCoords, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocalCoords_getX" "', argument " "1"" of type '" "LocalCoords const *""'"); 
  }
  arg1 = reinterpret_cast< LocalCoords * >(argp1);
  {
    try {
      result = (double)((LocalCoords const *)arg1)->getX();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocalCoords_getY(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LocalCoords *arg1 = (LocalCoords *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LocalCoords_getY",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LocalCoords, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocalCoords_getY" "', argument " "1"" of type '" "LocalCoords const *""'"); 
  }
  arg1 = reinterpret_cast< LocalCoords * >(argp1);
  {
    try {
      result = (double)((LocalCoords const *)arg1)->getY();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocalCoords_getZ(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LocalCoords *arg1 = (LocalCoords *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LocalCoords_getZ",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LocalCoords, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocalCoords_getZ" "', argument " "1"" of type '" "LocalCoords const *""'"); 
  }
  arg1 = reinterpret_cast< LocalCoords * >(argp1);
  {
    try {
      result = (double)((LocalCoords const *)arg1)->getZ();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocalCoords_getPhi(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LocalCoords *arg1 = (LocalCoords *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LocalCoords_getPhi",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LocalCoords, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocalCoords_getPhi" "', argument " "1"" of type '" "LocalCoords const *""'"); 
  }
  arg1 = reinterpret_cast< LocalCoords * >(argp1);
  {
    try {
      result = (double)((LocalCoords const *)arg1)->getPhi();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocalCoords_getPoint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LocalCoords *arg1 = (LocalCoords *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Point *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LocalCoords_getPoint",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LocalCoords, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocalCoords_getPoint" "', argument " "1"" of type '" "LocalCoords *""'"); 
  }
  arg1 = reinterpret_cast< LocalCoords * >(argp1);
  {
    try {
      result = (Point *)(arg1)->getPoint();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Point, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocalCoords_getNext(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LocalCoords *arg1 = (LocalCoords *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  LocalCoords *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LocalCoords_getNext",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LocalCoords, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocalCoords_getNext" "', argument " "1"" of type '" "LocalCoords const *""'"); 
  }
  arg1 = reinterpret_cast< LocalCoords * >(argp1);
  {
    try {
      result = (LocalCoords *)((LocalCoords const *)arg1)->getNext();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_LocalCoords, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocalCoords_getPrev(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LocalCoords *arg1 = (LocalCoords *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  LocalCoords *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LocalCoords_getPrev",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LocalCoords, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocalCoords_getPrev" "', argument " "1"" of type '" "LocalCoords const *""'"); 
  }
  arg1 = reinterpret_cast< LocalCoords * >(argp1);
  {
    try {
      result = (LocalCoords *)((LocalCoords const *)arg1)->getPrev();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_LocalCoords, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocalCoords_setType(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  LocalCoords *arg1 = (LocalCoords *) 0 ;
  coordType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "type", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:LocalCoords_setType",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LocalCoords, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocalCoords_setType" "', argument " "1"" of type '" "LocalCoords *""'"); 
  }
  arg1 = reinterpret_cast< LocalCoords * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LocalCoords_setType" "', argument " "2"" of type '" "coordType""'");
  } 
  arg2 = static_cast< coordType >(val2);
  {
    try {
      (arg1)->setType(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocalCoords_setUniverse(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  LocalCoords *arg1 = (LocalCoords *) 0 ;
  Universe *arg2 = (Universe *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "universe", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:LocalCoords_setUniverse",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LocalCoords, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocalCoords_setUniverse" "', argument " "1"" of type '" "LocalCoords *""'"); 
  }
  arg1 = reinterpret_cast< LocalCoords * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Universe, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LocalCoords_setUniverse" "', argument " "2"" of type '" "Universe *""'"); 
  }
  arg2 = reinterpret_cast< Universe * >(argp2);
  {
    try {
      (arg1)->setUniverse(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocalCoords_setCell(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  LocalCoords *arg1 = (LocalCoords *) 0 ;
  Cell *arg2 = (Cell *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "cell", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:LocalCoords_setCell",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LocalCoords, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocalCoords_setCell" "', argument " "1"" of type '" "LocalCoords *""'"); 
  }
  arg1 = reinterpret_cast< LocalCoords * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Cell, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LocalCoords_setCell" "', argument " "2"" of type '" "Cell *""'"); 
  }
  arg2 = reinterpret_cast< Cell * >(argp2);
  {
    try {
      (arg1)->setCell(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocalCoords_setLattice(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  LocalCoords *arg1 = (LocalCoords *) 0 ;
  Lattice *arg2 = (Lattice *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "lattice", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:LocalCoords_setLattice",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LocalCoords, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocalCoords_setLattice" "', argument " "1"" of type '" "LocalCoords *""'"); 
  }
  arg1 = reinterpret_cast< LocalCoords * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Lattice, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LocalCoords_setLattice" "', argument " "2"" of type '" "Lattice *""'"); 
  }
  arg2 = reinterpret_cast< Lattice * >(argp2);
  {
    try {
      (arg1)->setLattice(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocalCoords_setLatticeX(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  LocalCoords *arg1 = (LocalCoords *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "lattice_x", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:LocalCoords_setLatticeX",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LocalCoords, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocalCoords_setLatticeX" "', argument " "1"" of type '" "LocalCoords *""'"); 
  }
  arg1 = reinterpret_cast< LocalCoords * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LocalCoords_setLatticeX" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->setLatticeX(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocalCoords_setLatticeY(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  LocalCoords *arg1 = (LocalCoords *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "lattice_y", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:LocalCoords_setLatticeY",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LocalCoords, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocalCoords_setLatticeY" "', argument " "1"" of type '" "LocalCoords *""'"); 
  }
  arg1 = reinterpret_cast< LocalCoords * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LocalCoords_setLatticeY" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->setLatticeY(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocalCoords_setLatticeZ(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  LocalCoords *arg1 = (LocalCoords *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "lattice_z", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:LocalCoords_setLatticeZ",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LocalCoords, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocalCoords_setLatticeZ" "', argument " "1"" of type '" "LocalCoords *""'"); 
  }
  arg1 = reinterpret_cast< LocalCoords * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LocalCoords_setLatticeZ" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->setLatticeZ(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocalCoords_setX(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  LocalCoords *arg1 = (LocalCoords *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "x", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:LocalCoords_setX",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LocalCoords, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocalCoords_setX" "', argument " "1"" of type '" "LocalCoords *""'"); 
  }
  arg1 = reinterpret_cast< LocalCoords * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LocalCoords_setX" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setX(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocalCoords_setY(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  LocalCoords *arg1 = (LocalCoords *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "y", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:LocalCoords_setY",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LocalCoords, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocalCoords_setY" "', argument " "1"" of type '" "LocalCoords *""'"); 
  }
  arg1 = reinterpret_cast< LocalCoords * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LocalCoords_setY" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setY(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocalCoords_setZ(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  LocalCoords *arg1 = (LocalCoords *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "z", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:LocalCoords_setZ",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LocalCoords, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocalCoords_setZ" "', argument " "1"" of type '" "LocalCoords *""'"); 
  }
  arg1 = reinterpret_cast< LocalCoords * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LocalCoords_setZ" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setZ(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocalCoords_setPhi(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  LocalCoords *arg1 = (LocalCoords *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "phi", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:LocalCoords_setPhi",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LocalCoords, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocalCoords_setPhi" "', argument " "1"" of type '" "LocalCoords *""'"); 
  }
  arg1 = reinterpret_cast< LocalCoords * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LocalCoords_setPhi" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setPhi(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocalCoords_incrementPhi(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  LocalCoords *arg1 = (LocalCoords *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "phi", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:LocalCoords_incrementPhi",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LocalCoords, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocalCoords_incrementPhi" "', argument " "1"" of type '" "LocalCoords *""'"); 
  }
  arg1 = reinterpret_cast< LocalCoords * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LocalCoords_incrementPhi" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->incrementPhi(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocalCoords_setNext(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  LocalCoords *arg1 = (LocalCoords *) 0 ;
  LocalCoords *arg2 = (LocalCoords *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "next", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:LocalCoords_setNext",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LocalCoords, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocalCoords_setNext" "', argument " "1"" of type '" "LocalCoords *""'"); 
  }
  arg1 = reinterpret_cast< LocalCoords * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_LocalCoords, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LocalCoords_setNext" "', argument " "2"" of type '" "LocalCoords *""'"); 
  }
  arg2 = reinterpret_cast< LocalCoords * >(argp2);
  {
    try {
      (arg1)->setNext(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocalCoords_setPrev(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  LocalCoords *arg1 = (LocalCoords *) 0 ;
  LocalCoords *arg2 = (LocalCoords *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "coords", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:LocalCoords_setPrev",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LocalCoords, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocalCoords_setPrev" "', argument " "1"" of type '" "LocalCoords *""'"); 
  }
  arg1 = reinterpret_cast< LocalCoords * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_LocalCoords, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LocalCoords_setPrev" "', argument " "2"" of type '" "LocalCoords *""'"); 
  }
  arg2 = reinterpret_cast< LocalCoords * >(argp2);
  {
    try {
      (arg1)->setPrev(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocalCoords_getLowestLevel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LocalCoords *arg1 = (LocalCoords *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  LocalCoords *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LocalCoords_getLowestLevel",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LocalCoords, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocalCoords_getLowestLevel" "', argument " "1"" of type '" "LocalCoords *""'"); 
  }
  arg1 = reinterpret_cast< LocalCoords * >(argp1);
  {
    try {
      result = (LocalCoords *)(arg1)->getLowestLevel();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_LocalCoords, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocalCoords_getHighestLevel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LocalCoords *arg1 = (LocalCoords *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  LocalCoords *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LocalCoords_getHighestLevel",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LocalCoords, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocalCoords_getHighestLevel" "', argument " "1"" of type '" "LocalCoords *""'"); 
  }
  arg1 = reinterpret_cast< LocalCoords * >(argp1);
  {
    try {
      result = (LocalCoords *)(arg1)->getHighestLevel();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_LocalCoords, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocalCoords_adjustCoords(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  LocalCoords *arg1 = (LocalCoords *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "delta", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:LocalCoords_adjustCoords",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LocalCoords, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocalCoords_adjustCoords" "', argument " "1"" of type '" "LocalCoords *""'"); 
  }
  arg1 = reinterpret_cast< LocalCoords * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LocalCoords_adjustCoords" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->adjustCoords(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocalCoords_updateMostLocal(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  LocalCoords *arg1 = (LocalCoords *) 0 ;
  Point *arg2 = (Point *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "point", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:LocalCoords_updateMostLocal",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LocalCoords, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocalCoords_updateMostLocal" "', argument " "1"" of type '" "LocalCoords *""'"); 
  }
  arg1 = reinterpret_cast< LocalCoords * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Point, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LocalCoords_updateMostLocal" "', argument " "2"" of type '" "Point *""'"); 
  }
  arg2 = reinterpret_cast< Point * >(argp2);
  {
    try {
      (arg1)->updateMostLocal(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocalCoords_prune(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LocalCoords *arg1 = (LocalCoords *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LocalCoords_prune",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LocalCoords, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocalCoords_prune" "', argument " "1"" of type '" "LocalCoords *""'"); 
  }
  arg1 = reinterpret_cast< LocalCoords * >(argp1);
  {
    try {
      (arg1)->prune();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocalCoords_copyCoords(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  LocalCoords *arg1 = (LocalCoords *) 0 ;
  LocalCoords *arg2 = (LocalCoords *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "coords", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:LocalCoords_copyCoords",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LocalCoords, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocalCoords_copyCoords" "', argument " "1"" of type '" "LocalCoords *""'"); 
  }
  arg1 = reinterpret_cast< LocalCoords * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_LocalCoords, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LocalCoords_copyCoords" "', argument " "2"" of type '" "LocalCoords *""'"); 
  }
  arg2 = reinterpret_cast< LocalCoords * >(argp2);
  {
    try {
      (arg1)->copyCoords(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocalCoords_toString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LocalCoords *arg1 = (LocalCoords *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LocalCoords_toString",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LocalCoords, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocalCoords_toString" "', argument " "1"" of type '" "LocalCoords *""'"); 
  }
  arg1 = reinterpret_cast< LocalCoords * >(argp1);
  {
    try {
      result = (arg1)->toString();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new std::string(static_cast< const std::string& >(result))), SWIGTYPE_p_std__string, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *LocalCoords_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_LocalCoords, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *DEBUG_swigconstant(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *module;
  PyObject *d;
  if (!PyArg_ParseTuple(args,(char*)"O:swigconstant", &module)) return NULL;
  d = PyModule_GetDict(module);
  if (!d) return NULL;
  SWIG_Python_SetConstant(d, "DEBUG",SWIG_From_int(static_cast< int >(DEBUG)));
  return SWIG_Py_Void();
}


SWIGINTERN PyObject *INFO_swigconstant(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *module;
  PyObject *d;
  if (!PyArg_ParseTuple(args,(char*)"O:swigconstant", &module)) return NULL;
  d = PyModule_GetDict(module);
  if (!d) return NULL;
  SWIG_Python_SetConstant(d, "INFO",SWIG_From_int(static_cast< int >(INFO)));
  return SWIG_Py_Void();
}


SWIGINTERN PyObject *NORMAL_swigconstant(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *module;
  PyObject *d;
  if (!PyArg_ParseTuple(args,(char*)"O:swigconstant", &module)) return NULL;
  d = PyModule_GetDict(module);
  if (!d) return NULL;
  SWIG_Python_SetConstant(d, "NORMAL",SWIG_From_int(static_cast< int >(NORMAL)));
  return SWIG_Py_Void();
}


SWIGINTERN PyObject *SEPARATOR_swigconstant(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *module;
  PyObject *d;
  if (!PyArg_ParseTuple(args,(char*)"O:swigconstant", &module)) return NULL;
  d = PyModule_GetDict(module);
  if (!d) return NULL;
  SWIG_Python_SetConstant(d, "SEPARATOR",SWIG_From_int(static_cast< int >(SEPARATOR)));
  return SWIG_Py_Void();
}


SWIGINTERN PyObject *HEADER_swigconstant(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *module;
  PyObject *d;
  if (!PyArg_ParseTuple(args,(char*)"O:swigconstant", &module)) return NULL;
  d = PyModule_GetDict(module);
  if (!d) return NULL;
  SWIG_Python_SetConstant(d, "HEADER",SWIG_From_int(static_cast< int >(HEADER)));
  return SWIG_Py_Void();
}


SWIGINTERN PyObject *TITLE_swigconstant(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *module;
  PyObject *d;
  if (!PyArg_ParseTuple(args,(char*)"O:swigconstant", &module)) return NULL;
  d = PyModule_GetDict(module);
  if (!d) return NULL;
  SWIG_Python_SetConstant(d, "TITLE",SWIG_From_int(static_cast< int >(TITLE)));
  return SWIG_Py_Void();
}


SWIGINTERN PyObject *WARNING_swigconstant(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *module;
  PyObject *d;
  if (!PyArg_ParseTuple(args,(char*)"O:swigconstant", &module)) return NULL;
  d = PyModule_GetDict(module);
  if (!d) return NULL;
  SWIG_Python_SetConstant(d, "WARNING",SWIG_From_int(static_cast< int >(WARNING)));
  return SWIG_Py_Void();
}


SWIGINTERN PyObject *CRITICAL_swigconstant(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *module;
  PyObject *d;
  if (!PyArg_ParseTuple(args,(char*)"O:swigconstant", &module)) return NULL;
  d = PyModule_GetDict(module);
  if (!d) return NULL;
  SWIG_Python_SetConstant(d, "CRITICAL",SWIG_From_int(static_cast< int >(CRITICAL)));
  return SWIG_Py_Void();
}


SWIGINTERN PyObject *RESULT_swigconstant(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *module;
  PyObject *d;
  if (!PyArg_ParseTuple(args,(char*)"O:swigconstant", &module)) return NULL;
  d = PyModule_GetDict(module);
  if (!d) return NULL;
  SWIG_Python_SetConstant(d, "RESULT",SWIG_From_int(static_cast< int >(RESULT)));
  return SWIG_Py_Void();
}


SWIGINTERN PyObject *ERROR_swigconstant(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *module;
  PyObject *d;
  if (!PyArg_ParseTuple(args,(char*)"O:swigconstant", &module)) return NULL;
  d = PyModule_GetDict(module);
  if (!d) return NULL;
  SWIG_Python_SetConstant(d, "ERROR",SWIG_From_int(static_cast< int >(ERROR)));
  return SWIG_Py_Void();
}


SWIGINTERN PyObject *_wrap_set_err(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  PyObject * obj0 = 0 ;
  char *  kwnames[] = {
    (char *) "msg", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:set_err",kwnames,&obj0)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "set_err" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  {
    try {
      set_err((char const *)arg1);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_initialize_logger(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":initialize_logger")) SWIG_fail;
  {
    try {
      initialize_logger();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_set_output_directory(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  PyObject * obj0 = 0 ;
  char *  kwnames[] = {
    (char *) "directory", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:set_output_directory",kwnames,&obj0)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "set_output_directory" "', argument " "1"" of type '" "char *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  {
    try {
      set_output_directory(arg1);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_get_output_directory(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":get_output_directory")) SWIG_fail;
  {
    try {
      result = (char *)get_output_directory();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_set_log_filename(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  PyObject * obj0 = 0 ;
  char *  kwnames[] = {
    (char *) "filename", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:set_log_filename",kwnames,&obj0)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "set_log_filename" "', argument " "1"" of type '" "char *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  {
    try {
      set_log_filename(arg1);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_get_log_filename(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":get_log_filename")) SWIG_fail;
  {
    try {
      result = (char *)get_log_filename();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_set_separator_character(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  char arg1 ;
  char val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  char *  kwnames[] = {
    (char *) "c", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:set_separator_character",kwnames,&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_char(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "set_separator_character" "', argument " "1"" of type '" "char""'");
  } 
  arg1 = static_cast< char >(val1);
  {
    try {
      set_separator_character(arg1);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_get_separator_character(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char result;
  
  if (!PyArg_ParseTuple(args,(char *)":get_separator_character")) SWIG_fail;
  {
    try {
      result = (char)get_separator_character();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_char(static_cast< char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_set_header_character(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  char arg1 ;
  char val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  char *  kwnames[] = {
    (char *) "c", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:set_header_character",kwnames,&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_char(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "set_header_character" "', argument " "1"" of type '" "char""'");
  } 
  arg1 = static_cast< char >(val1);
  {
    try {
      set_header_character(arg1);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_get_header_character(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char result;
  
  if (!PyArg_ParseTuple(args,(char *)":get_header_character")) SWIG_fail;
  {
    try {
      result = (char)get_header_character();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_char(static_cast< char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_set_title_character(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  char arg1 ;
  char val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  char *  kwnames[] = {
    (char *) "c", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:set_title_character",kwnames,&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_char(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "set_title_character" "', argument " "1"" of type '" "char""'");
  } 
  arg1 = static_cast< char >(val1);
  {
    try {
      set_title_character(arg1);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_get_title_character(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char result;
  
  if (!PyArg_ParseTuple(args,(char *)":get_title_character")) SWIG_fail;
  {
    try {
      result = (char)get_title_character();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_char(static_cast< char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_set_line_length(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  char *  kwnames[] = {
    (char *) "length", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:set_line_length",kwnames,&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "set_line_length" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try {
      set_line_length(arg1);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_set_log_level(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  PyObject * obj0 = 0 ;
  char *  kwnames[] = {
    (char *) "new_level", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:set_log_level",kwnames,&obj0)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "set_log_level" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  {
    try {
      set_log_level((char const *)arg1);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_get_log_level(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":get_log_level")) SWIG_fail;
  {
    try {
      result = (char *)get_log_level();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_log_printf(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  logLevel arg1 ;
  char *arg2 = (char *) 0 ;
  void *arg3 = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "level",(char *) "format", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:log_printf",kwnames,&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "log_printf" "', argument " "1"" of type '" "logLevel""'");
  } 
  arg1 = static_cast< logLevel >(val1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "log_printf" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    try {
      log_printf(arg1,(char const *)arg2,arg3);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_create_multiline_msg(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  std::string arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "level",(char *) "message", NULL 
  };
  std::string result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:create_multiline_msg",kwnames,&obj0,&obj1)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__string,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "create_multiline_msg" "', argument " "1"" of type '" "std::string""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "create_multiline_msg" "', argument " "1"" of type '" "std::string""'");
    } else {
      std::string * temp = reinterpret_cast< std::string * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__string,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "create_multiline_msg" "', argument " "2"" of type '" "std::string""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "create_multiline_msg" "', argument " "2"" of type '" "std::string""'");
    } else {
      std::string * temp = reinterpret_cast< std::string * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      result = create_multiline_msg(arg1,arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new std::string(static_cast< const std::string& >(result))), SWIGTYPE_p_std__string, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_material_id(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)":material_id")) SWIG_fail;
  {
    try {
      result = (int)material_id();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_reset_material_id(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":reset_material_id")) SWIG_fail;
  {
    try {
      reset_material_id();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_maximize_material_id(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  char *  kwnames[] = {
    (char *) "material_id", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:maximize_material_id",kwnames,&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "maximize_material_id" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try {
      maximize_material_id(arg1);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Material(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  int arg1 = (int) 0 ;
  char *arg2 = (char *) "" ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "id",(char *) "name", NULL 
  };
  Material *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"|OO:new_Material",kwnames,&obj0,&obj1)) SWIG_fail;
  if (obj0) {
    ecode1 = SWIG_AsVal_int(obj0, &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Material" "', argument " "1"" of type '" "int""'");
    } 
    arg1 = static_cast< int >(val1);
  }
  if (obj1) {
    res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Material" "', argument " "2"" of type '" "char const *""'");
    }
    arg2 = reinterpret_cast< char * >(buf2);
  }
  {
    try {
      result = (Material *)new Material(arg1,(char const *)arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Material, SWIG_POINTER_NEW |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Material(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Material *arg1 = (Material *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Material",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Material, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Material" "', argument " "1"" of type '" "Material *""'"); 
  }
  arg1 = reinterpret_cast< Material * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Material_getId(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Material *arg1 = (Material *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Material_getId",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Material, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Material_getId" "', argument " "1"" of type '" "Material const *""'"); 
  }
  arg1 = reinterpret_cast< Material * >(argp1);
  {
    try {
      result = (int)((Material const *)arg1)->getId();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Material_getName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Material *arg1 = (Material *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Material_getName",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Material, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Material_getName" "', argument " "1"" of type '" "Material const *""'"); 
  }
  arg1 = reinterpret_cast< Material * >(argp1);
  {
    try {
      result = (char *)((Material const *)arg1)->getName();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Material_getVolume(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Material *arg1 = (Material *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Material_getVolume",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Material, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Material_getVolume" "', argument " "1"" of type '" "Material *""'"); 
  }
  arg1 = reinterpret_cast< Material * >(argp1);
  {
    try {
      result = (double)(arg1)->getVolume();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Material_getNumInstances(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Material *arg1 = (Material *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Material_getNumInstances",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Material, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Material_getNumInstances" "', argument " "1"" of type '" "Material *""'"); 
  }
  arg1 = reinterpret_cast< Material * >(argp1);
  {
    try {
      result = (int)(arg1)->getNumInstances();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Material_getNumEnergyGroups(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Material *arg1 = (Material *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Material_getNumEnergyGroups",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Material, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Material_getNumEnergyGroups" "', argument " "1"" of type '" "Material const *""'"); 
  }
  arg1 = reinterpret_cast< Material * >(argp1);
  {
    try {
      result = (int)((Material const *)arg1)->getNumEnergyGroups();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Material_getSigmaT(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Material *arg1 = (Material *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Material_getSigmaT",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Material, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Material_getSigmaT" "', argument " "1"" of type '" "Material *""'"); 
  }
  arg1 = reinterpret_cast< Material * >(argp1);
  {
    try {
      result = (float *)(arg1)->getSigmaT();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_float, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Material_getSigmaS(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Material *arg1 = (Material *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Material_getSigmaS",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Material, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Material_getSigmaS" "', argument " "1"" of type '" "Material *""'"); 
  }
  arg1 = reinterpret_cast< Material * >(argp1);
  {
    try {
      result = (float *)(arg1)->getSigmaS();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_float, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Material_getSigmaF(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Material *arg1 = (Material *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Material_getSigmaF",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Material, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Material_getSigmaF" "', argument " "1"" of type '" "Material *""'"); 
  }
  arg1 = reinterpret_cast< Material * >(argp1);
  {
    try {
      result = (float *)(arg1)->getSigmaF();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_float, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Material_getNuSigmaF(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Material *arg1 = (Material *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Material_getNuSigmaF",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Material, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Material_getNuSigmaF" "', argument " "1"" of type '" "Material *""'"); 
  }
  arg1 = reinterpret_cast< Material * >(argp1);
  {
    try {
      result = (float *)(arg1)->getNuSigmaF();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_float, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Material_getChi(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Material *arg1 = (Material *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Material_getChi",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Material, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Material_getChi" "', argument " "1"" of type '" "Material *""'"); 
  }
  arg1 = reinterpret_cast< Material * >(argp1);
  {
    try {
      result = (float *)(arg1)->getChi();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_float, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Material_getFissionMatrix(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Material *arg1 = (Material *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Material_getFissionMatrix",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Material, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Material_getFissionMatrix" "', argument " "1"" of type '" "Material *""'"); 
  }
  arg1 = reinterpret_cast< Material * >(argp1);
  {
    try {
      result = (float *)(arg1)->getFissionMatrix();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_float, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Material_getSigmaTByGroup(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Material *arg1 = (Material *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "group", NULL 
  };
  float result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Material_getSigmaTByGroup",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Material, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Material_getSigmaTByGroup" "', argument " "1"" of type '" "Material *""'"); 
  }
  arg1 = reinterpret_cast< Material * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Material_getSigmaTByGroup" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(arg1)->getSigmaTByGroup(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Material_getSigmaSByGroup(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Material *arg1 = (Material *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "origin",(char *) "destination", NULL 
  };
  float result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:Material_getSigmaSByGroup",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Material, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Material_getSigmaSByGroup" "', argument " "1"" of type '" "Material *""'"); 
  }
  arg1 = reinterpret_cast< Material * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Material_getSigmaSByGroup" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Material_getSigmaSByGroup" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (float)(arg1)->getSigmaSByGroup(arg2,arg3);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Material_getSigmaFByGroup(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Material *arg1 = (Material *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "group", NULL 
  };
  float result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Material_getSigmaFByGroup",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Material, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Material_getSigmaFByGroup" "', argument " "1"" of type '" "Material *""'"); 
  }
  arg1 = reinterpret_cast< Material * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Material_getSigmaFByGroup" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(arg1)->getSigmaFByGroup(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Material_getNuSigmaFByGroup(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Material *arg1 = (Material *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "group", NULL 
  };
  float result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Material_getNuSigmaFByGroup",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Material, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Material_getNuSigmaFByGroup" "', argument " "1"" of type '" "Material *""'"); 
  }
  arg1 = reinterpret_cast< Material * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Material_getNuSigmaFByGroup" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(arg1)->getNuSigmaFByGroup(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Material_getChiByGroup(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Material *arg1 = (Material *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "group", NULL 
  };
  float result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Material_getChiByGroup",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Material, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Material_getChiByGroup" "', argument " "1"" of type '" "Material *""'"); 
  }
  arg1 = reinterpret_cast< Material * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Material_getChiByGroup" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(arg1)->getChiByGroup(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Material_getFissionMatrixByGroup(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Material *arg1 = (Material *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "origin",(char *) "destination", NULL 
  };
  float result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:Material_getFissionMatrixByGroup",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Material, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Material_getFissionMatrixByGroup" "', argument " "1"" of type '" "Material *""'"); 
  }
  arg1 = reinterpret_cast< Material * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Material_getFissionMatrixByGroup" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Material_getFissionMatrixByGroup" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (float)(arg1)->getFissionMatrixByGroup(arg2,arg3);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Material_isFissionable(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Material *arg1 = (Material *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Material_isFissionable",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Material, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Material_isFissionable" "', argument " "1"" of type '" "Material *""'"); 
  }
  arg1 = reinterpret_cast< Material * >(argp1);
  {
    try {
      result = (bool)(arg1)->isFissionable();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Material_isDataAligned(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Material *arg1 = (Material *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Material_isDataAligned",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Material, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Material_isDataAligned" "', argument " "1"" of type '" "Material *""'"); 
  }
  arg1 = reinterpret_cast< Material * >(argp1);
  {
    try {
      result = (bool)(arg1)->isDataAligned();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Material_getNumVectorGroups(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Material *arg1 = (Material *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Material_getNumVectorGroups",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Material, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Material_getNumVectorGroups" "', argument " "1"" of type '" "Material *""'"); 
  }
  arg1 = reinterpret_cast< Material * >(argp1);
  {
    try {
      result = (int)(arg1)->getNumVectorGroups();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Material_setName(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Material *arg1 = (Material *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "name", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Material_setName",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Material, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Material_setName" "', argument " "1"" of type '" "Material *""'"); 
  }
  arg1 = reinterpret_cast< Material * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Material_setName" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    try {
      (arg1)->setName((char const *)arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Material_setVolume(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Material *arg1 = (Material *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "volume", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Material_setVolume",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Material, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Material_setVolume" "', argument " "1"" of type '" "Material *""'"); 
  }
  arg1 = reinterpret_cast< Material * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Material_setVolume" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setVolume(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Material_incrementVolume(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Material *arg1 = (Material *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "volume", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Material_incrementVolume",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Material, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Material_incrementVolume" "', argument " "1"" of type '" "Material *""'"); 
  }
  arg1 = reinterpret_cast< Material * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Material_incrementVolume" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->incrementVolume(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Material_setNumInstances(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Material *arg1 = (Material *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "num_instances", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Material_setNumInstances",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Material, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Material_setNumInstances" "', argument " "1"" of type '" "Material *""'"); 
  }
  arg1 = reinterpret_cast< Material * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Material_setNumInstances" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->setNumInstances(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Material_incrementNumInstances(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Material *arg1 = (Material *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Material_incrementNumInstances",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Material, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Material_incrementNumInstances" "', argument " "1"" of type '" "Material *""'"); 
  }
  arg1 = reinterpret_cast< Material * >(argp1);
  {
    try {
      (arg1)->incrementNumInstances();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Material_setNumEnergyGroups(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Material *arg1 = (Material *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "num_groups", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Material_setNumEnergyGroups",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Material, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Material_setNumEnergyGroups" "', argument " "1"" of type '" "Material *""'"); 
  }
  arg1 = reinterpret_cast< Material * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Material_setNumEnergyGroups" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->setNumEnergyGroups(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Material_setSigmaT(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Material *arg1 = (Material *) 0 ;
  double *arg2 = (double *) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "xs", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Material_setSigmaT",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Material, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Material_setSigmaT" "', argument " "1"" of type '" "Material *""'"); 
  }
  arg1 = reinterpret_cast< Material * >(argp1);
  {
    npy_intp size[1] = {
      -1 
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double*) array_data(array2);
    arg3 = (int) array_size(array2,0);
  }
  {
    try {
      (arg1)->setSigmaT(arg2,arg3);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_Material_setSigmaS(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Material *arg1 = (Material *) 0 ;
  double *arg2 = (double *) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "xs", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Material_setSigmaS",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Material, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Material_setSigmaS" "', argument " "1"" of type '" "Material *""'"); 
  }
  arg1 = reinterpret_cast< Material * >(argp1);
  {
    npy_intp size[1] = {
      -1 
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double*) array_data(array2);
    arg3 = (int) array_size(array2,0);
  }
  {
    try {
      (arg1)->setSigmaS(arg2,arg3);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_Material_setSigmaF(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Material *arg1 = (Material *) 0 ;
  double *arg2 = (double *) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "xs", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Material_setSigmaF",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Material, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Material_setSigmaF" "', argument " "1"" of type '" "Material *""'"); 
  }
  arg1 = reinterpret_cast< Material * >(argp1);
  {
    npy_intp size[1] = {
      -1 
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double*) array_data(array2);
    arg3 = (int) array_size(array2,0);
  }
  {
    try {
      (arg1)->setSigmaF(arg2,arg3);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_Material_setNuSigmaF(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Material *arg1 = (Material *) 0 ;
  double *arg2 = (double *) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "xs", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Material_setNuSigmaF",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Material, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Material_setNuSigmaF" "', argument " "1"" of type '" "Material *""'"); 
  }
  arg1 = reinterpret_cast< Material * >(argp1);
  {
    npy_intp size[1] = {
      -1 
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double*) array_data(array2);
    arg3 = (int) array_size(array2,0);
  }
  {
    try {
      (arg1)->setNuSigmaF(arg2,arg3);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_Material_setChi(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Material *arg1 = (Material *) 0 ;
  double *arg2 = (double *) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "xs", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Material_setChi",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Material, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Material_setChi" "', argument " "1"" of type '" "Material *""'"); 
  }
  arg1 = reinterpret_cast< Material * >(argp1);
  {
    npy_intp size[1] = {
      -1 
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double*) array_data(array2);
    arg3 = (int) array_size(array2,0);
  }
  {
    try {
      (arg1)->setChi(arg2,arg3);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_Material_setSigmaTByGroup(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Material *arg1 = (Material *) 0 ;
  double arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "xs",(char *) "group", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:Material_setSigmaTByGroup",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Material, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Material_setSigmaTByGroup" "', argument " "1"" of type '" "Material *""'"); 
  }
  arg1 = reinterpret_cast< Material * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Material_setSigmaTByGroup" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Material_setSigmaTByGroup" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      (arg1)->setSigmaTByGroup(arg2,arg3);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Material_setSigmaFByGroup(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Material *arg1 = (Material *) 0 ;
  double arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "xs",(char *) "group", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:Material_setSigmaFByGroup",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Material, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Material_setSigmaFByGroup" "', argument " "1"" of type '" "Material *""'"); 
  }
  arg1 = reinterpret_cast< Material * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Material_setSigmaFByGroup" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Material_setSigmaFByGroup" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      (arg1)->setSigmaFByGroup(arg2,arg3);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Material_setNuSigmaFByGroup(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Material *arg1 = (Material *) 0 ;
  double arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "xs",(char *) "group", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:Material_setNuSigmaFByGroup",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Material, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Material_setNuSigmaFByGroup" "', argument " "1"" of type '" "Material *""'"); 
  }
  arg1 = reinterpret_cast< Material * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Material_setNuSigmaFByGroup" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Material_setNuSigmaFByGroup" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      (arg1)->setNuSigmaFByGroup(arg2,arg3);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Material_setSigmaSByGroup(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Material *arg1 = (Material *) 0 ;
  double arg2 ;
  int arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "xs",(char *) "origin",(char *) "destination", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOO:Material_setSigmaSByGroup",kwnames,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Material, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Material_setSigmaSByGroup" "', argument " "1"" of type '" "Material *""'"); 
  }
  arg1 = reinterpret_cast< Material * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Material_setSigmaSByGroup" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Material_setSigmaSByGroup" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Material_setSigmaSByGroup" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try {
      (arg1)->setSigmaSByGroup(arg2,arg3,arg4);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Material_setChiByGroup(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Material *arg1 = (Material *) 0 ;
  double arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "xs",(char *) "group", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:Material_setChiByGroup",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Material, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Material_setChiByGroup" "', argument " "1"" of type '" "Material *""'"); 
  }
  arg1 = reinterpret_cast< Material * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Material_setChiByGroup" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Material_setChiByGroup" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      (arg1)->setChiByGroup(arg2,arg3);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Material_buildFissionMatrix(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Material *arg1 = (Material *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Material_buildFissionMatrix",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Material, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Material_buildFissionMatrix" "', argument " "1"" of type '" "Material *""'"); 
  }
  arg1 = reinterpret_cast< Material * >(argp1);
  {
    try {
      (arg1)->buildFissionMatrix();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Material_transposeProductionMatrices(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Material *arg1 = (Material *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Material_transposeProductionMatrices",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Material, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Material_transposeProductionMatrices" "', argument " "1"" of type '" "Material *""'"); 
  }
  arg1 = reinterpret_cast< Material * >(argp1);
  {
    try {
      (arg1)->transposeProductionMatrices();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Material_alignData(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Material *arg1 = (Material *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Material_alignData",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Material, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Material_alignData" "', argument " "1"" of type '" "Material *""'"); 
  }
  arg1 = reinterpret_cast< Material * >(argp1);
  {
    try {
      (arg1)->alignData();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Material_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Material *arg1 = (Material *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Material *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Material_clone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Material, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Material_clone" "', argument " "1"" of type '" "Material *""'"); 
  }
  arg1 = reinterpret_cast< Material * >(argp1);
  {
    try {
      result = (Material *)(arg1)->clone();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Material, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Material_copyFrom(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Material *arg1 = (Material *) 0 ;
  Material *arg2 = (Material *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "material", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Material_copyFrom",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Material, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Material_copyFrom" "', argument " "1"" of type '" "Material *""'"); 
  }
  arg1 = reinterpret_cast< Material * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Material, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Material_copyFrom" "', argument " "2"" of type '" "Material *""'"); 
  }
  arg2 = reinterpret_cast< Material * >(argp2);
  {
    try {
      (arg1)->copyFrom(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Material_toString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Material *arg1 = (Material *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Material_toString",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Material, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Material_toString" "', argument " "1"" of type '" "Material *""'"); 
  }
  arg1 = reinterpret_cast< Material * >(argp1);
  {
    try {
      result = (arg1)->toString();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new std::string(static_cast< const std::string& >(result))), SWIGTYPE_p_std__string, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Material_printString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Material *arg1 = (Material *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Material_printString",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Material, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Material_printString" "', argument " "1"" of type '" "Material *""'"); 
  }
  arg1 = reinterpret_cast< Material * >(argp1);
  {
    try {
      (arg1)->printString();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Material_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Material, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_Point(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Point *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Point")) SWIG_fail;
  {
    try {
      result = (Point *)new Point();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Point, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Point(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Point *arg1 = (Point *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Point",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Point, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Point" "', argument " "1"" of type '" "Point *""'"); 
  }
  arg1 = reinterpret_cast< Point * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Point_setCoords(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Point *arg1 = (Point *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "x",(char *) "y",(char *) "z", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOO:Point_setCoords",kwnames,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Point, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Point_setCoords" "', argument " "1"" of type '" "Point *""'"); 
  }
  arg1 = reinterpret_cast< Point * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Point_setCoords" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Point_setCoords" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Point_setCoords" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      (arg1)->setCoords(arg2,arg3,arg4);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Point_getX(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Point *arg1 = (Point *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Point_getX",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Point, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Point_getX" "', argument " "1"" of type '" "Point const *""'"); 
  }
  arg1 = reinterpret_cast< Point * >(argp1);
  {
    try {
      result = (double)((Point const *)arg1)->getX();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Point_getY(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Point *arg1 = (Point *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Point_getY",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Point, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Point_getY" "', argument " "1"" of type '" "Point const *""'"); 
  }
  arg1 = reinterpret_cast< Point * >(argp1);
  {
    try {
      result = (double)((Point const *)arg1)->getY();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Point_getZ(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Point *arg1 = (Point *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Point_getZ",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Point, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Point_getZ" "', argument " "1"" of type '" "Point const *""'"); 
  }
  arg1 = reinterpret_cast< Point * >(argp1);
  {
    try {
      result = (double)((Point const *)arg1)->getZ();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Point_setX(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Point *arg1 = (Point *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "x", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Point_setX",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Point, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Point_setX" "', argument " "1"" of type '" "Point *""'"); 
  }
  arg1 = reinterpret_cast< Point * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Point_setX" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setX(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Point_setY(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Point *arg1 = (Point *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "y", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Point_setY",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Point, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Point_setY" "', argument " "1"" of type '" "Point *""'"); 
  }
  arg1 = reinterpret_cast< Point * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Point_setY" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setY(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Point_setZ(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Point *arg1 = (Point *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "z", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Point_setZ",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Point, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Point_setZ" "', argument " "1"" of type '" "Point *""'"); 
  }
  arg1 = reinterpret_cast< Point * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Point_setZ" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setZ(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Point_distanceToPoint(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Point *arg1 = (Point *) 0 ;
  Point *arg2 = (Point *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "point", NULL 
  };
  double result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Point_distanceToPoint",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Point, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Point_distanceToPoint" "', argument " "1"" of type '" "Point *""'"); 
  }
  arg1 = reinterpret_cast< Point * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Point, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Point_distanceToPoint" "', argument " "2"" of type '" "Point const *""'"); 
  }
  arg2 = reinterpret_cast< Point * >(argp2);
  {
    try {
      result = (double)(arg1)->distanceToPoint((Point const *)arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Point_toString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Point *arg1 = (Point *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Point_toString",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Point, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Point_toString" "', argument " "1"" of type '" "Point *""'"); 
  }
  arg1 = reinterpret_cast< Point * >(argp1);
  {
    try {
      result = (arg1)->toString();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new std::string(static_cast< const std::string& >(result))), SWIGTYPE_p_std__string, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Point_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Point, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *TABUCHI_YAMAMOTO_swigconstant(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *module;
  PyObject *d;
  if (!PyArg_ParseTuple(args,(char*)"O:swigconstant", &module)) return NULL;
  d = PyModule_GetDict(module);
  if (!d) return NULL;
  SWIG_Python_SetConstant(d, "TABUCHI_YAMAMOTO",SWIG_From_int(static_cast< int >(TABUCHI_YAMAMOTO)));
  return SWIG_Py_Void();
}


SWIGINTERN PyObject *LEONARD_swigconstant(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *module;
  PyObject *d;
  if (!PyArg_ParseTuple(args,(char*)"O:swigconstant", &module)) return NULL;
  d = PyModule_GetDict(module);
  if (!d) return NULL;
  SWIG_Python_SetConstant(d, "LEONARD",SWIG_From_int(static_cast< int >(LEONARD)));
  return SWIG_Py_Void();
}


SWIGINTERN PyObject *GAUSS_LEGENDRE_swigconstant(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *module;
  PyObject *d;
  if (!PyArg_ParseTuple(args,(char*)"O:swigconstant", &module)) return NULL;
  d = PyModule_GetDict(module);
  if (!d) return NULL;
  SWIG_Python_SetConstant(d, "GAUSS_LEGENDRE",SWIG_From_int(static_cast< int >(GAUSS_LEGENDRE)));
  return SWIG_Py_Void();
}


SWIGINTERN PyObject *EQUAL_WEIGHT_swigconstant(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *module;
  PyObject *d;
  if (!PyArg_ParseTuple(args,(char*)"O:swigconstant", &module)) return NULL;
  d = PyModule_GetDict(module);
  if (!d) return NULL;
  SWIG_Python_SetConstant(d, "EQUAL_WEIGHT",SWIG_From_int(static_cast< int >(EQUAL_WEIGHT)));
  return SWIG_Py_Void();
}


SWIGINTERN PyObject *EQUAL_ANGLE_swigconstant(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *module;
  PyObject *d;
  if (!PyArg_ParseTuple(args,(char*)"O:swigconstant", &module)) return NULL;
  d = PyModule_GetDict(module);
  if (!d) return NULL;
  SWIG_Python_SetConstant(d, "EQUAL_ANGLE",SWIG_From_int(static_cast< int >(EQUAL_ANGLE)));
  return SWIG_Py_Void();
}


SWIGINTERN PyObject *_wrap_new_Quadrature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Quadrature *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Quadrature")) SWIG_fail;
  {
    try {
      result = (Quadrature *)new Quadrature();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quadrature, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Quadrature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Quadrature *arg1 = (Quadrature *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Quadrature",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Quadrature, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Quadrature" "', argument " "1"" of type '" "Quadrature *""'"); 
  }
  arg1 = reinterpret_cast< Quadrature * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Quadrature_getNumPolarAngles(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Quadrature *arg1 = (Quadrature *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Quadrature_getNumPolarAngles",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Quadrature, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Quadrature_getNumPolarAngles" "', argument " "1"" of type '" "Quadrature const *""'"); 
  }
  arg1 = reinterpret_cast< Quadrature * >(argp1);
  {
    try {
      result = (int)((Quadrature const *)arg1)->getNumPolarAngles();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Quadrature_getNumAzimAngles(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Quadrature *arg1 = (Quadrature *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Quadrature_getNumAzimAngles",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Quadrature, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Quadrature_getNumAzimAngles" "', argument " "1"" of type '" "Quadrature const *""'"); 
  }
  arg1 = reinterpret_cast< Quadrature * >(argp1);
  {
    try {
      result = (int)((Quadrature const *)arg1)->getNumAzimAngles();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Quadrature_getSinTheta(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Quadrature *arg1 = (Quadrature *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "azim",(char *) "polar", NULL 
  };
  float result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:Quadrature_getSinTheta",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Quadrature, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Quadrature_getSinTheta" "', argument " "1"" of type '" "Quadrature *""'"); 
  }
  arg1 = reinterpret_cast< Quadrature * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Quadrature_getSinTheta" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Quadrature_getSinTheta" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (float)(arg1)->getSinTheta(arg2,arg3);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Quadrature_getTheta(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Quadrature *arg1 = (Quadrature *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "azim",(char *) "polar", NULL 
  };
  double result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:Quadrature_getTheta",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Quadrature, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Quadrature_getTheta" "', argument " "1"" of type '" "Quadrature *""'"); 
  }
  arg1 = reinterpret_cast< Quadrature * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Quadrature_getTheta" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Quadrature_getTheta" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (double)(arg1)->getTheta(arg2,arg3);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Quadrature_getPhi(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Quadrature *arg1 = (Quadrature *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "azim", NULL 
  };
  double result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Quadrature_getPhi",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Quadrature, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Quadrature_getPhi" "', argument " "1"" of type '" "Quadrature *""'"); 
  }
  arg1 = reinterpret_cast< Quadrature * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Quadrature_getPhi" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (double)(arg1)->getPhi(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Quadrature_getAzimWeight(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Quadrature *arg1 = (Quadrature *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "azim", NULL 
  };
  float result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Quadrature_getAzimWeight",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Quadrature, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Quadrature_getAzimWeight" "', argument " "1"" of type '" "Quadrature *""'"); 
  }
  arg1 = reinterpret_cast< Quadrature * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Quadrature_getAzimWeight" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(arg1)->getAzimWeight(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Quadrature_getPolarWeight(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Quadrature *arg1 = (Quadrature *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "azim",(char *) "polar", NULL 
  };
  float result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:Quadrature_getPolarWeight",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Quadrature, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Quadrature_getPolarWeight" "', argument " "1"" of type '" "Quadrature *""'"); 
  }
  arg1 = reinterpret_cast< Quadrature * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Quadrature_getPolarWeight" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Quadrature_getPolarWeight" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (float)(arg1)->getPolarWeight(arg2,arg3);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Quadrature_getWeight(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Quadrature *arg1 = (Quadrature *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "azim",(char *) "polar", NULL 
  };
  float result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:Quadrature_getWeight",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Quadrature, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Quadrature_getWeight" "', argument " "1"" of type '" "Quadrature *""'"); 
  }
  arg1 = reinterpret_cast< Quadrature * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Quadrature_getWeight" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Quadrature_getWeight" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (float)(arg1)->getWeight(arg2,arg3);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Quadrature_getWeightInline(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Quadrature *arg1 = (Quadrature *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "azim",(char *) "polar", NULL 
  };
  float result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:Quadrature_getWeightInline",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Quadrature, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Quadrature_getWeightInline" "', argument " "1"" of type '" "Quadrature *""'"); 
  }
  arg1 = reinterpret_cast< Quadrature * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Quadrature_getWeightInline" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Quadrature_getWeightInline" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (float)(arg1)->getWeightInline(arg2,arg3);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Quadrature_getSinThetas(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Quadrature *arg1 = (Quadrature *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float **result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Quadrature_getSinThetas",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Quadrature, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Quadrature_getSinThetas" "', argument " "1"" of type '" "Quadrature *""'"); 
  }
  arg1 = reinterpret_cast< Quadrature * >(argp1);
  {
    try {
      result = (float **)(arg1)->getSinThetas();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_p_float, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Quadrature_getThetas(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Quadrature *arg1 = (Quadrature *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double **result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Quadrature_getThetas",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Quadrature, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Quadrature_getThetas" "', argument " "1"" of type '" "Quadrature *""'"); 
  }
  arg1 = reinterpret_cast< Quadrature * >(argp1);
  {
    try {
      result = (double **)(arg1)->getThetas();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Quadrature_getPhis(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Quadrature *arg1 = (Quadrature *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Quadrature_getPhis",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Quadrature, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Quadrature_getPhis" "', argument " "1"" of type '" "Quadrature *""'"); 
  }
  arg1 = reinterpret_cast< Quadrature * >(argp1);
  {
    try {
      result = (double *)(arg1)->getPhis();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Quadrature_getAzimWeights(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Quadrature *arg1 = (Quadrature *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Quadrature_getAzimWeights",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Quadrature, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Quadrature_getAzimWeights" "', argument " "1"" of type '" "Quadrature *""'"); 
  }
  arg1 = reinterpret_cast< Quadrature * >(argp1);
  {
    try {
      result = (float *)(arg1)->getAzimWeights();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_float, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Quadrature_getPolarWeights(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Quadrature *arg1 = (Quadrature *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float **result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Quadrature_getPolarWeights",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Quadrature, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Quadrature_getPolarWeights" "', argument " "1"" of type '" "Quadrature *""'"); 
  }
  arg1 = reinterpret_cast< Quadrature * >(argp1);
  {
    try {
      result = (float **)(arg1)->getPolarWeights();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_p_float, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Quadrature_getQuadratureType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Quadrature *arg1 = (Quadrature *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  quadratureType result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Quadrature_getQuadratureType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Quadrature, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Quadrature_getQuadratureType" "', argument " "1"" of type '" "Quadrature *""'"); 
  }
  arg1 = reinterpret_cast< Quadrature * >(argp1);
  {
    try {
      result = (quadratureType)(arg1)->getQuadratureType();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Quadrature_getAzimSpacings(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Quadrature *arg1 = (Quadrature *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Quadrature_getAzimSpacings",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Quadrature, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Quadrature_getAzimSpacings" "', argument " "1"" of type '" "Quadrature *""'"); 
  }
  arg1 = reinterpret_cast< Quadrature * >(argp1);
  {
    try {
      result = (float *)(arg1)->getAzimSpacings();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_float, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Quadrature_getAzimSpacing(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Quadrature *arg1 = (Quadrature *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "azim", NULL 
  };
  float result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Quadrature_getAzimSpacing",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Quadrature, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Quadrature_getAzimSpacing" "', argument " "1"" of type '" "Quadrature *""'"); 
  }
  arg1 = reinterpret_cast< Quadrature * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Quadrature_getAzimSpacing" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(arg1)->getAzimSpacing(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Quadrature_setNumAzimAngles(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Quadrature *arg1 = (Quadrature *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "num_azim", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Quadrature_setNumAzimAngles",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Quadrature, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Quadrature_setNumAzimAngles" "', argument " "1"" of type '" "Quadrature *""'"); 
  }
  arg1 = reinterpret_cast< Quadrature * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Quadrature_setNumAzimAngles" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->setNumAzimAngles(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Quadrature_setNumPolarAngles(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Quadrature *arg1 = (Quadrature *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "num_polar", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Quadrature_setNumPolarAngles",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Quadrature, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Quadrature_setNumPolarAngles" "', argument " "1"" of type '" "Quadrature *""'"); 
  }
  arg1 = reinterpret_cast< Quadrature * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Quadrature_setNumPolarAngles" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->setNumPolarAngles(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Quadrature_setThetas(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Quadrature *arg1 = (Quadrature *) 0 ;
  double *arg2 = (double *) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "thetas",(char *) "num_azim_times_polar", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:Quadrature_setThetas",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Quadrature, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Quadrature_setThetas" "', argument " "1"" of type '" "Quadrature *""'"); 
  }
  arg1 = reinterpret_cast< Quadrature * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Quadrature_setThetas" "', argument " "2"" of type '" "double *""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Quadrature_setThetas" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      (arg1)->setThetas(arg2,arg3);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Quadrature_setPolarWeights(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Quadrature *arg1 = (Quadrature *) 0 ;
  float *arg2 = (float *) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "weights",(char *) "num_azim_times_polar", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:Quadrature_setPolarWeights",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Quadrature, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Quadrature_setPolarWeights" "', argument " "1"" of type '" "Quadrature *""'"); 
  }
  arg1 = reinterpret_cast< Quadrature * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Quadrature_setPolarWeights" "', argument " "2"" of type '" "float *""'"); 
  }
  arg2 = reinterpret_cast< float * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Quadrature_setPolarWeights" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      (arg1)->setPolarWeights(arg2,arg3);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Quadrature_setTheta(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Quadrature *arg1 = (Quadrature *) 0 ;
  double arg2 ;
  int arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "theta",(char *) "azim",(char *) "polar", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOO:Quadrature_setTheta",kwnames,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Quadrature, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Quadrature_setTheta" "', argument " "1"" of type '" "Quadrature *""'"); 
  }
  arg1 = reinterpret_cast< Quadrature * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Quadrature_setTheta" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Quadrature_setTheta" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Quadrature_setTheta" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try {
      (arg1)->setTheta(arg2,arg3,arg4);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Quadrature_setPhi(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Quadrature *arg1 = (Quadrature *) 0 ;
  double arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "phi",(char *) "azim", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:Quadrature_setPhi",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Quadrature, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Quadrature_setPhi" "', argument " "1"" of type '" "Quadrature *""'"); 
  }
  arg1 = reinterpret_cast< Quadrature * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Quadrature_setPhi" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Quadrature_setPhi" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      (arg1)->setPhi(arg2,arg3);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Quadrature_setAzimSpacing(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Quadrature *arg1 = (Quadrature *) 0 ;
  float arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "spacing",(char *) "azim", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:Quadrature_setAzimSpacing",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Quadrature, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Quadrature_setAzimSpacing" "', argument " "1"" of type '" "Quadrature *""'"); 
  }
  arg1 = reinterpret_cast< Quadrature * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Quadrature_setAzimSpacing" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Quadrature_setAzimSpacing" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      (arg1)->setAzimSpacing(arg2,arg3);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Quadrature_setAzimWeight(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Quadrature *arg1 = (Quadrature *) 0 ;
  double arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "weight",(char *) "azim", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:Quadrature_setAzimWeight",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Quadrature, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Quadrature_setAzimWeight" "', argument " "1"" of type '" "Quadrature *""'"); 
  }
  arg1 = reinterpret_cast< Quadrature * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Quadrature_setAzimWeight" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Quadrature_setAzimWeight" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      (arg1)->setAzimWeight(arg2,arg3);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Quadrature_setPolarWeight(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Quadrature *arg1 = (Quadrature *) 0 ;
  float arg2 ;
  int arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "weight",(char *) "azim",(char *) "polar", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOO:Quadrature_setPolarWeight",kwnames,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Quadrature, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Quadrature_setPolarWeight" "', argument " "1"" of type '" "Quadrature *""'"); 
  }
  arg1 = reinterpret_cast< Quadrature * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Quadrature_setPolarWeight" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Quadrature_setPolarWeight" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Quadrature_setPolarWeight" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try {
      (arg1)->setPolarWeight(arg2,arg3,arg4);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Quadrature_initialize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Quadrature *arg1 = (Quadrature *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Quadrature_initialize",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Quadrature, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Quadrature_initialize" "', argument " "1"" of type '" "Quadrature *""'"); 
  }
  arg1 = reinterpret_cast< Quadrature * >(argp1);
  {
    try {
      (arg1)->initialize();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Quadrature_precomputeWeights(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Quadrature *arg1 = (Quadrature *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "solve_3D", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Quadrature_precomputeWeights",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Quadrature, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Quadrature_precomputeWeights" "', argument " "1"" of type '" "Quadrature *""'"); 
  }
  arg1 = reinterpret_cast< Quadrature * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Quadrature_precomputeWeights" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      (arg1)->precomputeWeights(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Quadrature_toString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Quadrature *arg1 = (Quadrature *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Quadrature_toString",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Quadrature, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Quadrature_toString" "', argument " "1"" of type '" "Quadrature *""'"); 
  }
  arg1 = reinterpret_cast< Quadrature * >(argp1);
  {
    try {
      result = (arg1)->toString();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new std::string(static_cast< const std::string& >(result))), SWIGTYPE_p_std__string, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Quadrature_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Quadrature, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_TYPolarQuad(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TYPolarQuad *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_TYPolarQuad")) SWIG_fail;
  {
    try {
      result = (TYPolarQuad *)new TYPolarQuad();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TYPolarQuad, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TYPolarQuad_setNumPolarAngles(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  TYPolarQuad *arg1 = (TYPolarQuad *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "num_polar", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:TYPolarQuad_setNumPolarAngles",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TYPolarQuad, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TYPolarQuad_setNumPolarAngles" "', argument " "1"" of type '" "TYPolarQuad *""'"); 
  }
  arg1 = reinterpret_cast< TYPolarQuad * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TYPolarQuad_setNumPolarAngles" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->setNumPolarAngles(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TYPolarQuad_initialize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TYPolarQuad *arg1 = (TYPolarQuad *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TYPolarQuad_initialize",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TYPolarQuad, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TYPolarQuad_initialize" "', argument " "1"" of type '" "TYPolarQuad *""'"); 
  }
  arg1 = reinterpret_cast< TYPolarQuad * >(argp1);
  {
    try {
      (arg1)->initialize();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TYPolarQuad_precomputeWeights(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  TYPolarQuad *arg1 = (TYPolarQuad *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "solve_3D", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:TYPolarQuad_precomputeWeights",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TYPolarQuad, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TYPolarQuad_precomputeWeights" "', argument " "1"" of type '" "TYPolarQuad *""'"); 
  }
  arg1 = reinterpret_cast< TYPolarQuad * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TYPolarQuad_precomputeWeights" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      (arg1)->precomputeWeights(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_TYPolarQuad(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TYPolarQuad *arg1 = (TYPolarQuad *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_TYPolarQuad",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TYPolarQuad, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_TYPolarQuad" "', argument " "1"" of type '" "TYPolarQuad *""'"); 
  }
  arg1 = reinterpret_cast< TYPolarQuad * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *TYPolarQuad_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_TYPolarQuad, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_LeonardPolarQuad(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LeonardPolarQuad *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_LeonardPolarQuad")) SWIG_fail;
  {
    try {
      result = (LeonardPolarQuad *)new LeonardPolarQuad();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_LeonardPolarQuad, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LeonardPolarQuad_setNumPolarAngles(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  LeonardPolarQuad *arg1 = (LeonardPolarQuad *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "num_polar", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:LeonardPolarQuad_setNumPolarAngles",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LeonardPolarQuad, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LeonardPolarQuad_setNumPolarAngles" "', argument " "1"" of type '" "LeonardPolarQuad *""'"); 
  }
  arg1 = reinterpret_cast< LeonardPolarQuad * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LeonardPolarQuad_setNumPolarAngles" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->setNumPolarAngles(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LeonardPolarQuad_initialize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LeonardPolarQuad *arg1 = (LeonardPolarQuad *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LeonardPolarQuad_initialize",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LeonardPolarQuad, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LeonardPolarQuad_initialize" "', argument " "1"" of type '" "LeonardPolarQuad *""'"); 
  }
  arg1 = reinterpret_cast< LeonardPolarQuad * >(argp1);
  {
    try {
      (arg1)->initialize();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LeonardPolarQuad_precomputeWeights(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  LeonardPolarQuad *arg1 = (LeonardPolarQuad *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "solve_3D", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:LeonardPolarQuad_precomputeWeights",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LeonardPolarQuad, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LeonardPolarQuad_precomputeWeights" "', argument " "1"" of type '" "LeonardPolarQuad *""'"); 
  }
  arg1 = reinterpret_cast< LeonardPolarQuad * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LeonardPolarQuad_precomputeWeights" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      (arg1)->precomputeWeights(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_LeonardPolarQuad(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LeonardPolarQuad *arg1 = (LeonardPolarQuad *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_LeonardPolarQuad",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LeonardPolarQuad, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_LeonardPolarQuad" "', argument " "1"" of type '" "LeonardPolarQuad *""'"); 
  }
  arg1 = reinterpret_cast< LeonardPolarQuad * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *LeonardPolarQuad_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_LeonardPolarQuad, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_GLPolarQuad(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GLPolarQuad *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_GLPolarQuad")) SWIG_fail;
  {
    try {
      result = (GLPolarQuad *)new GLPolarQuad();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GLPolarQuad, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GLPolarQuad_setNumPolarAngles(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  GLPolarQuad *arg1 = (GLPolarQuad *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "num_polar", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:GLPolarQuad_setNumPolarAngles",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GLPolarQuad, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GLPolarQuad_setNumPolarAngles" "', argument " "1"" of type '" "GLPolarQuad *""'"); 
  }
  arg1 = reinterpret_cast< GLPolarQuad * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GLPolarQuad_setNumPolarAngles" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->setNumPolarAngles(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GLPolarQuad_initialize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GLPolarQuad *arg1 = (GLPolarQuad *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GLPolarQuad_initialize",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GLPolarQuad, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GLPolarQuad_initialize" "', argument " "1"" of type '" "GLPolarQuad *""'"); 
  }
  arg1 = reinterpret_cast< GLPolarQuad * >(argp1);
  {
    try {
      (arg1)->initialize();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GLPolarQuad_precomputeWeights(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  GLPolarQuad *arg1 = (GLPolarQuad *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "solve_3D", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:GLPolarQuad_precomputeWeights",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GLPolarQuad, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GLPolarQuad_precomputeWeights" "', argument " "1"" of type '" "GLPolarQuad *""'"); 
  }
  arg1 = reinterpret_cast< GLPolarQuad * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GLPolarQuad_precomputeWeights" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      (arg1)->precomputeWeights(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GLPolarQuad_legendrePolynomial(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  GLPolarQuad *arg1 = (GLPolarQuad *) 0 ;
  int arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "n",(char *) "x", NULL 
  };
  double result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:GLPolarQuad_legendrePolynomial",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GLPolarQuad, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GLPolarQuad_legendrePolynomial" "', argument " "1"" of type '" "GLPolarQuad *""'"); 
  }
  arg1 = reinterpret_cast< GLPolarQuad * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GLPolarQuad_legendrePolynomial" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "GLPolarQuad_legendrePolynomial" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (double)(arg1)->legendrePolynomial(arg2,arg3);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GLPolarQuad_logDerivLegendre(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  GLPolarQuad *arg1 = (GLPolarQuad *) 0 ;
  int arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "n",(char *) "x", NULL 
  };
  double result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:GLPolarQuad_logDerivLegendre",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GLPolarQuad, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GLPolarQuad_logDerivLegendre" "', argument " "1"" of type '" "GLPolarQuad *""'"); 
  }
  arg1 = reinterpret_cast< GLPolarQuad * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GLPolarQuad_logDerivLegendre" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "GLPolarQuad_logDerivLegendre" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (double)(arg1)->logDerivLegendre(arg2,arg3);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GLPolarQuad_secondLogDerivLegendre(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  GLPolarQuad *arg1 = (GLPolarQuad *) 0 ;
  int arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "n",(char *) "x", NULL 
  };
  double result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:GLPolarQuad_secondLogDerivLegendre",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GLPolarQuad, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GLPolarQuad_secondLogDerivLegendre" "', argument " "1"" of type '" "GLPolarQuad *""'"); 
  }
  arg1 = reinterpret_cast< GLPolarQuad * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GLPolarQuad_secondLogDerivLegendre" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "GLPolarQuad_secondLogDerivLegendre" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (double)(arg1)->secondLogDerivLegendre(arg2,arg3);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GLPolarQuad_getLegendreRoots(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  GLPolarQuad *arg1 = (GLPolarQuad *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "n", NULL 
  };
  std::vector< double,std::allocator< double > > result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:GLPolarQuad_getLegendreRoots",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GLPolarQuad, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GLPolarQuad_getLegendreRoots" "', argument " "1"" of type '" "GLPolarQuad *""'"); 
  }
  arg1 = reinterpret_cast< GLPolarQuad * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GLPolarQuad_getLegendreRoots" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (arg1)->getLegendreRoots(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = swig::from(static_cast< std::vector<double,std::allocator< double > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GLPolarQuad_getGLWeights(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  GLPolarQuad *arg1 = (GLPolarQuad *) 0 ;
  std::vector< double,std::allocator< double > > arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "roots",(char *) "n", NULL 
  };
  std::vector< double,std::allocator< double > > result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:GLPolarQuad_getGLWeights",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GLPolarQuad, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GLPolarQuad_getGLWeights" "', argument " "1"" of type '" "GLPolarQuad *""'"); 
  }
  arg1 = reinterpret_cast< GLPolarQuad * >(argp1);
  {
    std::vector<double,std::allocator< double > > *ptr = (std::vector<double,std::allocator< double > > *)0;
    int res = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "GLPolarQuad_getGLWeights" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > >""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "GLPolarQuad_getGLWeights" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (arg1)->getGLWeights(arg2,arg3);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = swig::from(static_cast< std::vector<double,std::allocator< double > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_GLPolarQuad(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GLPolarQuad *arg1 = (GLPolarQuad *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_GLPolarQuad",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GLPolarQuad, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_GLPolarQuad" "', argument " "1"" of type '" "GLPolarQuad *""'"); 
  }
  arg1 = reinterpret_cast< GLPolarQuad * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *GLPolarQuad_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_GLPolarQuad, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_EqualWeightPolarQuad(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EqualWeightPolarQuad *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_EqualWeightPolarQuad")) SWIG_fail;
  {
    try {
      result = (EqualWeightPolarQuad *)new EqualWeightPolarQuad();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_EqualWeightPolarQuad, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EqualWeightPolarQuad_setNumPolarAngles(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  EqualWeightPolarQuad *arg1 = (EqualWeightPolarQuad *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "num_polar", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:EqualWeightPolarQuad_setNumPolarAngles",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EqualWeightPolarQuad, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EqualWeightPolarQuad_setNumPolarAngles" "', argument " "1"" of type '" "EqualWeightPolarQuad *""'"); 
  }
  arg1 = reinterpret_cast< EqualWeightPolarQuad * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "EqualWeightPolarQuad_setNumPolarAngles" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->setNumPolarAngles(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EqualWeightPolarQuad_initialize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EqualWeightPolarQuad *arg1 = (EqualWeightPolarQuad *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:EqualWeightPolarQuad_initialize",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EqualWeightPolarQuad, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EqualWeightPolarQuad_initialize" "', argument " "1"" of type '" "EqualWeightPolarQuad *""'"); 
  }
  arg1 = reinterpret_cast< EqualWeightPolarQuad * >(argp1);
  {
    try {
      (arg1)->initialize();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EqualWeightPolarQuad_precomputeWeights(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  EqualWeightPolarQuad *arg1 = (EqualWeightPolarQuad *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "solve_3D", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:EqualWeightPolarQuad_precomputeWeights",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EqualWeightPolarQuad, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EqualWeightPolarQuad_precomputeWeights" "', argument " "1"" of type '" "EqualWeightPolarQuad *""'"); 
  }
  arg1 = reinterpret_cast< EqualWeightPolarQuad * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "EqualWeightPolarQuad_precomputeWeights" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      (arg1)->precomputeWeights(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_EqualWeightPolarQuad(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EqualWeightPolarQuad *arg1 = (EqualWeightPolarQuad *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_EqualWeightPolarQuad",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EqualWeightPolarQuad, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_EqualWeightPolarQuad" "', argument " "1"" of type '" "EqualWeightPolarQuad *""'"); 
  }
  arg1 = reinterpret_cast< EqualWeightPolarQuad * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *EqualWeightPolarQuad_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_EqualWeightPolarQuad, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_EqualAnglePolarQuad(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EqualAnglePolarQuad *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_EqualAnglePolarQuad")) SWIG_fail;
  {
    try {
      result = (EqualAnglePolarQuad *)new EqualAnglePolarQuad();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_EqualAnglePolarQuad, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EqualAnglePolarQuad_setNumPolarAngles(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  EqualAnglePolarQuad *arg1 = (EqualAnglePolarQuad *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "num_polar", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:EqualAnglePolarQuad_setNumPolarAngles",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EqualAnglePolarQuad, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EqualAnglePolarQuad_setNumPolarAngles" "', argument " "1"" of type '" "EqualAnglePolarQuad *""'"); 
  }
  arg1 = reinterpret_cast< EqualAnglePolarQuad * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "EqualAnglePolarQuad_setNumPolarAngles" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->setNumPolarAngles(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EqualAnglePolarQuad_initialize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EqualAnglePolarQuad *arg1 = (EqualAnglePolarQuad *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:EqualAnglePolarQuad_initialize",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EqualAnglePolarQuad, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EqualAnglePolarQuad_initialize" "', argument " "1"" of type '" "EqualAnglePolarQuad *""'"); 
  }
  arg1 = reinterpret_cast< EqualAnglePolarQuad * >(argp1);
  {
    try {
      (arg1)->initialize();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EqualAnglePolarQuad_precomputeWeights(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  EqualAnglePolarQuad *arg1 = (EqualAnglePolarQuad *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "solve_3D", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:EqualAnglePolarQuad_precomputeWeights",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EqualAnglePolarQuad, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EqualAnglePolarQuad_precomputeWeights" "', argument " "1"" of type '" "EqualAnglePolarQuad *""'"); 
  }
  arg1 = reinterpret_cast< EqualAnglePolarQuad * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "EqualAnglePolarQuad_precomputeWeights" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      (arg1)->precomputeWeights(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_EqualAnglePolarQuad(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EqualAnglePolarQuad *arg1 = (EqualAnglePolarQuad *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_EqualAnglePolarQuad",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EqualAnglePolarQuad, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_EqualAnglePolarQuad" "', argument " "1"" of type '" "EqualAnglePolarQuad *""'"); 
  }
  arg1 = reinterpret_cast< EqualAnglePolarQuad * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *EqualAnglePolarQuad_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_EqualAnglePolarQuad, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *FORWARD_swigconstant(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *module;
  PyObject *d;
  if (!PyArg_ParseTuple(args,(char*)"O:swigconstant", &module)) return NULL;
  d = PyModule_GetDict(module);
  if (!d) return NULL;
  SWIG_Python_SetConstant(d, "FORWARD",SWIG_From_int(static_cast< int >(FORWARD)));
  return SWIG_Py_Void();
}


SWIGINTERN PyObject *ADJOINT_swigconstant(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *module;
  PyObject *d;
  if (!PyArg_ParseTuple(args,(char*)"O:swigconstant", &module)) return NULL;
  d = PyModule_GetDict(module);
  if (!d) return NULL;
  SWIG_Python_SetConstant(d, "ADJOINT",SWIG_From_int(static_cast< int >(ADJOINT)));
  return SWIG_Py_Void();
}


SWIGINTERN PyObject *SCALAR_FLUX_swigconstant(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *module;
  PyObject *d;
  if (!PyArg_ParseTuple(args,(char*)"O:swigconstant", &module)) return NULL;
  d = PyModule_GetDict(module);
  if (!d) return NULL;
  SWIG_Python_SetConstant(d, "SCALAR_FLUX",SWIG_From_int(static_cast< int >(SCALAR_FLUX)));
  return SWIG_Py_Void();
}


SWIGINTERN PyObject *FISSION_SOURCE_swigconstant(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *module;
  PyObject *d;
  if (!PyArg_ParseTuple(args,(char*)"O:swigconstant", &module)) return NULL;
  d = PyModule_GetDict(module);
  if (!d) return NULL;
  SWIG_Python_SetConstant(d, "FISSION_SOURCE",SWIG_From_int(static_cast< int >(FISSION_SOURCE)));
  return SWIG_Py_Void();
}


SWIGINTERN PyObject *TOTAL_SOURCE_swigconstant(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *module;
  PyObject *d;
  if (!PyArg_ParseTuple(args,(char*)"O:swigconstant", &module)) return NULL;
  d = PyModule_GetDict(module);
  if (!d) return NULL;
  SWIG_Python_SetConstant(d, "TOTAL_SOURCE",SWIG_From_int(static_cast< int >(TOTAL_SOURCE)));
  return SWIG_Py_Void();
}


SWIGINTERN PyObject *_wrap_delete_Solver(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Solver *arg1 = (Solver *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Solver",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Solver, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Solver" "', argument " "1"" of type '" "Solver *""'"); 
  }
  arg1 = reinterpret_cast< Solver * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_setGeometry(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Solver *arg1 = (Solver *) 0 ;
  Geometry *arg2 = (Geometry *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "geometry", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Solver_setGeometry",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_setGeometry" "', argument " "1"" of type '" "Solver *""'"); 
  }
  arg1 = reinterpret_cast< Solver * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Geometry, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Solver_setGeometry" "', argument " "2"" of type '" "Geometry *""'"); 
  }
  arg2 = reinterpret_cast< Geometry * >(argp2);
  {
    try {
      (arg1)->setGeometry(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_getGeometry(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Solver *arg1 = (Solver *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Geometry *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Solver_getGeometry",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_getGeometry" "', argument " "1"" of type '" "Solver *""'"); 
  }
  arg1 = reinterpret_cast< Solver * >(argp1);
  {
    try {
      result = (Geometry *)(arg1)->getGeometry();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Geometry, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_getTrackGenerator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Solver *arg1 = (Solver *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  TrackGenerator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Solver_getTrackGenerator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_getTrackGenerator" "', argument " "1"" of type '" "Solver *""'"); 
  }
  arg1 = reinterpret_cast< Solver * >(argp1);
  {
    try {
      result = (TrackGenerator *)(arg1)->getTrackGenerator();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TrackGenerator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_getFSRVolume(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Solver *arg1 = (Solver *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "fsr_id", NULL 
  };
  float result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Solver_getFSRVolume",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_getFSRVolume" "', argument " "1"" of type '" "Solver *""'"); 
  }
  arg1 = reinterpret_cast< Solver * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Solver_getFSRVolume" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(arg1)->getFSRVolume(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_getNumPolarAngles(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Solver *arg1 = (Solver *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Solver_getNumPolarAngles",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_getNumPolarAngles" "', argument " "1"" of type '" "Solver *""'"); 
  }
  arg1 = reinterpret_cast< Solver * >(argp1);
  {
    try {
      result = (int)(arg1)->getNumPolarAngles();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_getNumIterations(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Solver *arg1 = (Solver *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Solver_getNumIterations",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_getNumIterations" "', argument " "1"" of type '" "Solver *""'"); 
  }
  arg1 = reinterpret_cast< Solver * >(argp1);
  {
    try {
      result = (int)(arg1)->getNumIterations();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_getTotalTime(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Solver *arg1 = (Solver *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Solver_getTotalTime",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_getTotalTime" "', argument " "1"" of type '" "Solver *""'"); 
  }
  arg1 = reinterpret_cast< Solver * >(argp1);
  {
    try {
      result = (double)(arg1)->getTotalTime();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_getKeff(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Solver *arg1 = (Solver *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Solver_getKeff",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_getKeff" "', argument " "1"" of type '" "Solver *""'"); 
  }
  arg1 = reinterpret_cast< Solver * >(argp1);
  {
    try {
      result = (float)(arg1)->getKeff();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_getConvergenceThreshold(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Solver *arg1 = (Solver *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Solver_getConvergenceThreshold",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_getConvergenceThreshold" "', argument " "1"" of type '" "Solver *""'"); 
  }
  arg1 = reinterpret_cast< Solver * >(argp1);
  {
    try {
      result = (float)(arg1)->getConvergenceThreshold();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_getMaxOpticalLength(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Solver *arg1 = (Solver *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Solver_getMaxOpticalLength",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_getMaxOpticalLength" "', argument " "1"" of type '" "Solver *""'"); 
  }
  arg1 = reinterpret_cast< Solver * >(argp1);
  {
    try {
      result = (float)(arg1)->getMaxOpticalLength();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_isUsingDoublePrecision(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Solver *arg1 = (Solver *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Solver_isUsingDoublePrecision",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_isUsingDoublePrecision" "', argument " "1"" of type '" "Solver *""'"); 
  }
  arg1 = reinterpret_cast< Solver * >(argp1);
  {
    try {
      result = (bool)(arg1)->isUsingDoublePrecision();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_isUsingExponentialInterpolation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Solver *arg1 = (Solver *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Solver_isUsingExponentialInterpolation",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_isUsingExponentialInterpolation" "', argument " "1"" of type '" "Solver *""'"); 
  }
  arg1 = reinterpret_cast< Solver * >(argp1);
  {
    try {
      result = (bool)(arg1)->isUsingExponentialInterpolation();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_getFSRSource(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Solver *arg1 = (Solver *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "fsr_id",(char *) "group", NULL 
  };
  float result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:Solver_getFSRSource",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_getFSRSource" "', argument " "1"" of type '" "Solver *""'"); 
  }
  arg1 = reinterpret_cast< Solver * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Solver_getFSRSource" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Solver_getFSRSource" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (float)(arg1)->getFSRSource(arg2,arg3);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_getFlux(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Solver *arg1 = (Solver *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "fsr_id",(char *) "group", NULL 
  };
  float result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:Solver_getFlux",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_getFlux" "', argument " "1"" of type '" "Solver *""'"); 
  }
  arg1 = reinterpret_cast< Solver * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Solver_getFlux" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Solver_getFlux" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (float)(arg1)->getFlux(arg2,arg3);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_getFluxes(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Solver *arg1 = (Solver *) 0 ;
  float *arg2 = (float *) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *array2 = NULL ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "out_fluxes", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Solver_getFluxes",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_getFluxes" "', argument " "1"" of type '" "Solver *""'"); 
  }
  arg1 = reinterpret_cast< Solver * >(argp1);
  {
    npy_intp dims[1];
    if (!PyInt_Check(obj1))
    {
      const char* typestring = pytype_string(obj1);
      PyErr_Format(PyExc_TypeError,
        "Int dimension expected.  '%s' given.",
        typestring);
      SWIG_fail;
    }
    arg3 = (int) PyInt_AsLong(obj1);
    dims[0] = (npy_intp) arg3;
    array2 = PyArray_SimpleNew(1, dims, NPY_FLOAT);
    if (!array2) SWIG_fail;
    arg2 = (float*) array_data(array2);
  }
  {
    try {
      (arg1)->getFluxes(arg2,arg3);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  {
    resultobj = SWIG_Python_AppendOutput(resultobj,(PyObject*)array2);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_getBoundaryFlux(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Solver *arg1 = (Solver *) 0 ;
  int arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "track_id",(char *) "fwd", NULL 
  };
  float *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:Solver_getBoundaryFlux",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_getBoundaryFlux" "', argument " "1"" of type '" "Solver *""'"); 
  }
  arg1 = reinterpret_cast< Solver * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Solver_getBoundaryFlux" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Solver_getBoundaryFlux" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      result = (float *)(arg1)->getBoundaryFlux(arg2,arg3);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_float, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_setTrackGenerator(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Solver *arg1 = (Solver *) 0 ;
  TrackGenerator *arg2 = (TrackGenerator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "track_generator", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Solver_setTrackGenerator",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_setTrackGenerator" "', argument " "1"" of type '" "Solver *""'"); 
  }
  arg1 = reinterpret_cast< Solver * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_TrackGenerator, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Solver_setTrackGenerator" "', argument " "2"" of type '" "TrackGenerator *""'"); 
  }
  arg2 = reinterpret_cast< TrackGenerator * >(argp2);
  {
    try {
      (arg1)->setTrackGenerator(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_setConvergenceThreshold(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Solver *arg1 = (Solver *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "threshold", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Solver_setConvergenceThreshold",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_setConvergenceThreshold" "', argument " "1"" of type '" "Solver *""'"); 
  }
  arg1 = reinterpret_cast< Solver * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Solver_setConvergenceThreshold" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  {
    try {
      (arg1)->setConvergenceThreshold(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_setFluxes(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Solver *arg1 = (Solver *) 0 ;
  float *arg2 = (float *) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int i2 = 1 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "in_fluxes", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Solver_setFluxes",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_setFluxes" "', argument " "1"" of type '" "Solver *""'"); 
  }
  arg1 = reinterpret_cast< Solver * >(argp1);
  {
    array2 = obj_to_array_no_conversion(obj1, NPY_FLOAT);
    if (!array2 || !require_dimensions(array2,1) || !require_contiguous(array2)
      || !require_native(array2)) SWIG_fail;
    arg2 = (float*) array_data(array2);
    arg3 = 1;
    for (i2=0; i2 < array_numdims(array2); ++i2) arg3 *= array_size(array2,i2);
  }
  {
    try {
      (arg1)->setFluxes(arg2,arg3);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_setFixedSourceByFSR(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Solver *arg1 = (Solver *) 0 ;
  int arg2 ;
  int arg3 ;
  float arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "fsr_id",(char *) "group",(char *) "source", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOO:Solver_setFixedSourceByFSR",kwnames,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_setFixedSourceByFSR" "', argument " "1"" of type '" "Solver *""'"); 
  }
  arg1 = reinterpret_cast< Solver * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Solver_setFixedSourceByFSR" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Solver_setFixedSourceByFSR" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Solver_setFixedSourceByFSR" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = static_cast< float >(val4);
  {
    try {
      (arg1)->setFixedSourceByFSR(arg2,arg3,arg4);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_setFixedSourceByCell(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Solver *arg1 = (Solver *) 0 ;
  Cell *arg2 = (Cell *) 0 ;
  int arg3 ;
  float arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "cell",(char *) "group",(char *) "source", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOO:Solver_setFixedSourceByCell",kwnames,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_setFixedSourceByCell" "', argument " "1"" of type '" "Solver *""'"); 
  }
  arg1 = reinterpret_cast< Solver * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Cell, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Solver_setFixedSourceByCell" "', argument " "2"" of type '" "Cell *""'"); 
  }
  arg2 = reinterpret_cast< Cell * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Solver_setFixedSourceByCell" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Solver_setFixedSourceByCell" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = static_cast< float >(val4);
  {
    try {
      (arg1)->setFixedSourceByCell(arg2,arg3,arg4);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_setFixedSourceByMaterial(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Solver *arg1 = (Solver *) 0 ;
  Material *arg2 = (Material *) 0 ;
  int arg3 ;
  float arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "material",(char *) "group",(char *) "source", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOO:Solver_setFixedSourceByMaterial",kwnames,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_setFixedSourceByMaterial" "', argument " "1"" of type '" "Solver *""'"); 
  }
  arg1 = reinterpret_cast< Solver * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Material, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Solver_setFixedSourceByMaterial" "', argument " "2"" of type '" "Material *""'"); 
  }
  arg2 = reinterpret_cast< Material * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Solver_setFixedSourceByMaterial" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Solver_setFixedSourceByMaterial" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = static_cast< float >(val4);
  {
    try {
      (arg1)->setFixedSourceByMaterial(arg2,arg3,arg4);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_setMaxOpticalLength(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Solver *arg1 = (Solver *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "max_optical_length", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Solver_setMaxOpticalLength",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_setMaxOpticalLength" "', argument " "1"" of type '" "Solver *""'"); 
  }
  arg1 = reinterpret_cast< Solver * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Solver_setMaxOpticalLength" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  {
    try {
      (arg1)->setMaxOpticalLength(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_setExpPrecision(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Solver *arg1 = (Solver *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "precision", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Solver_setExpPrecision",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_setExpPrecision" "', argument " "1"" of type '" "Solver *""'"); 
  }
  arg1 = reinterpret_cast< Solver * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Solver_setExpPrecision" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  {
    try {
      (arg1)->setExpPrecision(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_useExponentialInterpolation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Solver *arg1 = (Solver *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Solver_useExponentialInterpolation",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_useExponentialInterpolation" "', argument " "1"" of type '" "Solver *""'"); 
  }
  arg1 = reinterpret_cast< Solver * >(argp1);
  {
    try {
      (arg1)->useExponentialInterpolation();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_useExponentialIntrinsic(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Solver *arg1 = (Solver *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Solver_useExponentialIntrinsic",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_useExponentialIntrinsic" "', argument " "1"" of type '" "Solver *""'"); 
  }
  arg1 = reinterpret_cast< Solver * >(argp1);
  {
    try {
      (arg1)->useExponentialIntrinsic();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_initializeExpEvaluator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Solver *arg1 = (Solver *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Solver_initializeExpEvaluator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_initializeExpEvaluator" "', argument " "1"" of type '" "Solver *""'"); 
  }
  arg1 = reinterpret_cast< Solver * >(argp1);
  {
    try {
      (arg1)->initializeExpEvaluator();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_initializeMaterials(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Solver *arg1 = (Solver *) 0 ;
  solverMode arg2 = (solverMode) FORWARD ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "mode", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|O:Solver_initializeMaterials",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_initializeMaterials" "', argument " "1"" of type '" "Solver *""'"); 
  }
  arg1 = reinterpret_cast< Solver * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_int(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Solver_initializeMaterials" "', argument " "2"" of type '" "solverMode""'");
    } 
    arg2 = static_cast< solverMode >(val2);
  }
  {
    try {
      (arg1)->initializeMaterials(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_initializeFSRs(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Solver *arg1 = (Solver *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Solver_initializeFSRs",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_initializeFSRs" "', argument " "1"" of type '" "Solver *""'"); 
  }
  arg1 = reinterpret_cast< Solver * >(argp1);
  {
    try {
      (arg1)->initializeFSRs();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_countFissionableFSRs(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Solver *arg1 = (Solver *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Solver_countFissionableFSRs",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_countFissionableFSRs" "', argument " "1"" of type '" "Solver *""'"); 
  }
  arg1 = reinterpret_cast< Solver * >(argp1);
  {
    try {
      (arg1)->countFissionableFSRs();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_initializeFixedSources(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Solver *arg1 = (Solver *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Solver_initializeFixedSources",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_initializeFixedSources" "', argument " "1"" of type '" "Solver *""'"); 
  }
  arg1 = reinterpret_cast< Solver * >(argp1);
  {
    try {
      (arg1)->initializeFixedSources();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_initializeCmfd(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Solver *arg1 = (Solver *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Solver_initializeCmfd",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_initializeCmfd" "', argument " "1"" of type '" "Solver *""'"); 
  }
  arg1 = reinterpret_cast< Solver * >(argp1);
  {
    try {
      (arg1)->initializeCmfd();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_resetMaterials(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Solver *arg1 = (Solver *) 0 ;
  solverMode arg2 = (solverMode) FORWARD ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "mode", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|O:Solver_resetMaterials",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_resetMaterials" "', argument " "1"" of type '" "Solver *""'"); 
  }
  arg1 = reinterpret_cast< Solver * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_int(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Solver_resetMaterials" "', argument " "2"" of type '" "solverMode""'");
    } 
    arg2 = static_cast< solverMode >(val2);
  }
  {
    try {
      (arg1)->resetMaterials(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_fissionTransportSweep(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Solver *arg1 = (Solver *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Solver_fissionTransportSweep",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_fissionTransportSweep" "', argument " "1"" of type '" "Solver *""'"); 
  }
  arg1 = reinterpret_cast< Solver * >(argp1);
  {
    try {
      (arg1)->fissionTransportSweep();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_scatterTransportSweep(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Solver *arg1 = (Solver *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Solver_scatterTransportSweep",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_scatterTransportSweep" "', argument " "1"" of type '" "Solver *""'"); 
  }
  arg1 = reinterpret_cast< Solver * >(argp1);
  {
    try {
      (arg1)->scatterTransportSweep();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_initializeFluxArrays(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Solver *arg1 = (Solver *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Solver_initializeFluxArrays",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_initializeFluxArrays" "', argument " "1"" of type '" "Solver *""'"); 
  }
  arg1 = reinterpret_cast< Solver * >(argp1);
  {
    try {
      (arg1)->initializeFluxArrays();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_initializeSourceArrays(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Solver *arg1 = (Solver *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Solver_initializeSourceArrays",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_initializeSourceArrays" "', argument " "1"" of type '" "Solver *""'"); 
  }
  arg1 = reinterpret_cast< Solver * >(argp1);
  {
    try {
      (arg1)->initializeSourceArrays();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_zeroTrackFluxes(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Solver *arg1 = (Solver *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Solver_zeroTrackFluxes",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_zeroTrackFluxes" "', argument " "1"" of type '" "Solver *""'"); 
  }
  arg1 = reinterpret_cast< Solver * >(argp1);
  {
    try {
      (arg1)->zeroTrackFluxes();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_flattenFSRFluxes(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Solver *arg1 = (Solver *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "value", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Solver_flattenFSRFluxes",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_flattenFSRFluxes" "', argument " "1"" of type '" "Solver *""'"); 
  }
  arg1 = reinterpret_cast< Solver * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Solver_flattenFSRFluxes" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  {
    try {
      (arg1)->flattenFSRFluxes(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_storeFSRFluxes(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Solver *arg1 = (Solver *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Solver_storeFSRFluxes",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_storeFSRFluxes" "', argument " "1"" of type '" "Solver *""'"); 
  }
  arg1 = reinterpret_cast< Solver * >(argp1);
  {
    try {
      (arg1)->storeFSRFluxes();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_normalizeFluxes(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Solver *arg1 = (Solver *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Solver_normalizeFluxes",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_normalizeFluxes" "', argument " "1"" of type '" "Solver *""'"); 
  }
  arg1 = reinterpret_cast< Solver * >(argp1);
  {
    try {
      (arg1)->normalizeFluxes();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_computeFSRSources(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Solver *arg1 = (Solver *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Solver_computeFSRSources",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_computeFSRSources" "', argument " "1"" of type '" "Solver *""'"); 
  }
  arg1 = reinterpret_cast< Solver * >(argp1);
  {
    try {
      (arg1)->computeFSRSources();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_computeFSRFissionSources(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Solver *arg1 = (Solver *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Solver_computeFSRFissionSources",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_computeFSRFissionSources" "', argument " "1"" of type '" "Solver *""'"); 
  }
  arg1 = reinterpret_cast< Solver * >(argp1);
  {
    try {
      (arg1)->computeFSRFissionSources();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_computeFSRScatterSources(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Solver *arg1 = (Solver *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Solver_computeFSRScatterSources",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_computeFSRScatterSources" "', argument " "1"" of type '" "Solver *""'"); 
  }
  arg1 = reinterpret_cast< Solver * >(argp1);
  {
    try {
      (arg1)->computeFSRScatterSources();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_computeResidual(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Solver *arg1 = (Solver *) 0 ;
  residualType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "res_type", NULL 
  };
  double result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Solver_computeResidual",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_computeResidual" "', argument " "1"" of type '" "Solver *""'"); 
  }
  arg1 = reinterpret_cast< Solver * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Solver_computeResidual" "', argument " "2"" of type '" "residualType""'");
  } 
  arg2 = static_cast< residualType >(val2);
  {
    try {
      result = (double)(arg1)->computeResidual(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_computeKeff(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Solver *arg1 = (Solver *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Solver_computeKeff",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_computeKeff" "', argument " "1"" of type '" "Solver *""'"); 
  }
  arg1 = reinterpret_cast< Solver * >(argp1);
  {
    try {
      (arg1)->computeKeff();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_addSourceToScalarFlux(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Solver *arg1 = (Solver *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Solver_addSourceToScalarFlux",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_addSourceToScalarFlux" "', argument " "1"" of type '" "Solver *""'"); 
  }
  arg1 = reinterpret_cast< Solver * >(argp1);
  {
    try {
      (arg1)->addSourceToScalarFlux();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_transportSweep(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Solver *arg1 = (Solver *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Solver_transportSweep",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_transportSweep" "', argument " "1"" of type '" "Solver *""'"); 
  }
  arg1 = reinterpret_cast< Solver * >(argp1);
  {
    try {
      (arg1)->transportSweep();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_computeFlux(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Solver *arg1 = (Solver *) 0 ;
  int arg2 = (int) 1000 ;
  solverMode arg3 = (solverMode) FORWARD ;
  bool arg4 = (bool) true ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "max_iters",(char *) "mode",(char *) "only_fixed_source", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|OOO:Solver_computeFlux",kwnames,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_computeFlux" "', argument " "1"" of type '" "Solver *""'"); 
  }
  arg1 = reinterpret_cast< Solver * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_int(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Solver_computeFlux" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
  }
  if (obj2) {
    ecode3 = SWIG_AsVal_int(obj2, &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Solver_computeFlux" "', argument " "3"" of type '" "solverMode""'");
    } 
    arg3 = static_cast< solverMode >(val3);
  }
  if (obj3) {
    ecode4 = SWIG_AsVal_bool(obj3, &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Solver_computeFlux" "', argument " "4"" of type '" "bool""'");
    } 
    arg4 = static_cast< bool >(val4);
  }
  {
    try {
      (arg1)->computeFlux(arg2,arg3,arg4);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_computeSource(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Solver *arg1 = (Solver *) 0 ;
  int arg2 = (int) 1000 ;
  solverMode arg3 = (solverMode) FORWARD ;
  double arg4 = (double) 1.0 ;
  residualType arg5 = (residualType) TOTAL_SOURCE ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "max_iters",(char *) "mode",(char *) "k_eff",(char *) "res_type", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|OOOO:Solver_computeSource",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_computeSource" "', argument " "1"" of type '" "Solver *""'"); 
  }
  arg1 = reinterpret_cast< Solver * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_int(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Solver_computeSource" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
  }
  if (obj2) {
    ecode3 = SWIG_AsVal_int(obj2, &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Solver_computeSource" "', argument " "3"" of type '" "solverMode""'");
    } 
    arg3 = static_cast< solverMode >(val3);
  }
  if (obj3) {
    ecode4 = SWIG_AsVal_double(obj3, &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Solver_computeSource" "', argument " "4"" of type '" "double""'");
    } 
    arg4 = static_cast< double >(val4);
  }
  if (obj4) {
    ecode5 = SWIG_AsVal_int(obj4, &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Solver_computeSource" "', argument " "5"" of type '" "residualType""'");
    } 
    arg5 = static_cast< residualType >(val5);
  }
  {
    try {
      (arg1)->computeSource(arg2,arg3,arg4,arg5);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_computeEigenvalue(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Solver *arg1 = (Solver *) 0 ;
  int arg2 = (int) 1000 ;
  solverMode arg3 = (solverMode) FORWARD ;
  residualType arg4 = (residualType) FISSION_SOURCE ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "max_iters",(char *) "mode",(char *) "res_type", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|OOO:Solver_computeEigenvalue",kwnames,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_computeEigenvalue" "', argument " "1"" of type '" "Solver *""'"); 
  }
  arg1 = reinterpret_cast< Solver * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_int(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Solver_computeEigenvalue" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
  }
  if (obj2) {
    ecode3 = SWIG_AsVal_int(obj2, &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Solver_computeEigenvalue" "', argument " "3"" of type '" "solverMode""'");
    } 
    arg3 = static_cast< solverMode >(val3);
  }
  if (obj3) {
    ecode4 = SWIG_AsVal_int(obj3, &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Solver_computeEigenvalue" "', argument " "4"" of type '" "residualType""'");
    } 
    arg4 = static_cast< residualType >(val4);
  }
  {
    try {
      (arg1)->computeEigenvalue(arg2,arg3,arg4);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_computeFSRFissionRates(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Solver *arg1 = (Solver *) 0 ;
  double *arg2 = (double *) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *array2 = NULL ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "fission_rates", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Solver_computeFSRFissionRates",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_computeFSRFissionRates" "', argument " "1"" of type '" "Solver *""'"); 
  }
  arg1 = reinterpret_cast< Solver * >(argp1);
  {
    npy_intp dims[1];
    if (!PyInt_Check(obj1))
    {
      const char* typestring = pytype_string(obj1);
      PyErr_Format(PyExc_TypeError,
        "Int dimension expected.  '%s' given.",
        typestring);
      SWIG_fail;
    }
    arg3 = (int) PyInt_AsLong(obj1);
    dims[0] = (npy_intp) arg3;
    array2 = PyArray_SimpleNew(1, dims, NPY_DOUBLE);
    if (!array2) SWIG_fail;
    arg2 = (double*) array_data(array2);
  }
  {
    try {
      (arg1)->computeFSRFissionRates(arg2,arg3);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  {
    resultobj = SWIG_Python_AppendOutput(resultobj,(PyObject*)array2);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_printTimerReport(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Solver *arg1 = (Solver *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Solver_printTimerReport",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_printTimerReport" "', argument " "1"" of type '" "Solver *""'"); 
  }
  arg1 = reinterpret_cast< Solver * >(argp1);
  {
    try {
      (arg1)->printTimerReport();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Solver_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Solver, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_CPUSolver(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  TrackGenerator *arg1 = (TrackGenerator *) NULL ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char *  kwnames[] = {
    (char *) "track_generator", NULL 
  };
  CPUSolver *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"|O:new_CPUSolver",kwnames,&obj0)) SWIG_fail;
  if (obj0) {
    res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TrackGenerator, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CPUSolver" "', argument " "1"" of type '" "TrackGenerator *""'"); 
    }
    arg1 = reinterpret_cast< TrackGenerator * >(argp1);
  }
  {
    try {
      result = (CPUSolver *)new CPUSolver(arg1);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_CPUSolver, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPUSolver_tallyScalarFlux(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  CPUSolver *arg1 = (CPUSolver *) 0 ;
  segment *arg2 = (segment *) 0 ;
  segment *arg3 = (segment *) 0 ;
  int arg4 ;
  float *arg5 = (float *) 0 ;
  float *arg6 = (float *) 0 ;
  std::map< int,Cell *,std::less< int >,std::allocator< std::pair< int const,Cell * > > > *arg7 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "curr_segment",(char *) "next_segment",(char *) "azim_index",(char *) "track_flux",(char *) "fsr_flux",(char *) "map_fsr_to_cells", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOOOOO:CPUSolver_tallyScalarFlux",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CPUSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPUSolver_tallyScalarFlux" "', argument " "1"" of type '" "CPUSolver *""'"); 
  }
  arg1 = reinterpret_cast< CPUSolver * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_segment, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPUSolver_tallyScalarFlux" "', argument " "2"" of type '" "segment *""'"); 
  }
  arg2 = reinterpret_cast< segment * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_segment, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CPUSolver_tallyScalarFlux" "', argument " "3"" of type '" "segment *""'"); 
  }
  arg3 = reinterpret_cast< segment * >(argp3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CPUSolver_tallyScalarFlux" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "CPUSolver_tallyScalarFlux" "', argument " "5"" of type '" "float *""'"); 
  }
  arg5 = reinterpret_cast< float * >(argp5);
  res6 = SWIG_ConvertPtr(obj5, &argp6,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "CPUSolver_tallyScalarFlux" "', argument " "6"" of type '" "float *""'"); 
  }
  arg6 = reinterpret_cast< float * >(argp6);
  res7 = SWIG_ConvertPtr(obj6, &argp7, SWIGTYPE_p_std__mapT_int_Cell_p_std__lessT_int_t_std__allocatorT_std__pairT_int_const_Cell_p_t_t_t,  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "CPUSolver_tallyScalarFlux" "', argument " "7"" of type '" "std::map< int,Cell *,std::less< int >,std::allocator< std::pair< int const,Cell * > > > &""'"); 
  }
  if (!argp7) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CPUSolver_tallyScalarFlux" "', argument " "7"" of type '" "std::map< int,Cell *,std::less< int >,std::allocator< std::pair< int const,Cell * > > > &""'"); 
  }
  arg7 = reinterpret_cast< std::map< int,Cell *,std::less< int >,std::allocator< std::pair< int const,Cell * > > > * >(argp7);
  {
    try {
      (arg1)->tallyScalarFlux(arg2,arg3,arg4,arg5,arg6,*arg7);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPUSolver_tallyCurrent(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  CPUSolver *arg1 = (CPUSolver *) 0 ;
  segment *arg2 = (segment *) 0 ;
  int arg3 ;
  float *arg4 = (float *) 0 ;
  bool arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "curr_segment",(char *) "azim_index",(char *) "track_flux",(char *) "fwd", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOOO:CPUSolver_tallyCurrent",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CPUSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPUSolver_tallyCurrent" "', argument " "1"" of type '" "CPUSolver *""'"); 
  }
  arg1 = reinterpret_cast< CPUSolver * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_segment, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CPUSolver_tallyCurrent" "', argument " "2"" of type '" "segment *""'"); 
  }
  arg2 = reinterpret_cast< segment * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPUSolver_tallyCurrent" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CPUSolver_tallyCurrent" "', argument " "4"" of type '" "float *""'"); 
  }
  arg4 = reinterpret_cast< float * >(argp4);
  ecode5 = SWIG_AsVal_bool(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "CPUSolver_tallyCurrent" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  {
    try {
      (arg1)->tallyCurrent(arg2,arg3,arg4,arg5);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPUSolver_transferBoundaryFlux(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  CPUSolver *arg1 = (CPUSolver *) 0 ;
  int arg2 ;
  int arg3 ;
  bool arg4 ;
  float *arg5 = (float *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "track_id",(char *) "azim_index",(char *) "direction",(char *) "track_flux", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOOO:CPUSolver_transferBoundaryFlux",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CPUSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPUSolver_transferBoundaryFlux" "', argument " "1"" of type '" "CPUSolver *""'"); 
  }
  arg1 = reinterpret_cast< CPUSolver * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CPUSolver_transferBoundaryFlux" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPUSolver_transferBoundaryFlux" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CPUSolver_transferBoundaryFlux" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "CPUSolver_transferBoundaryFlux" "', argument " "5"" of type '" "float *""'"); 
  }
  arg5 = reinterpret_cast< float * >(argp5);
  {
    try {
      (arg1)->transferBoundaryFlux(arg2,arg3,arg4,arg5);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPUSolver_getNumThreads(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CPUSolver *arg1 = (CPUSolver *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CPUSolver_getNumThreads",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CPUSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPUSolver_getNumThreads" "', argument " "1"" of type '" "CPUSolver *""'"); 
  }
  arg1 = reinterpret_cast< CPUSolver * >(argp1);
  {
    try {
      result = (int)(arg1)->getNumThreads();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPUSolver_getFluxes(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  CPUSolver *arg1 = (CPUSolver *) 0 ;
  float *arg2 = (float *) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *array2 = NULL ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "out_fluxes", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:CPUSolver_getFluxes",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CPUSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPUSolver_getFluxes" "', argument " "1"" of type '" "CPUSolver *""'"); 
  }
  arg1 = reinterpret_cast< CPUSolver * >(argp1);
  {
    npy_intp dims[1];
    if (!PyInt_Check(obj1))
    {
      const char* typestring = pytype_string(obj1);
      PyErr_Format(PyExc_TypeError,
        "Int dimension expected.  '%s' given.",
        typestring);
      SWIG_fail;
    }
    arg3 = (int) PyInt_AsLong(obj1);
    dims[0] = (npy_intp) arg3;
    array2 = PyArray_SimpleNew(1, dims, NPY_FLOAT);
    if (!array2) SWIG_fail;
    arg2 = (float*) array_data(array2);
  }
  {
    try {
      (arg1)->getFluxes(arg2,arg3);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  {
    resultobj = SWIG_Python_AppendOutput(resultobj,(PyObject*)array2);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPUSolver_setNumThreads(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  CPUSolver *arg1 = (CPUSolver *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "num_threads", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:CPUSolver_setNumThreads",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CPUSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPUSolver_setNumThreads" "', argument " "1"" of type '" "CPUSolver *""'"); 
  }
  arg1 = reinterpret_cast< CPUSolver * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CPUSolver_setNumThreads" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->setNumThreads(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPUSolver_setFluxes(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  CPUSolver *arg1 = (CPUSolver *) 0 ;
  float *arg2 = (float *) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int i2 = 1 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "in_fluxes", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:CPUSolver_setFluxes",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CPUSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPUSolver_setFluxes" "', argument " "1"" of type '" "CPUSolver *""'"); 
  }
  arg1 = reinterpret_cast< CPUSolver * >(argp1);
  {
    array2 = obj_to_array_no_conversion(obj1, NPY_FLOAT);
    if (!array2 || !require_dimensions(array2,1) || !require_contiguous(array2)
      || !require_native(array2)) SWIG_fail;
    arg2 = (float*) array_data(array2);
    arg3 = 1;
    for (i2=0; i2 < array_numdims(array2); ++i2) arg3 *= array_size(array2,i2);
  }
  {
    try {
      (arg1)->setFluxes(arg2,arg3);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPUSolver_initializeFluxArrays(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CPUSolver *arg1 = (CPUSolver *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CPUSolver_initializeFluxArrays",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CPUSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPUSolver_initializeFluxArrays" "', argument " "1"" of type '" "CPUSolver *""'"); 
  }
  arg1 = reinterpret_cast< CPUSolver * >(argp1);
  {
    try {
      (arg1)->initializeFluxArrays();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPUSolver_initializeSourceArrays(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CPUSolver *arg1 = (CPUSolver *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CPUSolver_initializeSourceArrays",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CPUSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPUSolver_initializeSourceArrays" "', argument " "1"" of type '" "CPUSolver *""'"); 
  }
  arg1 = reinterpret_cast< CPUSolver * >(argp1);
  {
    try {
      (arg1)->initializeSourceArrays();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPUSolver_initializeFixedSources(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CPUSolver *arg1 = (CPUSolver *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CPUSolver_initializeFixedSources",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CPUSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPUSolver_initializeFixedSources" "', argument " "1"" of type '" "CPUSolver *""'"); 
  }
  arg1 = reinterpret_cast< CPUSolver * >(argp1);
  {
    try {
      (arg1)->initializeFixedSources();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPUSolver_initializeFSRs(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CPUSolver *arg1 = (CPUSolver *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CPUSolver_initializeFSRs",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CPUSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPUSolver_initializeFSRs" "', argument " "1"" of type '" "CPUSolver *""'"); 
  }
  arg1 = reinterpret_cast< CPUSolver * >(argp1);
  {
    try {
      (arg1)->initializeFSRs();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPUSolver_zeroTrackFluxes(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CPUSolver *arg1 = (CPUSolver *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CPUSolver_zeroTrackFluxes",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CPUSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPUSolver_zeroTrackFluxes" "', argument " "1"" of type '" "CPUSolver *""'"); 
  }
  arg1 = reinterpret_cast< CPUSolver * >(argp1);
  {
    try {
      (arg1)->zeroTrackFluxes();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPUSolver_copyBoundaryFluxes(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CPUSolver *arg1 = (CPUSolver *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CPUSolver_copyBoundaryFluxes",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CPUSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPUSolver_copyBoundaryFluxes" "', argument " "1"" of type '" "CPUSolver *""'"); 
  }
  arg1 = reinterpret_cast< CPUSolver * >(argp1);
  {
    try {
      (arg1)->copyBoundaryFluxes();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPUSolver_flattenFSRFluxes(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  CPUSolver *arg1 = (CPUSolver *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "value", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:CPUSolver_flattenFSRFluxes",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CPUSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPUSolver_flattenFSRFluxes" "', argument " "1"" of type '" "CPUSolver *""'"); 
  }
  arg1 = reinterpret_cast< CPUSolver * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CPUSolver_flattenFSRFluxes" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  {
    try {
      (arg1)->flattenFSRFluxes(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPUSolver_storeFSRFluxes(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CPUSolver *arg1 = (CPUSolver *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CPUSolver_storeFSRFluxes",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CPUSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPUSolver_storeFSRFluxes" "', argument " "1"" of type '" "CPUSolver *""'"); 
  }
  arg1 = reinterpret_cast< CPUSolver * >(argp1);
  {
    try {
      (arg1)->storeFSRFluxes();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPUSolver_normalizeFluxes(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CPUSolver *arg1 = (CPUSolver *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CPUSolver_normalizeFluxes",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CPUSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPUSolver_normalizeFluxes" "', argument " "1"" of type '" "CPUSolver *""'"); 
  }
  arg1 = reinterpret_cast< CPUSolver * >(argp1);
  {
    try {
      (arg1)->normalizeFluxes();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPUSolver_computeFSRSources(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CPUSolver *arg1 = (CPUSolver *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CPUSolver_computeFSRSources",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CPUSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPUSolver_computeFSRSources" "', argument " "1"" of type '" "CPUSolver *""'"); 
  }
  arg1 = reinterpret_cast< CPUSolver * >(argp1);
  {
    try {
      (arg1)->computeFSRSources();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPUSolver_computeFSRFissionSources(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CPUSolver *arg1 = (CPUSolver *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CPUSolver_computeFSRFissionSources",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CPUSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPUSolver_computeFSRFissionSources" "', argument " "1"" of type '" "CPUSolver *""'"); 
  }
  arg1 = reinterpret_cast< CPUSolver * >(argp1);
  {
    try {
      (arg1)->computeFSRFissionSources();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPUSolver_computeFSRScatterSources(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CPUSolver *arg1 = (CPUSolver *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CPUSolver_computeFSRScatterSources",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CPUSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPUSolver_computeFSRScatterSources" "', argument " "1"" of type '" "CPUSolver *""'"); 
  }
  arg1 = reinterpret_cast< CPUSolver * >(argp1);
  {
    try {
      (arg1)->computeFSRScatterSources();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPUSolver_transportSweep(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CPUSolver *arg1 = (CPUSolver *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CPUSolver_transportSweep",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CPUSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPUSolver_transportSweep" "', argument " "1"" of type '" "CPUSolver *""'"); 
  }
  arg1 = reinterpret_cast< CPUSolver * >(argp1);
  {
    try {
      (arg1)->transportSweep();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPUSolver_addSourceToScalarFlux(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CPUSolver *arg1 = (CPUSolver *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CPUSolver_addSourceToScalarFlux",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CPUSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPUSolver_addSourceToScalarFlux" "', argument " "1"" of type '" "CPUSolver *""'"); 
  }
  arg1 = reinterpret_cast< CPUSolver * >(argp1);
  {
    try {
      (arg1)->addSourceToScalarFlux();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPUSolver_computeKeff(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CPUSolver *arg1 = (CPUSolver *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CPUSolver_computeKeff",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CPUSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPUSolver_computeKeff" "', argument " "1"" of type '" "CPUSolver *""'"); 
  }
  arg1 = reinterpret_cast< CPUSolver * >(argp1);
  {
    try {
      (arg1)->computeKeff();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPUSolver_computeResidual(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  CPUSolver *arg1 = (CPUSolver *) 0 ;
  residualType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "res_type", NULL 
  };
  double result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:CPUSolver_computeResidual",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CPUSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPUSolver_computeResidual" "', argument " "1"" of type '" "CPUSolver *""'"); 
  }
  arg1 = reinterpret_cast< CPUSolver * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CPUSolver_computeResidual" "', argument " "2"" of type '" "residualType""'");
  } 
  arg2 = static_cast< residualType >(val2);
  {
    try {
      result = (double)(arg1)->computeResidual(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPUSolver_computeFSRFissionRates(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  CPUSolver *arg1 = (CPUSolver *) 0 ;
  double *arg2 = (double *) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *array2 = NULL ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "fission_rates", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:CPUSolver_computeFSRFissionRates",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CPUSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPUSolver_computeFSRFissionRates" "', argument " "1"" of type '" "CPUSolver *""'"); 
  }
  arg1 = reinterpret_cast< CPUSolver * >(argp1);
  {
    npy_intp dims[1];
    if (!PyInt_Check(obj1))
    {
      const char* typestring = pytype_string(obj1);
      PyErr_Format(PyExc_TypeError,
        "Int dimension expected.  '%s' given.",
        typestring);
      SWIG_fail;
    }
    arg3 = (int) PyInt_AsLong(obj1);
    dims[0] = (npy_intp) arg3;
    array2 = PyArray_SimpleNew(1, dims, NPY_DOUBLE);
    if (!array2) SWIG_fail;
    arg2 = (double*) array_data(array2);
  }
  {
    try {
      (arg1)->computeFSRFissionRates(arg2,arg3);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  {
    resultobj = SWIG_Python_AppendOutput(resultobj,(PyObject*)array2);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPUSolver_initializePartialCurrentArrays(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CPUSolver *arg1 = (CPUSolver *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CPUSolver_initializePartialCurrentArrays",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CPUSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPUSolver_initializePartialCurrentArrays" "', argument " "1"" of type '" "CPUSolver *""'"); 
  }
  arg1 = reinterpret_cast< CPUSolver * >(argp1);
  {
    try {
      (arg1)->initializePartialCurrentArrays();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPUSolver_setNumSurfaces(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  CPUSolver *arg1 = (CPUSolver *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "number_surfaces", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:CPUSolver_setNumSurfaces",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CPUSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPUSolver_setNumSurfaces" "', argument " "1"" of type '" "CPUSolver *""'"); 
  }
  arg1 = reinterpret_cast< CPUSolver * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CPUSolver_setNumSurfaces" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->setNumSurfaces(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPUSolver_setReferencePartialCurrents(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  CPUSolver *arg1 = (CPUSolver *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  double arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "cell_from",(char *) "cell_to",(char *) "group",(char *) "p",(char *) "ref_current", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOOOO:CPUSolver_setReferencePartialCurrents",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CPUSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPUSolver_setReferencePartialCurrents" "', argument " "1"" of type '" "CPUSolver *""'"); 
  }
  arg1 = reinterpret_cast< CPUSolver * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CPUSolver_setReferencePartialCurrents" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPUSolver_setReferencePartialCurrents" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CPUSolver_setReferencePartialCurrents" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "CPUSolver_setReferencePartialCurrents" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_double(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "CPUSolver_setReferencePartialCurrents" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  {
    try {
      (arg1)->setReferencePartialCurrents(arg2,arg3,arg4,arg5,arg6);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPUSolver_getReferencePartialCurrents(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  CPUSolver *arg1 = (CPUSolver *) 0 ;
  int arg2 ;
  int arg3 ;
  int *arg4 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "cell_from",(char *) "cell_to",(char *) "index", NULL 
  };
  double *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOO:CPUSolver_getReferencePartialCurrents",kwnames,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CPUSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPUSolver_getReferencePartialCurrents" "', argument " "1"" of type '" "CPUSolver *""'"); 
  }
  arg1 = reinterpret_cast< CPUSolver * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CPUSolver_getReferencePartialCurrents" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPUSolver_getReferencePartialCurrents" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CPUSolver_getReferencePartialCurrents" "', argument " "4"" of type '" "int *""'"); 
  }
  arg4 = reinterpret_cast< int * >(argp4);
  {
    try {
      result = (double *)(arg1)->getReferencePartialCurrents(arg2,arg3,arg4);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPUSolver_getOngoingPartialCurrent(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  CPUSolver *arg1 = (CPUSolver *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "index",(char *) "group",(char *) "azim",(char *) "p", NULL 
  };
  double result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOOO:CPUSolver_getOngoingPartialCurrent",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CPUSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPUSolver_getOngoingPartialCurrent" "', argument " "1"" of type '" "CPUSolver *""'"); 
  }
  arg1 = reinterpret_cast< CPUSolver * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CPUSolver_getOngoingPartialCurrent" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPUSolver_getOngoingPartialCurrent" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CPUSolver_getOngoingPartialCurrent" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "CPUSolver_getOngoingPartialCurrent" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  {
    try {
      result = (double)(arg1)->getOngoingPartialCurrent(arg2,arg3,arg4,arg5);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPUSolver_getAngularPartialCurrent(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  CPUSolver *arg1 = (CPUSolver *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "cell_from",(char *) "cell_to",(char *) "group",(char *) "azim",(char *) "p", NULL 
  };
  double result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOOOO:CPUSolver_getAngularPartialCurrent",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CPUSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPUSolver_getAngularPartialCurrent" "', argument " "1"" of type '" "CPUSolver *""'"); 
  }
  arg1 = reinterpret_cast< CPUSolver * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CPUSolver_getAngularPartialCurrent" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CPUSolver_getAngularPartialCurrent" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CPUSolver_getAngularPartialCurrent" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "CPUSolver_getAngularPartialCurrent" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_int(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "CPUSolver_getAngularPartialCurrent" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  {
    try {
      result = (double)(arg1)->getAngularPartialCurrent(arg2,arg3,arg4,arg5,arg6);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPUSolver_resetOngoingPartialCurrentsArray(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CPUSolver *arg1 = (CPUSolver *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CPUSolver_resetOngoingPartialCurrentsArray",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CPUSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPUSolver_resetOngoingPartialCurrentsArray" "', argument " "1"" of type '" "CPUSolver *""'"); 
  }
  arg1 = reinterpret_cast< CPUSolver * >(argp1);
  {
    try {
      (arg1)->resetOngoingPartialCurrentsArray();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_CPUSolver(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CPUSolver *arg1 = (CPUSolver *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_CPUSolver",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CPUSolver, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_CPUSolver" "', argument " "1"" of type '" "CPUSolver *""'"); 
  }
  arg1 = reinterpret_cast< CPUSolver * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *CPUSolver_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_CPUSolver, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *VACUUM_swigconstant(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *module;
  PyObject *d;
  if (!PyArg_ParseTuple(args,(char*)"O:swigconstant", &module)) return NULL;
  d = PyModule_GetDict(module);
  if (!d) return NULL;
  SWIG_Python_SetConstant(d, "VACUUM",SWIG_From_int(static_cast< int >(VACUUM)));
  return SWIG_Py_Void();
}


SWIGINTERN PyObject *REFLECTIVE_swigconstant(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *module;
  PyObject *d;
  if (!PyArg_ParseTuple(args,(char*)"O:swigconstant", &module)) return NULL;
  d = PyModule_GetDict(module);
  if (!d) return NULL;
  SWIG_Python_SetConstant(d, "REFLECTIVE",SWIG_From_int(static_cast< int >(REFLECTIVE)));
  return SWIG_Py_Void();
}


SWIGINTERN PyObject *PERIODIC_swigconstant(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *module;
  PyObject *d;
  if (!PyArg_ParseTuple(args,(char*)"O:swigconstant", &module)) return NULL;
  d = PyModule_GetDict(module);
  if (!d) return NULL;
  SWIG_Python_SetConstant(d, "PERIODIC",SWIG_From_int(static_cast< int >(PERIODIC)));
  return SWIG_Py_Void();
}


SWIGINTERN PyObject *BOUNDARY_NONE_swigconstant(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *module;
  PyObject *d;
  if (!PyArg_ParseTuple(args,(char*)"O:swigconstant", &module)) return NULL;
  d = PyModule_GetDict(module);
  if (!d) return NULL;
  SWIG_Python_SetConstant(d, "BOUNDARY_NONE",SWIG_From_int(static_cast< int >(BOUNDARY_NONE)));
  return SWIG_Py_Void();
}


SWIGINTERN PyObject *_wrap_surface_id(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)":surface_id")) SWIG_fail;
  {
    try {
      result = (int)surface_id();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_reset_surface_id(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":reset_surface_id")) SWIG_fail;
  {
    try {
      reset_surface_id();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_maximize_surface_id(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  char *  kwnames[] = {
    (char *) "surface_id", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:maximize_surface_id",kwnames,&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "maximize_surface_id" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try {
      maximize_surface_id(arg1);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *PLANE_swigconstant(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *module;
  PyObject *d;
  if (!PyArg_ParseTuple(args,(char*)"O:swigconstant", &module)) return NULL;
  d = PyModule_GetDict(module);
  if (!d) return NULL;
  SWIG_Python_SetConstant(d, "PLANE",SWIG_From_int(static_cast< int >(PLANE)));
  return SWIG_Py_Void();
}


SWIGINTERN PyObject *ZCYLINDER_swigconstant(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *module;
  PyObject *d;
  if (!PyArg_ParseTuple(args,(char*)"O:swigconstant", &module)) return NULL;
  d = PyModule_GetDict(module);
  if (!d) return NULL;
  SWIG_Python_SetConstant(d, "ZCYLINDER",SWIG_From_int(static_cast< int >(ZCYLINDER)));
  return SWIG_Py_Void();
}


SWIGINTERN PyObject *XPLANE_swigconstant(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *module;
  PyObject *d;
  if (!PyArg_ParseTuple(args,(char*)"O:swigconstant", &module)) return NULL;
  d = PyModule_GetDict(module);
  if (!d) return NULL;
  SWIG_Python_SetConstant(d, "XPLANE",SWIG_From_int(static_cast< int >(XPLANE)));
  return SWIG_Py_Void();
}


SWIGINTERN PyObject *YPLANE_swigconstant(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *module;
  PyObject *d;
  if (!PyArg_ParseTuple(args,(char*)"O:swigconstant", &module)) return NULL;
  d = PyModule_GetDict(module);
  if (!d) return NULL;
  SWIG_Python_SetConstant(d, "YPLANE",SWIG_From_int(static_cast< int >(YPLANE)));
  return SWIG_Py_Void();
}


SWIGINTERN PyObject *ZPLANE_swigconstant(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *module;
  PyObject *d;
  if (!PyArg_ParseTuple(args,(char*)"O:swigconstant", &module)) return NULL;
  d = PyModule_GetDict(module);
  if (!d) return NULL;
  SWIG_Python_SetConstant(d, "ZPLANE",SWIG_From_int(static_cast< int >(ZPLANE)));
  return SWIG_Py_Void();
}


SWIGINTERN PyObject *QUADRATIC_swigconstant(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *module;
  PyObject *d;
  if (!PyArg_ParseTuple(args,(char*)"O:swigconstant", &module)) return NULL;
  d = PyModule_GetDict(module);
  if (!d) return NULL;
  SWIG_Python_SetConstant(d, "QUADRATIC",SWIG_From_int(static_cast< int >(QUADRATIC)));
  return SWIG_Py_Void();
}


SWIGINTERN PyObject *_wrap_delete_Surface(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Surface *arg1 = (Surface *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Surface",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Surface, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Surface" "', argument " "1"" of type '" "Surface *""'"); 
  }
  arg1 = reinterpret_cast< Surface * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Surface_getUid(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Surface *arg1 = (Surface *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Surface_getUid",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Surface, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Surface_getUid" "', argument " "1"" of type '" "Surface const *""'"); 
  }
  arg1 = reinterpret_cast< Surface * >(argp1);
  {
    try {
      result = (int)((Surface const *)arg1)->getUid();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Surface_getId(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Surface *arg1 = (Surface *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Surface_getId",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Surface, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Surface_getId" "', argument " "1"" of type '" "Surface const *""'"); 
  }
  arg1 = reinterpret_cast< Surface * >(argp1);
  {
    try {
      result = (int)((Surface const *)arg1)->getId();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Surface_getName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Surface *arg1 = (Surface *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Surface_getName",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Surface, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Surface_getName" "', argument " "1"" of type '" "Surface const *""'"); 
  }
  arg1 = reinterpret_cast< Surface * >(argp1);
  {
    try {
      result = (char *)((Surface const *)arg1)->getName();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Surface_getSurfaceType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Surface *arg1 = (Surface *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  surfaceType result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Surface_getSurfaceType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Surface, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Surface_getSurfaceType" "', argument " "1"" of type '" "Surface *""'"); 
  }
  arg1 = reinterpret_cast< Surface * >(argp1);
  {
    try {
      result = (surfaceType)(arg1)->getSurfaceType();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Surface_getBoundaryType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Surface *arg1 = (Surface *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  boundaryType result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Surface_getBoundaryType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Surface, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Surface_getBoundaryType" "', argument " "1"" of type '" "Surface *""'"); 
  }
  arg1 = reinterpret_cast< Surface * >(argp1);
  {
    try {
      result = (boundaryType)(arg1)->getBoundaryType();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Surface_getMinX(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Surface *arg1 = (Surface *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "halfspace", NULL 
  };
  double result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Surface_getMinX",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Surface, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Surface_getMinX" "', argument " "1"" of type '" "Surface *""'"); 
  }
  arg1 = reinterpret_cast< Surface * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Surface_getMinX" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (double)(arg1)->getMinX(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Surface_getMaxX(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Surface *arg1 = (Surface *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "halfspace", NULL 
  };
  double result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Surface_getMaxX",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Surface, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Surface_getMaxX" "', argument " "1"" of type '" "Surface *""'"); 
  }
  arg1 = reinterpret_cast< Surface * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Surface_getMaxX" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (double)(arg1)->getMaxX(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Surface_getMinY(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Surface *arg1 = (Surface *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "halfspace", NULL 
  };
  double result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Surface_getMinY",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Surface, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Surface_getMinY" "', argument " "1"" of type '" "Surface *""'"); 
  }
  arg1 = reinterpret_cast< Surface * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Surface_getMinY" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (double)(arg1)->getMinY(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Surface_getMaxY(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Surface *arg1 = (Surface *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "halfspace", NULL 
  };
  double result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Surface_getMaxY",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Surface, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Surface_getMaxY" "', argument " "1"" of type '" "Surface *""'"); 
  }
  arg1 = reinterpret_cast< Surface * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Surface_getMaxY" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (double)(arg1)->getMaxY(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Surface_getMinZ(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Surface *arg1 = (Surface *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "halfspace", NULL 
  };
  double result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Surface_getMinZ",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Surface, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Surface_getMinZ" "', argument " "1"" of type '" "Surface *""'"); 
  }
  arg1 = reinterpret_cast< Surface * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Surface_getMinZ" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (double)(arg1)->getMinZ(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Surface_getMaxZ(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Surface *arg1 = (Surface *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "halfspace", NULL 
  };
  double result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Surface_getMaxZ",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Surface, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Surface_getMaxZ" "', argument " "1"" of type '" "Surface *""'"); 
  }
  arg1 = reinterpret_cast< Surface * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Surface_getMaxZ" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (double)(arg1)->getMaxZ(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Surface_setName(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Surface *arg1 = (Surface *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "name", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Surface_setName",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Surface, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Surface_setName" "', argument " "1"" of type '" "Surface *""'"); 
  }
  arg1 = reinterpret_cast< Surface * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Surface_setName" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    try {
      (arg1)->setName((char const *)arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Surface_setBoundaryType(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Surface *arg1 = (Surface *) 0 ;
  boundaryType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "boundary_type", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Surface_setBoundaryType",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Surface, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Surface_setBoundaryType" "', argument " "1"" of type '" "Surface *""'"); 
  }
  arg1 = reinterpret_cast< Surface * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Surface_setBoundaryType" "', argument " "2"" of type '" "boundaryType""'");
  } 
  arg2 = static_cast< boundaryType >(val2);
  {
    try {
      (arg1)->setBoundaryType(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Surface_addNeighborCell(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Surface *arg1 = (Surface *) 0 ;
  int arg2 ;
  Cell *arg3 = (Cell *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "halfspace",(char *) "cell", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:Surface_addNeighborCell",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Surface, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Surface_addNeighborCell" "', argument " "1"" of type '" "Surface *""'"); 
  }
  arg1 = reinterpret_cast< Surface * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Surface_addNeighborCell" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_Cell, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Surface_addNeighborCell" "', argument " "3"" of type '" "Cell *""'"); 
  }
  arg3 = reinterpret_cast< Cell * >(argp3);
  {
    try {
      (arg1)->addNeighborCell(arg2,arg3);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Surface_evaluate(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Surface *arg1 = (Surface *) 0 ;
  Point *arg2 = (Point *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "point", NULL 
  };
  double result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Surface_evaluate",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Surface, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Surface_evaluate" "', argument " "1"" of type '" "Surface const *""'"); 
  }
  arg1 = reinterpret_cast< Surface * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Point, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Surface_evaluate" "', argument " "2"" of type '" "Point const *""'"); 
  }
  arg2 = reinterpret_cast< Point * >(argp2);
  {
    try {
      result = (double)((Surface const *)arg1)->evaluate((Point const *)arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Surface_intersection(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Surface *arg1 = (Surface *) 0 ;
  Point *arg2 = (Point *) 0 ;
  double arg3 ;
  Point *arg4 = (Point *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "point",(char *) "angle",(char *) "points", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOO:Surface_intersection",kwnames,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Surface, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Surface_intersection" "', argument " "1"" of type '" "Surface *""'"); 
  }
  arg1 = reinterpret_cast< Surface * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Point, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Surface_intersection" "', argument " "2"" of type '" "Point *""'"); 
  }
  arg2 = reinterpret_cast< Point * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Surface_intersection" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_Point, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Surface_intersection" "', argument " "4"" of type '" "Point *""'"); 
  }
  arg4 = reinterpret_cast< Point * >(argp4);
  {
    try {
      result = (int)(arg1)->intersection(arg2,arg3,arg4);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Surface_isPointOnSurface(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Surface *arg1 = (Surface *) 0 ;
  Point *arg2 = (Point *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "point", NULL 
  };
  bool result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Surface_isPointOnSurface",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Surface, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Surface_isPointOnSurface" "', argument " "1"" of type '" "Surface *""'"); 
  }
  arg1 = reinterpret_cast< Surface * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Point, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Surface_isPointOnSurface" "', argument " "2"" of type '" "Point *""'"); 
  }
  arg2 = reinterpret_cast< Point * >(argp2);
  {
    try {
      result = (bool)(arg1)->isPointOnSurface(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Surface_isCoordOnSurface(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Surface *arg1 = (Surface *) 0 ;
  LocalCoords *arg2 = (LocalCoords *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "coord", NULL 
  };
  bool result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Surface_isCoordOnSurface",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Surface, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Surface_isCoordOnSurface" "', argument " "1"" of type '" "Surface *""'"); 
  }
  arg1 = reinterpret_cast< Surface * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_LocalCoords, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Surface_isCoordOnSurface" "', argument " "2"" of type '" "LocalCoords *""'"); 
  }
  arg2 = reinterpret_cast< LocalCoords * >(argp2);
  {
    try {
      result = (bool)(arg1)->isCoordOnSurface(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Surface_getMinDistance(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Surface *arg1 = (Surface *) 0 ;
  LocalCoords *arg2 = (LocalCoords *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "coords", NULL 
  };
  double result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Surface_getMinDistance",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Surface, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Surface_getMinDistance" "', argument " "1"" of type '" "Surface *""'"); 
  }
  arg1 = reinterpret_cast< Surface * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_LocalCoords, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Surface_getMinDistance" "', argument " "2"" of type '" "LocalCoords *""'"); 
  }
  arg2 = reinterpret_cast< LocalCoords * >(argp2);
  {
    try {
      result = (double)(arg1)->getMinDistance(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Surface_toString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Surface *arg1 = (Surface *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Surface_toString",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Surface, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Surface_toString" "', argument " "1"" of type '" "Surface *""'"); 
  }
  arg1 = reinterpret_cast< Surface * >(argp1);
  {
    try {
      result = (arg1)->toString();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new std::string(static_cast< const std::string& >(result))), SWIGTYPE_p_std__string, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Surface_printString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Surface *arg1 = (Surface *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Surface_printString",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Surface, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Surface_printString" "', argument " "1"" of type '" "Surface *""'"); 
  }
  arg1 = reinterpret_cast< Surface * >(argp1);
  {
    try {
      (arg1)->printString();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Surface_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Surface, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_Plane(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  int arg5 = (int) (int)0 ;
  char *arg6 = (char *) "" ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  char *  kwnames[] = {
    (char *) "A",(char *) "B",(char *) "C",(char *) "D",(char *) "id",(char *) "name", NULL 
  };
  Plane *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOO|OO:new_Plane",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Plane" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Plane" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Plane" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_Plane" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  if (obj4) {
    ecode5 = SWIG_AsVal_int(obj4, &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_Plane" "', argument " "5"" of type '" "int""'");
    } 
    arg5 = static_cast< int >(val5);
  }
  if (obj5) {
    res6 = SWIG_AsCharPtrAndSize(obj5, &buf6, NULL, &alloc6);
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "new_Plane" "', argument " "6"" of type '" "char const *""'");
    }
    arg6 = reinterpret_cast< char * >(buf6);
  }
  {
    try {
      result = (Plane *)new Plane(arg1,arg2,arg3,arg4,arg5,(char const *)arg6);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Plane, SWIG_POINTER_NEW |  0 );
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return resultobj;
fail:
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Plane_getMinX(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Plane *arg1 = (Plane *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "halfspace", NULL 
  };
  double result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Plane_getMinX",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Plane, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Plane_getMinX" "', argument " "1"" of type '" "Plane *""'"); 
  }
  arg1 = reinterpret_cast< Plane * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Plane_getMinX" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (double)(arg1)->getMinX(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Plane_getMaxX(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Plane *arg1 = (Plane *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "halfspace", NULL 
  };
  double result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Plane_getMaxX",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Plane, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Plane_getMaxX" "', argument " "1"" of type '" "Plane *""'"); 
  }
  arg1 = reinterpret_cast< Plane * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Plane_getMaxX" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (double)(arg1)->getMaxX(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Plane_getMinY(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Plane *arg1 = (Plane *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "halfspace", NULL 
  };
  double result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Plane_getMinY",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Plane, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Plane_getMinY" "', argument " "1"" of type '" "Plane *""'"); 
  }
  arg1 = reinterpret_cast< Plane * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Plane_getMinY" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (double)(arg1)->getMinY(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Plane_getMaxY(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Plane *arg1 = (Plane *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "halfspace", NULL 
  };
  double result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Plane_getMaxY",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Plane, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Plane_getMaxY" "', argument " "1"" of type '" "Plane *""'"); 
  }
  arg1 = reinterpret_cast< Plane * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Plane_getMaxY" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (double)(arg1)->getMaxY(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Plane_getMinZ(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Plane *arg1 = (Plane *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "halfspace", NULL 
  };
  double result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Plane_getMinZ",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Plane, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Plane_getMinZ" "', argument " "1"" of type '" "Plane *""'"); 
  }
  arg1 = reinterpret_cast< Plane * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Plane_getMinZ" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (double)(arg1)->getMinZ(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Plane_getMaxZ(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Plane *arg1 = (Plane *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "halfspace", NULL 
  };
  double result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Plane_getMaxZ",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Plane, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Plane_getMaxZ" "', argument " "1"" of type '" "Plane *""'"); 
  }
  arg1 = reinterpret_cast< Plane * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Plane_getMaxZ" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (double)(arg1)->getMaxZ(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Plane_getA(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Plane *arg1 = (Plane *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Plane_getA",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Plane, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Plane_getA" "', argument " "1"" of type '" "Plane *""'"); 
  }
  arg1 = reinterpret_cast< Plane * >(argp1);
  {
    try {
      result = (double)(arg1)->getA();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Plane_getB(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Plane *arg1 = (Plane *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Plane_getB",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Plane, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Plane_getB" "', argument " "1"" of type '" "Plane *""'"); 
  }
  arg1 = reinterpret_cast< Plane * >(argp1);
  {
    try {
      result = (double)(arg1)->getB();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Plane_getC(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Plane *arg1 = (Plane *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Plane_getC",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Plane, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Plane_getC" "', argument " "1"" of type '" "Plane *""'"); 
  }
  arg1 = reinterpret_cast< Plane * >(argp1);
  {
    try {
      result = (double)(arg1)->getC();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Plane_getD(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Plane *arg1 = (Plane *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Plane_getD",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Plane, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Plane_getD" "', argument " "1"" of type '" "Plane *""'"); 
  }
  arg1 = reinterpret_cast< Plane * >(argp1);
  {
    try {
      result = (double)(arg1)->getD();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Plane_evaluate(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Plane *arg1 = (Plane *) 0 ;
  Point *arg2 = (Point *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "point", NULL 
  };
  double result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Plane_evaluate",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Plane, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Plane_evaluate" "', argument " "1"" of type '" "Plane const *""'"); 
  }
  arg1 = reinterpret_cast< Plane * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Point, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Plane_evaluate" "', argument " "2"" of type '" "Point const *""'"); 
  }
  arg2 = reinterpret_cast< Point * >(argp2);
  {
    try {
      result = (double)((Plane const *)arg1)->evaluate((Point const *)arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Plane_intersection(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Plane *arg1 = (Plane *) 0 ;
  Point *arg2 = (Point *) 0 ;
  double arg3 ;
  Point *arg4 = (Point *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "point",(char *) "angle",(char *) "points", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOO:Plane_intersection",kwnames,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Plane, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Plane_intersection" "', argument " "1"" of type '" "Plane *""'"); 
  }
  arg1 = reinterpret_cast< Plane * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Point, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Plane_intersection" "', argument " "2"" of type '" "Point *""'"); 
  }
  arg2 = reinterpret_cast< Point * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Plane_intersection" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_Point, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Plane_intersection" "', argument " "4"" of type '" "Point *""'"); 
  }
  arg4 = reinterpret_cast< Point * >(argp4);
  {
    try {
      result = (int)(arg1)->intersection(arg2,arg3,arg4);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Plane_toString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Plane *arg1 = (Plane *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Plane_toString",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Plane, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Plane_toString" "', argument " "1"" of type '" "Plane *""'"); 
  }
  arg1 = reinterpret_cast< Plane * >(argp1);
  {
    try {
      result = (arg1)->toString();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new std::string(static_cast< const std::string& >(result))), SWIGTYPE_p_std__string, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Plane(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Plane *arg1 = (Plane *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Plane",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Plane, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Plane" "', argument " "1"" of type '" "Plane *""'"); 
  }
  arg1 = reinterpret_cast< Plane * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Plane_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Plane, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_XPlane(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  double arg1 ;
  int arg2 = (int) (int)0 ;
  char *arg3 = (char *) "" ;
  double val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "x",(char *) "id",(char *) "name", NULL 
  };
  XPlane *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|OO:new_XPlane",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_XPlane" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  if (obj1) {
    ecode2 = SWIG_AsVal_int(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_XPlane" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
  }
  if (obj2) {
    res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_XPlane" "', argument " "3"" of type '" "char const *""'");
    }
    arg3 = reinterpret_cast< char * >(buf3);
  }
  {
    try {
      result = (XPlane *)new XPlane(arg1,arg2,(char const *)arg3);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XPlane, SWIG_POINTER_NEW |  0 );
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_XPlane_setX(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  XPlane *arg1 = (XPlane *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "x", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:XPlane_setX",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_XPlane, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XPlane_setX" "', argument " "1"" of type '" "XPlane *""'"); 
  }
  arg1 = reinterpret_cast< XPlane * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "XPlane_setX" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setX(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_XPlane_getX(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  XPlane *arg1 = (XPlane *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:XPlane_getX",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_XPlane, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XPlane_getX" "', argument " "1"" of type '" "XPlane *""'"); 
  }
  arg1 = reinterpret_cast< XPlane * >(argp1);
  {
    try {
      result = (double)(arg1)->getX();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_XPlane_getMinX(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  XPlane *arg1 = (XPlane *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "halfspace", NULL 
  };
  double result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:XPlane_getMinX",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_XPlane, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XPlane_getMinX" "', argument " "1"" of type '" "XPlane *""'"); 
  }
  arg1 = reinterpret_cast< XPlane * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "XPlane_getMinX" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (double)(arg1)->getMinX(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_XPlane_getMaxX(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  XPlane *arg1 = (XPlane *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "halfspace", NULL 
  };
  double result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:XPlane_getMaxX",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_XPlane, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XPlane_getMaxX" "', argument " "1"" of type '" "XPlane *""'"); 
  }
  arg1 = reinterpret_cast< XPlane * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "XPlane_getMaxX" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (double)(arg1)->getMaxX(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_XPlane_toString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  XPlane *arg1 = (XPlane *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:XPlane_toString",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_XPlane, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XPlane_toString" "', argument " "1"" of type '" "XPlane *""'"); 
  }
  arg1 = reinterpret_cast< XPlane * >(argp1);
  {
    try {
      result = (arg1)->toString();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new std::string(static_cast< const std::string& >(result))), SWIGTYPE_p_std__string, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_XPlane(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  XPlane *arg1 = (XPlane *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_XPlane",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_XPlane, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_XPlane" "', argument " "1"" of type '" "XPlane *""'"); 
  }
  arg1 = reinterpret_cast< XPlane * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *XPlane_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_XPlane, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_YPlane(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  double arg1 ;
  int arg2 = (int) (int)0 ;
  char *arg3 = (char *) "" ;
  double val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "y",(char *) "id",(char *) "name", NULL 
  };
  YPlane *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|OO:new_YPlane",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_YPlane" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  if (obj1) {
    ecode2 = SWIG_AsVal_int(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_YPlane" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
  }
  if (obj2) {
    res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_YPlane" "', argument " "3"" of type '" "char const *""'");
    }
    arg3 = reinterpret_cast< char * >(buf3);
  }
  {
    try {
      result = (YPlane *)new YPlane(arg1,arg2,(char const *)arg3);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_YPlane, SWIG_POINTER_NEW |  0 );
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_YPlane_setY(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  YPlane *arg1 = (YPlane *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "y", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:YPlane_setY",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_YPlane, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "YPlane_setY" "', argument " "1"" of type '" "YPlane *""'"); 
  }
  arg1 = reinterpret_cast< YPlane * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "YPlane_setY" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setY(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_YPlane_getY(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  YPlane *arg1 = (YPlane *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:YPlane_getY",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_YPlane, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "YPlane_getY" "', argument " "1"" of type '" "YPlane *""'"); 
  }
  arg1 = reinterpret_cast< YPlane * >(argp1);
  {
    try {
      result = (double)(arg1)->getY();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_YPlane_getMinY(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  YPlane *arg1 = (YPlane *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "halfspace", NULL 
  };
  double result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:YPlane_getMinY",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_YPlane, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "YPlane_getMinY" "', argument " "1"" of type '" "YPlane *""'"); 
  }
  arg1 = reinterpret_cast< YPlane * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "YPlane_getMinY" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (double)(arg1)->getMinY(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_YPlane_getMaxY(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  YPlane *arg1 = (YPlane *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "halfspace", NULL 
  };
  double result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:YPlane_getMaxY",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_YPlane, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "YPlane_getMaxY" "', argument " "1"" of type '" "YPlane *""'"); 
  }
  arg1 = reinterpret_cast< YPlane * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "YPlane_getMaxY" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (double)(arg1)->getMaxY(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_YPlane_toString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  YPlane *arg1 = (YPlane *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:YPlane_toString",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_YPlane, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "YPlane_toString" "', argument " "1"" of type '" "YPlane *""'"); 
  }
  arg1 = reinterpret_cast< YPlane * >(argp1);
  {
    try {
      result = (arg1)->toString();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new std::string(static_cast< const std::string& >(result))), SWIGTYPE_p_std__string, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_YPlane(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  YPlane *arg1 = (YPlane *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_YPlane",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_YPlane, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_YPlane" "', argument " "1"" of type '" "YPlane *""'"); 
  }
  arg1 = reinterpret_cast< YPlane * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *YPlane_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_YPlane, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ZPlane(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  double arg1 ;
  int arg2 = (int) (int)0 ;
  char *arg3 = (char *) "" ;
  double val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "z",(char *) "id",(char *) "name", NULL 
  };
  ZPlane *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|OO:new_ZPlane",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ZPlane" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  if (obj1) {
    ecode2 = SWIG_AsVal_int(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ZPlane" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
  }
  if (obj2) {
    res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_ZPlane" "', argument " "3"" of type '" "char const *""'");
    }
    arg3 = reinterpret_cast< char * >(buf3);
  }
  {
    try {
      result = (ZPlane *)new ZPlane(arg1,arg2,(char const *)arg3);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ZPlane, SWIG_POINTER_NEW |  0 );
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ZPlane_setZ(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  ZPlane *arg1 = (ZPlane *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "z", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:ZPlane_setZ",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ZPlane, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZPlane_setZ" "', argument " "1"" of type '" "ZPlane *""'"); 
  }
  arg1 = reinterpret_cast< ZPlane * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ZPlane_setZ" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setZ(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ZPlane_getZ(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ZPlane *arg1 = (ZPlane *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ZPlane_getZ",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ZPlane, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZPlane_getZ" "', argument " "1"" of type '" "ZPlane *""'"); 
  }
  arg1 = reinterpret_cast< ZPlane * >(argp1);
  {
    try {
      result = (double)(arg1)->getZ();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ZPlane_getMinZ(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  ZPlane *arg1 = (ZPlane *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "halfspace", NULL 
  };
  double result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:ZPlane_getMinZ",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ZPlane, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZPlane_getMinZ" "', argument " "1"" of type '" "ZPlane *""'"); 
  }
  arg1 = reinterpret_cast< ZPlane * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ZPlane_getMinZ" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (double)(arg1)->getMinZ(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ZPlane_getMaxZ(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  ZPlane *arg1 = (ZPlane *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "halfspace", NULL 
  };
  double result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:ZPlane_getMaxZ",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ZPlane, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZPlane_getMaxZ" "', argument " "1"" of type '" "ZPlane *""'"); 
  }
  arg1 = reinterpret_cast< ZPlane * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ZPlane_getMaxZ" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (double)(arg1)->getMaxZ(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ZPlane_toString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ZPlane *arg1 = (ZPlane *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ZPlane_toString",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ZPlane, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZPlane_toString" "', argument " "1"" of type '" "ZPlane *""'"); 
  }
  arg1 = reinterpret_cast< ZPlane * >(argp1);
  {
    try {
      result = (arg1)->toString();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new std::string(static_cast< const std::string& >(result))), SWIGTYPE_p_std__string, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ZPlane(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ZPlane *arg1 = (ZPlane *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ZPlane",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ZPlane, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ZPlane" "', argument " "1"" of type '" "ZPlane *""'"); 
  }
  arg1 = reinterpret_cast< ZPlane * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ZPlane_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ZPlane, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ZCylinder(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  int arg4 = (int) (int)0 ;
  char *arg5 = (char *) "" ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  char *  kwnames[] = {
    (char *) "x",(char *) "y",(char *) "radius",(char *) "id",(char *) "name", NULL 
  };
  ZCylinder *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO|OO:new_ZCylinder",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ZCylinder" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ZCylinder" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_ZCylinder" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  if (obj3) {
    ecode4 = SWIG_AsVal_int(obj3, &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_ZCylinder" "', argument " "4"" of type '" "int""'");
    } 
    arg4 = static_cast< int >(val4);
  }
  if (obj4) {
    res5 = SWIG_AsCharPtrAndSize(obj4, &buf5, NULL, &alloc5);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "new_ZCylinder" "', argument " "5"" of type '" "char const *""'");
    }
    arg5 = reinterpret_cast< char * >(buf5);
  }
  {
    try {
      result = (ZCylinder *)new ZCylinder(arg1,arg2,arg3,arg4,(char const *)arg5);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ZCylinder, SWIG_POINTER_NEW |  0 );
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return resultobj;
fail:
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ZCylinder_getX0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ZCylinder *arg1 = (ZCylinder *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ZCylinder_getX0",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ZCylinder, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCylinder_getX0" "', argument " "1"" of type '" "ZCylinder *""'"); 
  }
  arg1 = reinterpret_cast< ZCylinder * >(argp1);
  {
    try {
      result = (double)(arg1)->getX0();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ZCylinder_getY0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ZCylinder *arg1 = (ZCylinder *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ZCylinder_getY0",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ZCylinder, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCylinder_getY0" "', argument " "1"" of type '" "ZCylinder *""'"); 
  }
  arg1 = reinterpret_cast< ZCylinder * >(argp1);
  {
    try {
      result = (double)(arg1)->getY0();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ZCylinder_getRadius(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ZCylinder *arg1 = (ZCylinder *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ZCylinder_getRadius",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ZCylinder, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCylinder_getRadius" "', argument " "1"" of type '" "ZCylinder *""'"); 
  }
  arg1 = reinterpret_cast< ZCylinder * >(argp1);
  {
    try {
      result = (double)(arg1)->getRadius();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ZCylinder_getMinX(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  ZCylinder *arg1 = (ZCylinder *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "halfspace", NULL 
  };
  double result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:ZCylinder_getMinX",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ZCylinder, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCylinder_getMinX" "', argument " "1"" of type '" "ZCylinder *""'"); 
  }
  arg1 = reinterpret_cast< ZCylinder * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ZCylinder_getMinX" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (double)(arg1)->getMinX(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ZCylinder_getMaxX(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  ZCylinder *arg1 = (ZCylinder *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "halfspace", NULL 
  };
  double result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:ZCylinder_getMaxX",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ZCylinder, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCylinder_getMaxX" "', argument " "1"" of type '" "ZCylinder *""'"); 
  }
  arg1 = reinterpret_cast< ZCylinder * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ZCylinder_getMaxX" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (double)(arg1)->getMaxX(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ZCylinder_getMinY(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  ZCylinder *arg1 = (ZCylinder *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "halfspace", NULL 
  };
  double result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:ZCylinder_getMinY",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ZCylinder, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCylinder_getMinY" "', argument " "1"" of type '" "ZCylinder *""'"); 
  }
  arg1 = reinterpret_cast< ZCylinder * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ZCylinder_getMinY" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (double)(arg1)->getMinY(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ZCylinder_getMaxY(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  ZCylinder *arg1 = (ZCylinder *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "halfspace", NULL 
  };
  double result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:ZCylinder_getMaxY",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ZCylinder, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCylinder_getMaxY" "', argument " "1"" of type '" "ZCylinder *""'"); 
  }
  arg1 = reinterpret_cast< ZCylinder * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ZCylinder_getMaxY" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (double)(arg1)->getMaxY(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ZCylinder_getMinZ(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  ZCylinder *arg1 = (ZCylinder *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "halfspace", NULL 
  };
  double result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:ZCylinder_getMinZ",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ZCylinder, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCylinder_getMinZ" "', argument " "1"" of type '" "ZCylinder *""'"); 
  }
  arg1 = reinterpret_cast< ZCylinder * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ZCylinder_getMinZ" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (double)(arg1)->getMinZ(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ZCylinder_getMaxZ(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  ZCylinder *arg1 = (ZCylinder *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "halfspace", NULL 
  };
  double result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:ZCylinder_getMaxZ",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ZCylinder, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCylinder_getMaxZ" "', argument " "1"" of type '" "ZCylinder *""'"); 
  }
  arg1 = reinterpret_cast< ZCylinder * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ZCylinder_getMaxZ" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (double)(arg1)->getMaxZ(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ZCylinder_evaluate(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  ZCylinder *arg1 = (ZCylinder *) 0 ;
  Point *arg2 = (Point *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "point", NULL 
  };
  double result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:ZCylinder_evaluate",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ZCylinder, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCylinder_evaluate" "', argument " "1"" of type '" "ZCylinder const *""'"); 
  }
  arg1 = reinterpret_cast< ZCylinder * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Point, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ZCylinder_evaluate" "', argument " "2"" of type '" "Point const *""'"); 
  }
  arg2 = reinterpret_cast< Point * >(argp2);
  {
    try {
      result = (double)((ZCylinder const *)arg1)->evaluate((Point const *)arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ZCylinder_intersection(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  ZCylinder *arg1 = (ZCylinder *) 0 ;
  Point *arg2 = (Point *) 0 ;
  double arg3 ;
  Point *arg4 = (Point *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "point",(char *) "angle",(char *) "points", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOO:ZCylinder_intersection",kwnames,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ZCylinder, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCylinder_intersection" "', argument " "1"" of type '" "ZCylinder *""'"); 
  }
  arg1 = reinterpret_cast< ZCylinder * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Point, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ZCylinder_intersection" "', argument " "2"" of type '" "Point *""'"); 
  }
  arg2 = reinterpret_cast< Point * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ZCylinder_intersection" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_Point, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ZCylinder_intersection" "', argument " "4"" of type '" "Point *""'"); 
  }
  arg4 = reinterpret_cast< Point * >(argp4);
  {
    try {
      result = (int)(arg1)->intersection(arg2,arg3,arg4);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ZCylinder_toString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ZCylinder *arg1 = (ZCylinder *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ZCylinder_toString",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ZCylinder, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCylinder_toString" "', argument " "1"" of type '" "ZCylinder *""'"); 
  }
  arg1 = reinterpret_cast< ZCylinder * >(argp1);
  {
    try {
      result = (arg1)->toString();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new std::string(static_cast< const std::string& >(result))), SWIGTYPE_p_std__string, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ZCylinder(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ZCylinder *arg1 = (ZCylinder *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ZCylinder",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ZCylinder, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ZCylinder" "', argument " "1"" of type '" "ZCylinder *""'"); 
  }
  arg1 = reinterpret_cast< ZCylinder * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ZCylinder_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ZCylinder, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_Timer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Timer *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Timer")) SWIG_fail;
  {
    try {
      result = (Timer *)new Timer();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Timer, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Timer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Timer *arg1 = (Timer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Timer",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Timer, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Timer" "', argument " "1"" of type '" "Timer *""'"); 
  }
  arg1 = reinterpret_cast< Timer * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Timer_Get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Timer *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":Timer_Get")) SWIG_fail;
  {
    try {
      result = (Timer *)Timer::Get();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Timer, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Timer_startTimer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Timer *arg1 = (Timer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Timer_startTimer",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Timer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Timer_startTimer" "', argument " "1"" of type '" "Timer *""'"); 
  }
  arg1 = reinterpret_cast< Timer * >(argp1);
  {
    try {
      (arg1)->startTimer();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Timer_stopTimer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Timer *arg1 = (Timer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Timer_stopTimer",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Timer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Timer_stopTimer" "', argument " "1"" of type '" "Timer *""'"); 
  }
  arg1 = reinterpret_cast< Timer * >(argp1);
  {
    try {
      (arg1)->stopTimer();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Timer_recordSplit(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Timer *arg1 = (Timer *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "msg", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Timer_recordSplit",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Timer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Timer_recordSplit" "', argument " "1"" of type '" "Timer *""'"); 
  }
  arg1 = reinterpret_cast< Timer * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Timer_recordSplit" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    try {
      (arg1)->recordSplit((char const *)arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Timer_getTime(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Timer *arg1 = (Timer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Timer_getTime",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Timer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Timer_getTime" "', argument " "1"" of type '" "Timer *""'"); 
  }
  arg1 = reinterpret_cast< Timer * >(argp1);
  {
    try {
      result = (double)(arg1)->getTime();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Timer_getSplit(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Timer *arg1 = (Timer *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "msg", NULL 
  };
  double result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Timer_getSplit",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Timer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Timer_getSplit" "', argument " "1"" of type '" "Timer *""'"); 
  }
  arg1 = reinterpret_cast< Timer * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Timer_getSplit" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    try {
      result = (double)(arg1)->getSplit((char const *)arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Timer_printSplits(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Timer *arg1 = (Timer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Timer_printSplits",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Timer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Timer_printSplits" "', argument " "1"" of type '" "Timer *""'"); 
  }
  arg1 = reinterpret_cast< Timer * >(argp1);
  {
    try {
      (arg1)->printSplits();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Timer_clearSplit(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Timer *arg1 = (Timer *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "msg", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Timer_clearSplit",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Timer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Timer_clearSplit" "', argument " "1"" of type '" "Timer *""'"); 
  }
  arg1 = reinterpret_cast< Timer * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Timer_clearSplit" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    try {
      (arg1)->clearSplit((char const *)arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Timer_clearSplits(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Timer *arg1 = (Timer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Timer_clearSplits",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Timer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Timer_clearSplits" "', argument " "1"" of type '" "Timer *""'"); 
  }
  arg1 = reinterpret_cast< Timer * >(argp1);
  {
    try {
      (arg1)->clearSplits();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Timer_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Timer, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_segment__length_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  segment *arg1 = (segment *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:segment__length_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_segment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "segment__length_set" "', argument " "1"" of type '" "segment *""'"); 
  }
  arg1 = reinterpret_cast< segment * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "segment__length_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  if (arg1) (arg1)->_length = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_segment__length_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  segment *arg1 = (segment *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:segment__length_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_segment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "segment__length_get" "', argument " "1"" of type '" "segment *""'"); 
  }
  arg1 = reinterpret_cast< segment * >(argp1);
  result = (float) ((arg1)->_length);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_segment__material_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  segment *arg1 = (segment *) 0 ;
  Material *arg2 = (Material *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:segment__material_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_segment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "segment__material_set" "', argument " "1"" of type '" "segment *""'"); 
  }
  arg1 = reinterpret_cast< segment * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Material, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "segment__material_set" "', argument " "2"" of type '" "Material *""'"); 
  }
  arg2 = reinterpret_cast< Material * >(argp2);
  if (arg1) (arg1)->_material = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_segment__material_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  segment *arg1 = (segment *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Material *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:segment__material_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_segment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "segment__material_get" "', argument " "1"" of type '" "segment *""'"); 
  }
  arg1 = reinterpret_cast< segment * >(argp1);
  result = (Material *) ((arg1)->_material);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Material, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_segment__region_id_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  segment *arg1 = (segment *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:segment__region_id_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_segment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "segment__region_id_set" "', argument " "1"" of type '" "segment *""'"); 
  }
  arg1 = reinterpret_cast< segment * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "segment__region_id_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->_region_id = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_segment__region_id_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  segment *arg1 = (segment *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:segment__region_id_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_segment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "segment__region_id_get" "', argument " "1"" of type '" "segment *""'"); 
  }
  arg1 = reinterpret_cast< segment * >(argp1);
  result = (int) ((arg1)->_region_id);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_segment__cmfd_surface_fwd_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  segment *arg1 = (segment *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:segment__cmfd_surface_fwd_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_segment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "segment__cmfd_surface_fwd_set" "', argument " "1"" of type '" "segment *""'"); 
  }
  arg1 = reinterpret_cast< segment * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "segment__cmfd_surface_fwd_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->_cmfd_surface_fwd = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_segment__cmfd_surface_fwd_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  segment *arg1 = (segment *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:segment__cmfd_surface_fwd_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_segment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "segment__cmfd_surface_fwd_get" "', argument " "1"" of type '" "segment *""'"); 
  }
  arg1 = reinterpret_cast< segment * >(argp1);
  result = (int) ((arg1)->_cmfd_surface_fwd);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_segment__cmfd_surface_bwd_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  segment *arg1 = (segment *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:segment__cmfd_surface_bwd_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_segment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "segment__cmfd_surface_bwd_set" "', argument " "1"" of type '" "segment *""'"); 
  }
  arg1 = reinterpret_cast< segment * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "segment__cmfd_surface_bwd_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->_cmfd_surface_bwd = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_segment__cmfd_surface_bwd_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  segment *arg1 = (segment *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:segment__cmfd_surface_bwd_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_segment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "segment__cmfd_surface_bwd_get" "', argument " "1"" of type '" "segment *""'"); 
  }
  arg1 = reinterpret_cast< segment * >(argp1);
  result = (int) ((arg1)->_cmfd_surface_bwd);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_segment(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  segment *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_segment")) SWIG_fail;
  {
    try {
      result = (segment *)new segment();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_segment, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_segment(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  segment *arg1 = (segment *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_segment",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_segment, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_segment" "', argument " "1"" of type '" "segment *""'"); 
  }
  arg1 = reinterpret_cast< segment * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *segment_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_segment, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_Track(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Track *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Track")) SWIG_fail;
  {
    try {
      result = (Track *)new Track();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Track, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Track(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Track *arg1 = (Track *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Track",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Track, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Track" "', argument " "1"" of type '" "Track *""'"); 
  }
  arg1 = reinterpret_cast< Track * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Track_setValues(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Track *arg1 = (Track *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  double arg8 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  double val8 ;
  int ecode8 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "start_x",(char *) "start_y",(char *) "start_z",(char *) "end_x",(char *) "end_y",(char *) "end_z",(char *) "phi", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOOOOOO:Track_setValues",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Track, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Track_setValues" "', argument " "1"" of type '" "Track *""'"); 
  }
  arg1 = reinterpret_cast< Track * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Track_setValues" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Track_setValues" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Track_setValues" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Track_setValues" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "Track_setValues" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  ecode7 = SWIG_AsVal_double(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "Track_setValues" "', argument " "7"" of type '" "double""'");
  } 
  arg7 = static_cast< double >(val7);
  ecode8 = SWIG_AsVal_double(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "Track_setValues" "', argument " "8"" of type '" "double""'");
  } 
  arg8 = static_cast< double >(val8);
  {
    try {
      (arg1)->setValues(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Track_setUid(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Track *arg1 = (Track *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "uid", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Track_setUid",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Track, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Track_setUid" "', argument " "1"" of type '" "Track *""'"); 
  }
  arg1 = reinterpret_cast< Track * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Track_setUid" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->setUid(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Track_setPhi(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Track *arg1 = (Track *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "phi", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Track_setPhi",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Track, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Track_setPhi" "', argument " "1"" of type '" "Track *""'"); 
  }
  arg1 = reinterpret_cast< Track * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Track_setPhi" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setPhi(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Track_setAzimAngleIndex(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Track *arg1 = (Track *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "index", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Track_setAzimAngleIndex",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Track, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Track_setAzimAngleIndex" "', argument " "1"" of type '" "Track *""'"); 
  }
  arg1 = reinterpret_cast< Track * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Track_setAzimAngleIndex" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->setAzimAngleIndex(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Track_setPeriodicTrackIndex(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Track *arg1 = (Track *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "index", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Track_setPeriodicTrackIndex",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Track, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Track_setPeriodicTrackIndex" "', argument " "1"" of type '" "Track *""'"); 
  }
  arg1 = reinterpret_cast< Track * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Track_setPeriodicTrackIndex" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->setPeriodicTrackIndex(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Track_setReflectiveTrackIndex(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Track *arg1 = (Track *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "index", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Track_setReflectiveTrackIndex",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Track, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Track_setReflectiveTrackIndex" "', argument " "1"" of type '" "Track *""'"); 
  }
  arg1 = reinterpret_cast< Track * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Track_setReflectiveTrackIndex" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->setReflectiveTrackIndex(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Track_setNextIn(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Track *arg1 = (Track *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "next_in", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Track_setNextIn",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Track, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Track_setNextIn" "', argument " "1"" of type '" "Track *""'"); 
  }
  arg1 = reinterpret_cast< Track * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Track_setNextIn" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      (arg1)->setNextIn(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Track_setNextOut(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Track *arg1 = (Track *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "next_out", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Track_setNextOut",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Track, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Track_setNextOut" "', argument " "1"" of type '" "Track *""'"); 
  }
  arg1 = reinterpret_cast< Track * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Track_setNextOut" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      (arg1)->setNextOut(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Track_setBCIn(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Track *arg1 = (Track *) 0 ;
  boundaryType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "bc_in", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Track_setBCIn",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Track, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Track_setBCIn" "', argument " "1"" of type '" "Track *""'"); 
  }
  arg1 = reinterpret_cast< Track * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Track_setBCIn" "', argument " "2"" of type '" "boundaryType""'");
  } 
  arg2 = static_cast< boundaryType >(val2);
  {
    try {
      (arg1)->setBCIn(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Track_setBCOut(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Track *arg1 = (Track *) 0 ;
  boundaryType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "bc_out", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Track_setBCOut",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Track, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Track_setBCOut" "', argument " "1"" of type '" "Track *""'"); 
  }
  arg1 = reinterpret_cast< Track * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Track_setBCOut" "', argument " "2"" of type '" "boundaryType""'");
  } 
  arg2 = static_cast< boundaryType >(val2);
  {
    try {
      (arg1)->setBCOut(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Track_setTrackIn(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Track *arg1 = (Track *) 0 ;
  Track *arg2 = (Track *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "track_in", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Track_setTrackIn",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Track, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Track_setTrackIn" "', argument " "1"" of type '" "Track *""'"); 
  }
  arg1 = reinterpret_cast< Track * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Track, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Track_setTrackIn" "', argument " "2"" of type '" "Track *""'"); 
  }
  arg2 = reinterpret_cast< Track * >(argp2);
  {
    try {
      (arg1)->setTrackIn(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Track_setTrackOut(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Track *arg1 = (Track *) 0 ;
  Track *arg2 = (Track *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "track_out", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Track_setTrackOut",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Track, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Track_setTrackOut" "', argument " "1"" of type '" "Track *""'"); 
  }
  arg1 = reinterpret_cast< Track * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Track, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Track_setTrackOut" "', argument " "2"" of type '" "Track *""'"); 
  }
  arg2 = reinterpret_cast< Track * >(argp2);
  {
    try {
      (arg1)->setTrackOut(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Track_getUid(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Track *arg1 = (Track *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Track_getUid",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Track, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Track_getUid" "', argument " "1"" of type '" "Track *""'"); 
  }
  arg1 = reinterpret_cast< Track * >(argp1);
  {
    try {
      result = (int)(arg1)->getUid();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Track_getEnd(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Track *arg1 = (Track *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Point *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Track_getEnd",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Track, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Track_getEnd" "', argument " "1"" of type '" "Track *""'"); 
  }
  arg1 = reinterpret_cast< Track * >(argp1);
  {
    try {
      result = (Point *)(arg1)->getEnd();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Point, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Track_getStart(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Track *arg1 = (Track *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Point *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Track_getStart",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Track, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Track_getStart" "', argument " "1"" of type '" "Track *""'"); 
  }
  arg1 = reinterpret_cast< Track * >(argp1);
  {
    try {
      result = (Point *)(arg1)->getStart();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Point, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Track_getPhi(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Track *arg1 = (Track *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Track_getPhi",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Track, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Track_getPhi" "', argument " "1"" of type '" "Track const *""'"); 
  }
  arg1 = reinterpret_cast< Track * >(argp1);
  {
    try {
      result = (double)((Track const *)arg1)->getPhi();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Track_getAzimAngleIndex(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Track *arg1 = (Track *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Track_getAzimAngleIndex",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Track, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Track_getAzimAngleIndex" "', argument " "1"" of type '" "Track const *""'"); 
  }
  arg1 = reinterpret_cast< Track * >(argp1);
  {
    try {
      result = (int)((Track const *)arg1)->getAzimAngleIndex();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Track_getPeriodicTrackIndex(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Track *arg1 = (Track *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Track_getPeriodicTrackIndex",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Track, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Track_getPeriodicTrackIndex" "', argument " "1"" of type '" "Track const *""'"); 
  }
  arg1 = reinterpret_cast< Track * >(argp1);
  {
    try {
      result = (int)((Track const *)arg1)->getPeriodicTrackIndex();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Track_getReflectiveTrackIndex(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Track *arg1 = (Track *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Track_getReflectiveTrackIndex",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Track, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Track_getReflectiveTrackIndex" "', argument " "1"" of type '" "Track const *""'"); 
  }
  arg1 = reinterpret_cast< Track * >(argp1);
  {
    try {
      result = (int)((Track const *)arg1)->getReflectiveTrackIndex();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Track_getSegment(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Track *arg1 = (Track *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "s", NULL 
  };
  segment *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Track_getSegment",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Track, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Track_getSegment" "', argument " "1"" of type '" "Track *""'"); 
  }
  arg1 = reinterpret_cast< Track * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Track_getSegment" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (segment *)(arg1)->getSegment(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_segment, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Track_getSegments(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Track *arg1 = (Track *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  segment *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Track_getSegments",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Track, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Track_getSegments" "', argument " "1"" of type '" "Track *""'"); 
  }
  arg1 = reinterpret_cast< Track * >(argp1);
  {
    try {
      result = (segment *)(arg1)->getSegments();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_segment, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Track_getNumSegments(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Track *arg1 = (Track *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Track_getNumSegments",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Track, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Track_getNumSegments" "', argument " "1"" of type '" "Track *""'"); 
  }
  arg1 = reinterpret_cast< Track * >(argp1);
  {
    try {
      result = (int)(arg1)->getNumSegments();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Track_getTrackIn(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Track *arg1 = (Track *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Track *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Track_getTrackIn",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Track, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Track_getTrackIn" "', argument " "1"" of type '" "Track const *""'"); 
  }
  arg1 = reinterpret_cast< Track * >(argp1);
  {
    try {
      result = (Track *)((Track const *)arg1)->getTrackIn();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Track, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Track_getTrackOut(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Track *arg1 = (Track *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Track *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Track_getTrackOut",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Track, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Track_getTrackOut" "', argument " "1"" of type '" "Track const *""'"); 
  }
  arg1 = reinterpret_cast< Track * >(argp1);
  {
    try {
      result = (Track *)((Track const *)arg1)->getTrackOut();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Track, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Track_isNextIn(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Track *arg1 = (Track *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Track_isNextIn",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Track, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Track_isNextIn" "', argument " "1"" of type '" "Track const *""'"); 
  }
  arg1 = reinterpret_cast< Track * >(argp1);
  {
    try {
      result = (bool)((Track const *)arg1)->isNextIn();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Track_isNextOut(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Track *arg1 = (Track *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Track_isNextOut",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Track, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Track_isNextOut" "', argument " "1"" of type '" "Track const *""'"); 
  }
  arg1 = reinterpret_cast< Track * >(argp1);
  {
    try {
      result = (bool)((Track const *)arg1)->isNextOut();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Track_getBCIn(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Track *arg1 = (Track *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  boundaryType result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Track_getBCIn",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Track, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Track_getBCIn" "', argument " "1"" of type '" "Track const *""'"); 
  }
  arg1 = reinterpret_cast< Track * >(argp1);
  {
    try {
      result = (boundaryType)((Track const *)arg1)->getBCIn();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Track_getBCOut(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Track *arg1 = (Track *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  boundaryType result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Track_getBCOut",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Track, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Track_getBCOut" "', argument " "1"" of type '" "Track const *""'"); 
  }
  arg1 = reinterpret_cast< Track * >(argp1);
  {
    try {
      result = (boundaryType)((Track const *)arg1)->getBCOut();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Track_getTransferFluxIn(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Track *arg1 = (Track *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Track_getTransferFluxIn",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Track, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Track_getTransferFluxIn" "', argument " "1"" of type '" "Track const *""'"); 
  }
  arg1 = reinterpret_cast< Track * >(argp1);
  {
    try {
      result = (bool)((Track const *)arg1)->getTransferFluxIn();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Track_getTransferFluxOut(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Track *arg1 = (Track *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Track_getTransferFluxOut",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Track, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Track_getTransferFluxOut" "', argument " "1"" of type '" "Track const *""'"); 
  }
  arg1 = reinterpret_cast< Track * >(argp1);
  {
    try {
      result = (bool)((Track const *)arg1)->getTransferFluxOut();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Track_addSegment(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Track *arg1 = (Track *) 0 ;
  segment *arg2 = (segment *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "to_add", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Track_addSegment",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Track, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Track_addSegment" "', argument " "1"" of type '" "Track *""'"); 
  }
  arg1 = reinterpret_cast< Track * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_segment, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Track_addSegment" "', argument " "2"" of type '" "segment *""'"); 
  }
  arg2 = reinterpret_cast< segment * >(argp2);
  {
    try {
      (arg1)->addSegment(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Track_removeSegment(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Track *arg1 = (Track *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "index", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Track_removeSegment",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Track, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Track_removeSegment" "', argument " "1"" of type '" "Track *""'"); 
  }
  arg1 = reinterpret_cast< Track * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Track_removeSegment" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->removeSegment(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Track_insertSegment(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Track *arg1 = (Track *) 0 ;
  int arg2 ;
  segment *arg3 = (segment *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "index",(char *) "segment", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:Track_insertSegment",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Track, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Track_insertSegment" "', argument " "1"" of type '" "Track *""'"); 
  }
  arg1 = reinterpret_cast< Track * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Track_insertSegment" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_segment, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Track_insertSegment" "', argument " "3"" of type '" "segment *""'"); 
  }
  arg3 = reinterpret_cast< segment * >(argp3);
  {
    try {
      (arg1)->insertSegment(arg2,arg3);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Track_clearSegments(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Track *arg1 = (Track *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Track_clearSegments",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Track, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Track_clearSegments" "', argument " "1"" of type '" "Track *""'"); 
  }
  arg1 = reinterpret_cast< Track * >(argp1);
  {
    try {
      (arg1)->clearSegments();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Track_toString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Track *arg1 = (Track *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Track_toString",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Track, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Track_toString" "', argument " "1"" of type '" "Track *""'"); 
  }
  arg1 = reinterpret_cast< Track * >(argp1);
  {
    try {
      result = (arg1)->toString();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new std::string(static_cast< const std::string& >(result))), SWIGTYPE_p_std__string, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Track_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Track, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_TrackGenerator(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Geometry *arg1 = (Geometry *) 0 ;
  int arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "geometry",(char *) "num_azim",(char *) "azim_spacing", NULL 
  };
  TrackGenerator *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:new_TrackGenerator",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Geometry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TrackGenerator" "', argument " "1"" of type '" "Geometry *""'"); 
  }
  arg1 = reinterpret_cast< Geometry * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_TrackGenerator" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_TrackGenerator" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (TrackGenerator *)new TrackGenerator(arg1,arg2,arg3);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TrackGenerator, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_TrackGenerator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TrackGenerator *arg1 = (TrackGenerator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_TrackGenerator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TrackGenerator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_TrackGenerator" "', argument " "1"" of type '" "TrackGenerator *""'"); 
  }
  arg1 = reinterpret_cast< TrackGenerator * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TrackGenerator_getNumAzim(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TrackGenerator *arg1 = (TrackGenerator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TrackGenerator_getNumAzim",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TrackGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TrackGenerator_getNumAzim" "', argument " "1"" of type '" "TrackGenerator *""'"); 
  }
  arg1 = reinterpret_cast< TrackGenerator * >(argp1);
  {
    try {
      result = (int)(arg1)->getNumAzim();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TrackGenerator_getNumPolarAngles(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TrackGenerator *arg1 = (TrackGenerator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TrackGenerator_getNumPolarAngles",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TrackGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TrackGenerator_getNumPolarAngles" "', argument " "1"" of type '" "TrackGenerator *""'"); 
  }
  arg1 = reinterpret_cast< TrackGenerator * >(argp1);
  {
    try {
      result = (int)(arg1)->getNumPolarAngles();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TrackGenerator_getDesiredAzimSpacing(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TrackGenerator *arg1 = (TrackGenerator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TrackGenerator_getDesiredAzimSpacing",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TrackGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TrackGenerator_getDesiredAzimSpacing" "', argument " "1"" of type '" "TrackGenerator *""'"); 
  }
  arg1 = reinterpret_cast< TrackGenerator * >(argp1);
  {
    try {
      result = (double)(arg1)->getDesiredAzimSpacing();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TrackGenerator_getPhi(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  TrackGenerator *arg1 = (TrackGenerator *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "azim", NULL 
  };
  double result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:TrackGenerator_getPhi",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TrackGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TrackGenerator_getPhi" "', argument " "1"" of type '" "TrackGenerator *""'"); 
  }
  arg1 = reinterpret_cast< TrackGenerator * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TrackGenerator_getPhi" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (double)(arg1)->getPhi(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TrackGenerator_getSinTheta(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  TrackGenerator *arg1 = (TrackGenerator *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "azim",(char *) "polar", NULL 
  };
  double result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:TrackGenerator_getSinTheta",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TrackGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TrackGenerator_getSinTheta" "', argument " "1"" of type '" "TrackGenerator *""'"); 
  }
  arg1 = reinterpret_cast< TrackGenerator * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TrackGenerator_getSinTheta" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TrackGenerator_getSinTheta" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (double)(arg1)->getSinTheta(arg2,arg3);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TrackGenerator_getGeometry(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TrackGenerator *arg1 = (TrackGenerator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Geometry *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TrackGenerator_getGeometry",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TrackGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TrackGenerator_getGeometry" "', argument " "1"" of type '" "TrackGenerator *""'"); 
  }
  arg1 = reinterpret_cast< TrackGenerator * >(argp1);
  {
    try {
      result = (Geometry *)(arg1)->getGeometry();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Geometry, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TrackGenerator_getQuadrature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TrackGenerator *arg1 = (TrackGenerator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Quadrature *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TrackGenerator_getQuadrature",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TrackGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TrackGenerator_getQuadrature" "', argument " "1"" of type '" "TrackGenerator *""'"); 
  }
  arg1 = reinterpret_cast< TrackGenerator * >(argp1);
  {
    try {
      result = (Quadrature *)(arg1)->getQuadrature();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Quadrature, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TrackGenerator_getNumTracks(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TrackGenerator *arg1 = (TrackGenerator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TrackGenerator_getNumTracks",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TrackGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TrackGenerator_getNumTracks" "', argument " "1"" of type '" "TrackGenerator *""'"); 
  }
  arg1 = reinterpret_cast< TrackGenerator * >(argp1);
  {
    try {
      result = (int)(arg1)->getNumTracks();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TrackGenerator_getNumX(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  TrackGenerator *arg1 = (TrackGenerator *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "azim", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:TrackGenerator_getNumX",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TrackGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TrackGenerator_getNumX" "', argument " "1"" of type '" "TrackGenerator *""'"); 
  }
  arg1 = reinterpret_cast< TrackGenerator * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TrackGenerator_getNumX" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (int)(arg1)->getNumX(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TrackGenerator_getNumY(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  TrackGenerator *arg1 = (TrackGenerator *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "azim", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:TrackGenerator_getNumY",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TrackGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TrackGenerator_getNumY" "', argument " "1"" of type '" "TrackGenerator *""'"); 
  }
  arg1 = reinterpret_cast< TrackGenerator * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TrackGenerator_getNumY" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (int)(arg1)->getNumY(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TrackGenerator_getNumSegments(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TrackGenerator *arg1 = (TrackGenerator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TrackGenerator_getNumSegments",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TrackGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TrackGenerator_getNumSegments" "', argument " "1"" of type '" "TrackGenerator *""'"); 
  }
  arg1 = reinterpret_cast< TrackGenerator * >(argp1);
  {
    try {
      result = (int)(arg1)->getNumSegments();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TrackGenerator_getTracks(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TrackGenerator *arg1 = (TrackGenerator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Track **result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TrackGenerator_getTracks",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TrackGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TrackGenerator_getTracks" "', argument " "1"" of type '" "TrackGenerator *""'"); 
  }
  arg1 = reinterpret_cast< TrackGenerator * >(argp1);
  {
    try {
      result = (Track **)(arg1)->getTracks();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_p_Track, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TrackGenerator_getTracksArray(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TrackGenerator *arg1 = (TrackGenerator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Track **result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TrackGenerator_getTracksArray",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TrackGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TrackGenerator_getTracksArray" "', argument " "1"" of type '" "TrackGenerator *""'"); 
  }
  arg1 = reinterpret_cast< TrackGenerator * >(argp1);
  {
    try {
      result = (Track **)(arg1)->getTracksArray();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_p_Track, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TrackGenerator_retrieveMaxOpticalLength(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TrackGenerator *arg1 = (TrackGenerator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TrackGenerator_retrieveMaxOpticalLength",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TrackGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TrackGenerator_retrieveMaxOpticalLength" "', argument " "1"" of type '" "TrackGenerator *""'"); 
  }
  arg1 = reinterpret_cast< TrackGenerator * >(argp1);
  {
    try {
      result = (float)(arg1)->retrieveMaxOpticalLength();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TrackGenerator_getNumThreads(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TrackGenerator *arg1 = (TrackGenerator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TrackGenerator_getNumThreads",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TrackGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TrackGenerator_getNumThreads" "', argument " "1"" of type '" "TrackGenerator *""'"); 
  }
  arg1 = reinterpret_cast< TrackGenerator * >(argp1);
  {
    try {
      result = (int)(arg1)->getNumThreads();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TrackGenerator_getFSRVolumes(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TrackGenerator *arg1 = (TrackGenerator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TrackGenerator_getFSRVolumes",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TrackGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TrackGenerator_getFSRVolumes" "', argument " "1"" of type '" "TrackGenerator *""'"); 
  }
  arg1 = reinterpret_cast< TrackGenerator * >(argp1);
  {
    try {
      result = (float *)(arg1)->getFSRVolumes();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_float, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TrackGenerator_getFSRVolume(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  TrackGenerator *arg1 = (TrackGenerator *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "fsr_id", NULL 
  };
  float result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:TrackGenerator_getFSRVolume",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TrackGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TrackGenerator_getFSRVolume" "', argument " "1"" of type '" "TrackGenerator *""'"); 
  }
  arg1 = reinterpret_cast< TrackGenerator * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TrackGenerator_getFSRVolume" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(arg1)->getFSRVolume(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TrackGenerator_getMaxOpticalLength(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TrackGenerator *arg1 = (TrackGenerator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TrackGenerator_getMaxOpticalLength",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TrackGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TrackGenerator_getMaxOpticalLength" "', argument " "1"" of type '" "TrackGenerator *""'"); 
  }
  arg1 = reinterpret_cast< TrackGenerator * >(argp1);
  {
    try {
      result = (float)(arg1)->getMaxOpticalLength();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TrackGenerator_getZCoord(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TrackGenerator *arg1 = (TrackGenerator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TrackGenerator_getZCoord",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TrackGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TrackGenerator_getZCoord" "', argument " "1"" of type '" "TrackGenerator *""'"); 
  }
  arg1 = reinterpret_cast< TrackGenerator * >(argp1);
  {
    try {
      result = (double)(arg1)->getZCoord();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TrackGenerator_getFSRLocks(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TrackGenerator *arg1 = (TrackGenerator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  omp_lock_t *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TrackGenerator_getFSRLocks",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TrackGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TrackGenerator_getFSRLocks" "', argument " "1"" of type '" "TrackGenerator *""'"); 
  }
  arg1 = reinterpret_cast< TrackGenerator * >(argp1);
  {
    try {
      result = (omp_lock_t *)(arg1)->getFSRLocks();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_omp_lock_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TrackGenerator_getSegmentFormation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TrackGenerator *arg1 = (TrackGenerator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  segmentationType result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TrackGenerator_getSegmentFormation",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TrackGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TrackGenerator_getSegmentFormation" "', argument " "1"" of type '" "TrackGenerator *""'"); 
  }
  arg1 = reinterpret_cast< TrackGenerator * >(argp1);
  {
    try {
      result = (arg1)->getSegmentFormation();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new segmentationType(static_cast< const segmentationType& >(result))), SWIGTYPE_p_segmentationType, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TrackGenerator_setNumAzim(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  TrackGenerator *arg1 = (TrackGenerator *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "num_azim", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:TrackGenerator_setNumAzim",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TrackGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TrackGenerator_setNumAzim" "', argument " "1"" of type '" "TrackGenerator *""'"); 
  }
  arg1 = reinterpret_cast< TrackGenerator * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TrackGenerator_setNumAzim" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->setNumAzim(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TrackGenerator_setDesiredAzimSpacing(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  TrackGenerator *arg1 = (TrackGenerator *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "azim_spacing", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:TrackGenerator_setDesiredAzimSpacing",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TrackGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TrackGenerator_setDesiredAzimSpacing" "', argument " "1"" of type '" "TrackGenerator *""'"); 
  }
  arg1 = reinterpret_cast< TrackGenerator * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TrackGenerator_setDesiredAzimSpacing" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setDesiredAzimSpacing(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TrackGenerator_setGeometry(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  TrackGenerator *arg1 = (TrackGenerator *) 0 ;
  Geometry *arg2 = (Geometry *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "geometry", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:TrackGenerator_setGeometry",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TrackGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TrackGenerator_setGeometry" "', argument " "1"" of type '" "TrackGenerator *""'"); 
  }
  arg1 = reinterpret_cast< TrackGenerator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Geometry, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TrackGenerator_setGeometry" "', argument " "2"" of type '" "Geometry *""'"); 
  }
  arg2 = reinterpret_cast< Geometry * >(argp2);
  {
    try {
      (arg1)->setGeometry(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TrackGenerator_setQuadrature(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  TrackGenerator *arg1 = (TrackGenerator *) 0 ;
  Quadrature *arg2 = (Quadrature *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "quadrature", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:TrackGenerator_setQuadrature",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TrackGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TrackGenerator_setQuadrature" "', argument " "1"" of type '" "TrackGenerator *""'"); 
  }
  arg1 = reinterpret_cast< TrackGenerator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Quadrature, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TrackGenerator_setQuadrature" "', argument " "2"" of type '" "Quadrature *""'"); 
  }
  arg2 = reinterpret_cast< Quadrature * >(argp2);
  {
    try {
      (arg1)->setQuadrature(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TrackGenerator_setNumThreads(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  TrackGenerator *arg1 = (TrackGenerator *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "num_threads", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:TrackGenerator_setNumThreads",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TrackGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TrackGenerator_setNumThreads" "', argument " "1"" of type '" "TrackGenerator *""'"); 
  }
  arg1 = reinterpret_cast< TrackGenerator * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TrackGenerator_setNumThreads" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->setNumThreads(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TrackGenerator_setZCoord(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  TrackGenerator *arg1 = (TrackGenerator *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "z_coord", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:TrackGenerator_setZCoord",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TrackGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TrackGenerator_setZCoord" "', argument " "1"" of type '" "TrackGenerator *""'"); 
  }
  arg1 = reinterpret_cast< TrackGenerator * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TrackGenerator_setZCoord" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setZCoord(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TrackGenerator_setTracksFilenameSuffix(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  TrackGenerator *arg1 = (TrackGenerator *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "suffix", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:TrackGenerator_setTracksFilenameSuffix",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TrackGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TrackGenerator_setTracksFilenameSuffix" "', argument " "1"" of type '" "TrackGenerator *""'"); 
  }
  arg1 = reinterpret_cast< TrackGenerator * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TrackGenerator_setTracksFilenameSuffix" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    try {
      (arg1)->setTracksFilenameSuffix(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TrackGenerator_containsTracks(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TrackGenerator *arg1 = (TrackGenerator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TrackGenerator_containsTracks",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TrackGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TrackGenerator_containsTracks" "', argument " "1"" of type '" "TrackGenerator *""'"); 
  }
  arg1 = reinterpret_cast< TrackGenerator * >(argp1);
  {
    try {
      result = (bool)(arg1)->containsTracks();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TrackGenerator_retrieveTrackCoords(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  TrackGenerator *arg1 = (TrackGenerator *) 0 ;
  double *arg2 = (double *) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *array2 = NULL ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "coords", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:TrackGenerator_retrieveTrackCoords",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TrackGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TrackGenerator_retrieveTrackCoords" "', argument " "1"" of type '" "TrackGenerator *""'"); 
  }
  arg1 = reinterpret_cast< TrackGenerator * >(argp1);
  {
    npy_intp dims[1];
    if (!PyInt_Check(obj1))
    {
      const char* typestring = pytype_string(obj1);
      PyErr_Format(PyExc_TypeError,
        "Int dimension expected.  '%s' given.",
        typestring);
      SWIG_fail;
    }
    arg3 = (int) PyInt_AsLong(obj1);
    dims[0] = (npy_intp) arg3;
    array2 = PyArray_SimpleNew(1, dims, NPY_DOUBLE);
    if (!array2) SWIG_fail;
    arg2 = (double*) array_data(array2);
  }
  {
    try {
      (arg1)->retrieveTrackCoords(arg2,arg3);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  {
    resultobj = SWIG_Python_AppendOutput(resultobj,(PyObject*)array2);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TrackGenerator_retrieveSegmentCoords(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  TrackGenerator *arg1 = (TrackGenerator *) 0 ;
  double *arg2 = (double *) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *array2 = NULL ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "coords", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:TrackGenerator_retrieveSegmentCoords",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TrackGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TrackGenerator_retrieveSegmentCoords" "', argument " "1"" of type '" "TrackGenerator *""'"); 
  }
  arg1 = reinterpret_cast< TrackGenerator * >(argp1);
  {
    npy_intp dims[1];
    if (!PyInt_Check(obj1))
    {
      const char* typestring = pytype_string(obj1);
      PyErr_Format(PyExc_TypeError,
        "Int dimension expected.  '%s' given.",
        typestring);
      SWIG_fail;
    }
    arg3 = (int) PyInt_AsLong(obj1);
    dims[0] = (npy_intp) arg3;
    array2 = PyArray_SimpleNew(1, dims, NPY_DOUBLE);
    if (!array2) SWIG_fail;
    arg2 = (double*) array_data(array2);
  }
  {
    try {
      (arg1)->retrieveSegmentCoords(arg2,arg3);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  {
    resultobj = SWIG_Python_AppendOutput(resultobj,(PyObject*)array2);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TrackGenerator_generateTracks(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  TrackGenerator *arg1 = (TrackGenerator *) 0 ;
  bool arg2 = (bool) true ;
  bool arg3 = (bool) false ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "store",(char *) "neighbor_cells", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|OO:TrackGenerator_generateTracks",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TrackGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TrackGenerator_generateTracks" "', argument " "1"" of type '" "TrackGenerator *""'"); 
  }
  arg1 = reinterpret_cast< TrackGenerator * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_bool(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TrackGenerator_generateTracks" "', argument " "2"" of type '" "bool""'");
    } 
    arg2 = static_cast< bool >(val2);
  }
  if (obj2) {
    ecode3 = SWIG_AsVal_bool(obj2, &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TrackGenerator_generateTracks" "', argument " "3"" of type '" "bool""'");
    } 
    arg3 = static_cast< bool >(val3);
  }
  {
    try {
      (arg1)->generateTracks(arg2,arg3);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TrackGenerator_correctFSRVolume(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  TrackGenerator *arg1 = (TrackGenerator *) 0 ;
  int arg2 ;
  float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "fsr_id",(char *) "fsr_volume", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:TrackGenerator_correctFSRVolume",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TrackGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TrackGenerator_correctFSRVolume" "', argument " "1"" of type '" "TrackGenerator *""'"); 
  }
  arg1 = reinterpret_cast< TrackGenerator * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TrackGenerator_correctFSRVolume" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TrackGenerator_correctFSRVolume" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  {
    try {
      (arg1)->correctFSRVolume(arg2,arg3);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TrackGenerator_generateFSRCentroids(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TrackGenerator *arg1 = (TrackGenerator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TrackGenerator_generateFSRCentroids",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TrackGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TrackGenerator_generateFSRCentroids" "', argument " "1"" of type '" "TrackGenerator *""'"); 
  }
  arg1 = reinterpret_cast< TrackGenerator * >(argp1);
  {
    try {
      (arg1)->generateFSRCentroids();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TrackGenerator_splitSegments(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  TrackGenerator *arg1 = (TrackGenerator *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "max_optical_length", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:TrackGenerator_splitSegments",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TrackGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TrackGenerator_splitSegments" "', argument " "1"" of type '" "TrackGenerator *""'"); 
  }
  arg1 = reinterpret_cast< TrackGenerator * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TrackGenerator_splitSegments" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  {
    try {
      (arg1)->splitSegments(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TrackGenerator_initializeSegments(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TrackGenerator *arg1 = (TrackGenerator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TrackGenerator_initializeSegments",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TrackGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TrackGenerator_initializeSegments" "', argument " "1"" of type '" "TrackGenerator *""'"); 
  }
  arg1 = reinterpret_cast< TrackGenerator * >(argp1);
  {
    try {
      (arg1)->initializeSegments();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TrackGenerator_printTimerReport(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TrackGenerator *arg1 = (TrackGenerator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TrackGenerator_printTimerReport",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TrackGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TrackGenerator_printTimerReport" "', argument " "1"" of type '" "TrackGenerator *""'"); 
  }
  arg1 = reinterpret_cast< TrackGenerator * >(argp1);
  {
    try {
      (arg1)->printTimerReport();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TrackGenerator_resetFSRVolumes(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TrackGenerator *arg1 = (TrackGenerator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TrackGenerator_resetFSRVolumes",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TrackGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TrackGenerator_resetFSRVolumes" "', argument " "1"" of type '" "TrackGenerator *""'"); 
  }
  arg1 = reinterpret_cast< TrackGenerator * >(argp1);
  {
    try {
      (arg1)->resetFSRVolumes();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *TrackGenerator_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_TrackGenerator, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ExpEvaluator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ExpEvaluator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ExpEvaluator")) SWIG_fail;
  {
    try {
      result = (ExpEvaluator *)new ExpEvaluator();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ExpEvaluator, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ExpEvaluator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ExpEvaluator *arg1 = (ExpEvaluator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ExpEvaluator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ExpEvaluator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ExpEvaluator" "', argument " "1"" of type '" "ExpEvaluator *""'"); 
  }
  arg1 = reinterpret_cast< ExpEvaluator * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ExpEvaluator_setQuadrature(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  ExpEvaluator *arg1 = (ExpEvaluator *) 0 ;
  Quadrature *arg2 = (Quadrature *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "quadrature", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:ExpEvaluator_setQuadrature",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ExpEvaluator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ExpEvaluator_setQuadrature" "', argument " "1"" of type '" "ExpEvaluator *""'"); 
  }
  arg1 = reinterpret_cast< ExpEvaluator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Quadrature, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ExpEvaluator_setQuadrature" "', argument " "2"" of type '" "Quadrature *""'"); 
  }
  arg2 = reinterpret_cast< Quadrature * >(argp2);
  {
    try {
      (arg1)->setQuadrature(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ExpEvaluator_setMaxOpticalLength(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  ExpEvaluator *arg1 = (ExpEvaluator *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "max_optical_length", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:ExpEvaluator_setMaxOpticalLength",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ExpEvaluator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ExpEvaluator_setMaxOpticalLength" "', argument " "1"" of type '" "ExpEvaluator *""'"); 
  }
  arg1 = reinterpret_cast< ExpEvaluator * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ExpEvaluator_setMaxOpticalLength" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  {
    try {
      (arg1)->setMaxOpticalLength(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ExpEvaluator_setExpPrecision(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  ExpEvaluator *arg1 = (ExpEvaluator *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "exp_precision", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:ExpEvaluator_setExpPrecision",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ExpEvaluator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ExpEvaluator_setExpPrecision" "', argument " "1"" of type '" "ExpEvaluator *""'"); 
  }
  arg1 = reinterpret_cast< ExpEvaluator * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ExpEvaluator_setExpPrecision" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  {
    try {
      (arg1)->setExpPrecision(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ExpEvaluator_useInterpolation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ExpEvaluator *arg1 = (ExpEvaluator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ExpEvaluator_useInterpolation",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ExpEvaluator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ExpEvaluator_useInterpolation" "', argument " "1"" of type '" "ExpEvaluator *""'"); 
  }
  arg1 = reinterpret_cast< ExpEvaluator * >(argp1);
  {
    try {
      (arg1)->useInterpolation();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ExpEvaluator_useIntrinsic(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ExpEvaluator *arg1 = (ExpEvaluator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ExpEvaluator_useIntrinsic",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ExpEvaluator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ExpEvaluator_useIntrinsic" "', argument " "1"" of type '" "ExpEvaluator *""'"); 
  }
  arg1 = reinterpret_cast< ExpEvaluator * >(argp1);
  {
    try {
      (arg1)->useIntrinsic();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ExpEvaluator_getMaxOpticalLength(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ExpEvaluator *arg1 = (ExpEvaluator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ExpEvaluator_getMaxOpticalLength",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ExpEvaluator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ExpEvaluator_getMaxOpticalLength" "', argument " "1"" of type '" "ExpEvaluator *""'"); 
  }
  arg1 = reinterpret_cast< ExpEvaluator * >(argp1);
  {
    try {
      result = (float)(arg1)->getMaxOpticalLength();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ExpEvaluator_getExpPrecision(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ExpEvaluator *arg1 = (ExpEvaluator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ExpEvaluator_getExpPrecision",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ExpEvaluator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ExpEvaluator_getExpPrecision" "', argument " "1"" of type '" "ExpEvaluator *""'"); 
  }
  arg1 = reinterpret_cast< ExpEvaluator * >(argp1);
  {
    try {
      result = (float)(arg1)->getExpPrecision();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ExpEvaluator_isUsingInterpolation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ExpEvaluator *arg1 = (ExpEvaluator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ExpEvaluator_isUsingInterpolation",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ExpEvaluator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ExpEvaluator_isUsingInterpolation" "', argument " "1"" of type '" "ExpEvaluator *""'"); 
  }
  arg1 = reinterpret_cast< ExpEvaluator * >(argp1);
  {
    try {
      result = (bool)(arg1)->isUsingInterpolation();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ExpEvaluator_getTableSpacing(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ExpEvaluator *arg1 = (ExpEvaluator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ExpEvaluator_getTableSpacing",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ExpEvaluator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ExpEvaluator_getTableSpacing" "', argument " "1"" of type '" "ExpEvaluator *""'"); 
  }
  arg1 = reinterpret_cast< ExpEvaluator * >(argp1);
  {
    try {
      result = (float)(arg1)->getTableSpacing();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ExpEvaluator_getTableSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ExpEvaluator *arg1 = (ExpEvaluator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ExpEvaluator_getTableSize",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ExpEvaluator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ExpEvaluator_getTableSize" "', argument " "1"" of type '" "ExpEvaluator *""'"); 
  }
  arg1 = reinterpret_cast< ExpEvaluator * >(argp1);
  {
    try {
      result = (int)(arg1)->getTableSize();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ExpEvaluator_getExpTable(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ExpEvaluator *arg1 = (ExpEvaluator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ExpEvaluator_getExpTable",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ExpEvaluator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ExpEvaluator_getExpTable" "', argument " "1"" of type '" "ExpEvaluator *""'"); 
  }
  arg1 = reinterpret_cast< ExpEvaluator * >(argp1);
  {
    try {
      result = (float *)(arg1)->getExpTable();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_float, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ExpEvaluator_initialize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ExpEvaluator *arg1 = (ExpEvaluator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ExpEvaluator_initialize",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ExpEvaluator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ExpEvaluator_initialize" "', argument " "1"" of type '" "ExpEvaluator *""'"); 
  }
  arg1 = reinterpret_cast< ExpEvaluator * >(argp1);
  {
    try {
      (arg1)->initialize();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ExpEvaluator_computeExponential(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  ExpEvaluator *arg1 = (ExpEvaluator *) 0 ;
  float arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "tau",(char *) "polar", NULL 
  };
  float result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:ExpEvaluator_computeExponential",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ExpEvaluator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ExpEvaluator_computeExponential" "', argument " "1"" of type '" "ExpEvaluator *""'"); 
  }
  arg1 = reinterpret_cast< ExpEvaluator * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ExpEvaluator_computeExponential" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ExpEvaluator_computeExponential" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (float)(arg1)->computeExponential(arg2,arg3);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ExpEvaluator_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ExpEvaluator, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_universe_id(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)":universe_id")) SWIG_fail;
  {
    try {
      result = (int)universe_id();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_reset_universe_id(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":reset_universe_id")) SWIG_fail;
  {
    try {
      reset_universe_id();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_maximize_universe_id(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  char *  kwnames[] = {
    (char *) "universe_id", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:maximize_universe_id",kwnames,&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "maximize_universe_id" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try {
      maximize_universe_id(arg1);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SIMPLE_swigconstant(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *module;
  PyObject *d;
  if (!PyArg_ParseTuple(args,(char*)"O:swigconstant", &module)) return NULL;
  d = PyModule_GetDict(module);
  if (!d) return NULL;
  SWIG_Python_SetConstant(d, "SIMPLE",SWIG_From_int(static_cast< int >(SIMPLE)));
  return SWIG_Py_Void();
}


SWIGINTERN PyObject *LATTICE_swigconstant(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *module;
  PyObject *d;
  if (!PyArg_ParseTuple(args,(char*)"O:swigconstant", &module)) return NULL;
  d = PyModule_GetDict(module);
  if (!d) return NULL;
  SWIG_Python_SetConstant(d, "LATTICE",SWIG_From_int(static_cast< int >(LATTICE)));
  return SWIG_Py_Void();
}


SWIGINTERN PyObject *_wrap_new_Universe(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  int arg1 = (int) (int)-1 ;
  char *arg2 = (char *) "" ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "id",(char *) "name", NULL 
  };
  Universe *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"|OO:new_Universe",kwnames,&obj0,&obj1)) SWIG_fail;
  if (obj0) {
    ecode1 = SWIG_AsVal_int(obj0, &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Universe" "', argument " "1"" of type '" "int""'");
    } 
    arg1 = static_cast< int >(val1);
  }
  if (obj1) {
    res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Universe" "', argument " "2"" of type '" "char const *""'");
    }
    arg2 = reinterpret_cast< char * >(buf2);
  }
  {
    try {
      result = (Universe *)new Universe(arg1,(char const *)arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Universe, SWIG_POINTER_NEW |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Universe(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Universe *arg1 = (Universe *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Universe",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Universe, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Universe" "', argument " "1"" of type '" "Universe *""'"); 
  }
  arg1 = reinterpret_cast< Universe * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Universe_getUid(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Universe *arg1 = (Universe *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Universe_getUid",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Universe, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Universe_getUid" "', argument " "1"" of type '" "Universe const *""'"); 
  }
  arg1 = reinterpret_cast< Universe * >(argp1);
  {
    try {
      result = (int)((Universe const *)arg1)->getUid();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Universe_getId(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Universe *arg1 = (Universe *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Universe_getId",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Universe, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Universe_getId" "', argument " "1"" of type '" "Universe const *""'"); 
  }
  arg1 = reinterpret_cast< Universe * >(argp1);
  {
    try {
      result = (int)((Universe const *)arg1)->getId();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Universe_getName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Universe *arg1 = (Universe *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Universe_getName",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Universe, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Universe_getName" "', argument " "1"" of type '" "Universe const *""'"); 
  }
  arg1 = reinterpret_cast< Universe * >(argp1);
  {
    try {
      result = (char *)((Universe const *)arg1)->getName();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Universe_getType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Universe *arg1 = (Universe *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  universeType result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Universe_getType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Universe, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Universe_getType" "', argument " "1"" of type '" "Universe *""'"); 
  }
  arg1 = reinterpret_cast< Universe * >(argp1);
  {
    try {
      result = (universeType)(arg1)->getType();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Universe_getNumCells(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Universe *arg1 = (Universe *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Universe_getNumCells",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Universe, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Universe_getNumCells" "', argument " "1"" of type '" "Universe const *""'"); 
  }
  arg1 = reinterpret_cast< Universe * >(argp1);
  {
    try {
      result = (int)((Universe const *)arg1)->getNumCells();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Universe_getMinX(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Universe *arg1 = (Universe *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Universe_getMinX",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Universe, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Universe_getMinX" "', argument " "1"" of type '" "Universe *""'"); 
  }
  arg1 = reinterpret_cast< Universe * >(argp1);
  {
    try {
      result = (double)(arg1)->getMinX();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Universe_getMaxX(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Universe *arg1 = (Universe *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Universe_getMaxX",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Universe, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Universe_getMaxX" "', argument " "1"" of type '" "Universe *""'"); 
  }
  arg1 = reinterpret_cast< Universe * >(argp1);
  {
    try {
      result = (double)(arg1)->getMaxX();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Universe_getMinY(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Universe *arg1 = (Universe *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Universe_getMinY",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Universe, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Universe_getMinY" "', argument " "1"" of type '" "Universe *""'"); 
  }
  arg1 = reinterpret_cast< Universe * >(argp1);
  {
    try {
      result = (double)(arg1)->getMinY();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Universe_getMaxY(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Universe *arg1 = (Universe *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Universe_getMaxY",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Universe, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Universe_getMaxY" "', argument " "1"" of type '" "Universe *""'"); 
  }
  arg1 = reinterpret_cast< Universe * >(argp1);
  {
    try {
      result = (double)(arg1)->getMaxY();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Universe_getMinZ(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Universe *arg1 = (Universe *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Universe_getMinZ",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Universe, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Universe_getMinZ" "', argument " "1"" of type '" "Universe *""'"); 
  }
  arg1 = reinterpret_cast< Universe * >(argp1);
  {
    try {
      result = (double)(arg1)->getMinZ();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Universe_getMaxZ(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Universe *arg1 = (Universe *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Universe_getMaxZ",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Universe, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Universe_getMaxZ" "', argument " "1"" of type '" "Universe *""'"); 
  }
  arg1 = reinterpret_cast< Universe * >(argp1);
  {
    try {
      result = (double)(arg1)->getMaxZ();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Universe_getMinXBoundaryType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Universe *arg1 = (Universe *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  boundaryType result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Universe_getMinXBoundaryType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Universe, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Universe_getMinXBoundaryType" "', argument " "1"" of type '" "Universe *""'"); 
  }
  arg1 = reinterpret_cast< Universe * >(argp1);
  {
    try {
      result = (boundaryType)(arg1)->getMinXBoundaryType();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Universe_getMaxXBoundaryType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Universe *arg1 = (Universe *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  boundaryType result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Universe_getMaxXBoundaryType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Universe, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Universe_getMaxXBoundaryType" "', argument " "1"" of type '" "Universe *""'"); 
  }
  arg1 = reinterpret_cast< Universe * >(argp1);
  {
    try {
      result = (boundaryType)(arg1)->getMaxXBoundaryType();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Universe_getMinYBoundaryType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Universe *arg1 = (Universe *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  boundaryType result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Universe_getMinYBoundaryType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Universe, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Universe_getMinYBoundaryType" "', argument " "1"" of type '" "Universe *""'"); 
  }
  arg1 = reinterpret_cast< Universe * >(argp1);
  {
    try {
      result = (boundaryType)(arg1)->getMinYBoundaryType();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Universe_getMaxYBoundaryType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Universe *arg1 = (Universe *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  boundaryType result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Universe_getMaxYBoundaryType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Universe, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Universe_getMaxYBoundaryType" "', argument " "1"" of type '" "Universe *""'"); 
  }
  arg1 = reinterpret_cast< Universe * >(argp1);
  {
    try {
      result = (boundaryType)(arg1)->getMaxYBoundaryType();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Universe_getCell(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Universe *arg1 = (Universe *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "cell_id", NULL 
  };
  Cell *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Universe_getCell",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Universe, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Universe_getCell" "', argument " "1"" of type '" "Universe *""'"); 
  }
  arg1 = reinterpret_cast< Universe * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Universe_getCell" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (Cell *)(arg1)->getCell(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Cell, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Universe_getCells(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Universe *arg1 = (Universe *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::map< int,Cell *,std::less< int >,std::allocator< std::pair< int const,Cell * > > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Universe_getCells",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Universe, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Universe_getCells" "', argument " "1"" of type '" "Universe const *""'"); 
  }
  arg1 = reinterpret_cast< Universe * >(argp1);
  {
    try {
      result = ((Universe const *)arg1)->getCells();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    resultobj = PyDict_New();
    int size = (&result)->size();
    
    std::map<int, Cell*>::iterator iter;
    Cell* cell;
    int cell_id;
    
    for (iter = (&result)->begin(); iter != (&result)->end(); ++iter) {
      cell_id = iter->first;
      cell = iter->second;
      PyObject* value =
      SWIG_NewPointerObj(SWIG_as_voidptr(cell), SWIGTYPE_p_Cell, 0);
      PyDict_SetItem(resultobj, PyInt_FromLong(cell_id), value);
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Universe_getAllCells(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Universe *arg1 = (Universe *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::map< int,Cell *,std::less< int >,std::allocator< std::pair< int const,Cell * > > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Universe_getAllCells",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Universe, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Universe_getAllCells" "', argument " "1"" of type '" "Universe *""'"); 
  }
  arg1 = reinterpret_cast< Universe * >(argp1);
  {
    try {
      result = (arg1)->getAllCells();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    resultobj = PyDict_New();
    int size = (&result)->size();
    
    std::map<int, Cell*>::iterator iter;
    Cell* cell;
    int cell_id;
    
    for (iter = (&result)->begin(); iter != (&result)->end(); ++iter) {
      cell_id = iter->first;
      cell = iter->second;
      PyObject* value =
      SWIG_NewPointerObj(SWIG_as_voidptr(cell), SWIGTYPE_p_Cell, 0);
      PyDict_SetItem(resultobj, PyInt_FromLong(cell_id), value);
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Universe_getAllMaterials(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Universe *arg1 = (Universe *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::map< int,Material *,std::less< int >,std::allocator< std::pair< int const,Material * > > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Universe_getAllMaterials",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Universe, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Universe_getAllMaterials" "', argument " "1"" of type '" "Universe *""'"); 
  }
  arg1 = reinterpret_cast< Universe * >(argp1);
  {
    try {
      result = (arg1)->getAllMaterials();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    resultobj = PyDict_New();
    int size = (&result)->size();
    
    std::map<int, Material*>::iterator iter;
    Material* mat;
    int mat_id;
    
    for (iter = (&result)->begin(); iter != (&result)->end(); ++iter) {
      mat_id = iter->first;
      mat = iter->second;
      PyObject* value =
      SWIG_NewPointerObj(SWIG_as_voidptr(mat), SWIGTYPE_p_Material, 0);
      PyDict_SetItem(resultobj, PyInt_FromLong(mat_id), value);
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Universe_getAllUniverses(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Universe *arg1 = (Universe *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::map< int,Universe *,std::less< int >,std::allocator< std::pair< int const,Universe * > > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Universe_getAllUniverses",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Universe, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Universe_getAllUniverses" "', argument " "1"" of type '" "Universe *""'"); 
  }
  arg1 = reinterpret_cast< Universe * >(argp1);
  {
    try {
      result = (arg1)->getAllUniverses();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    resultobj = PyDict_New();
    int size = (&result)->size();
    
    std::map<int, Universe*>::iterator iter;
    Universe* univ;
    int univ_id;
    
    for (iter = (&result)->begin(); iter != (&result)->end(); ++iter) {
      univ_id = iter->first;
      univ = iter->second;
      PyObject* value =
      SWIG_NewPointerObj(SWIG_as_voidptr(univ), SWIGTYPE_p_Universe, 0);
      PyDict_SetItem(resultobj, PyInt_FromLong(univ_id), value);
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Universe_isFissionable(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Universe *arg1 = (Universe *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Universe_isFissionable",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Universe, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Universe_isFissionable" "', argument " "1"" of type '" "Universe *""'"); 
  }
  arg1 = reinterpret_cast< Universe * >(argp1);
  {
    try {
      result = (bool)(arg1)->isFissionable();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Universe_setName(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Universe *arg1 = (Universe *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "name", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Universe_setName",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Universe, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Universe_setName" "', argument " "1"" of type '" "Universe *""'"); 
  }
  arg1 = reinterpret_cast< Universe * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Universe_setName" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    try {
      (arg1)->setName((char const *)arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Universe_setType(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Universe *arg1 = (Universe *) 0 ;
  universeType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "type", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Universe_setType",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Universe, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Universe_setType" "', argument " "1"" of type '" "Universe *""'"); 
  }
  arg1 = reinterpret_cast< Universe * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Universe_setType" "', argument " "2"" of type '" "universeType""'");
  } 
  arg2 = static_cast< universeType >(val2);
  {
    try {
      (arg1)->setType(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Universe_addCell(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Universe *arg1 = (Universe *) 0 ;
  Cell *arg2 = (Cell *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "cell", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Universe_addCell",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Universe, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Universe_addCell" "', argument " "1"" of type '" "Universe *""'"); 
  }
  arg1 = reinterpret_cast< Universe * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Cell, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Universe_addCell" "', argument " "2"" of type '" "Cell *""'"); 
  }
  arg2 = reinterpret_cast< Cell * >(argp2);
  {
    try {
      (arg1)->addCell(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Universe_removeCell(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Universe *arg1 = (Universe *) 0 ;
  Cell *arg2 = (Cell *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "cell", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Universe_removeCell",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Universe, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Universe_removeCell" "', argument " "1"" of type '" "Universe *""'"); 
  }
  arg1 = reinterpret_cast< Universe * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Cell, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Universe_removeCell" "', argument " "2"" of type '" "Cell *""'"); 
  }
  arg2 = reinterpret_cast< Cell * >(argp2);
  {
    try {
      (arg1)->removeCell(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Universe_findCell(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Universe *arg1 = (Universe *) 0 ;
  LocalCoords *arg2 = (LocalCoords *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "coords", NULL 
  };
  Cell *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Universe_findCell",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Universe, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Universe_findCell" "', argument " "1"" of type '" "Universe *""'"); 
  }
  arg1 = reinterpret_cast< Universe * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_LocalCoords, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Universe_findCell" "', argument " "2"" of type '" "LocalCoords *""'"); 
  }
  arg2 = reinterpret_cast< LocalCoords * >(argp2);
  {
    try {
      result = (Cell *)(arg1)->findCell(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Cell, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Universe_setFissionability(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Universe *arg1 = (Universe *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "fissionable", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Universe_setFissionability",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Universe, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Universe_setFissionability" "', argument " "1"" of type '" "Universe *""'"); 
  }
  arg1 = reinterpret_cast< Universe * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Universe_setFissionability" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      (arg1)->setFissionability(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Universe_subdivideCells(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Universe *arg1 = (Universe *) 0 ;
  double arg2 = (double) INFINITY ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "max_radius", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|O:Universe_subdivideCells",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Universe, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Universe_subdivideCells" "', argument " "1"" of type '" "Universe *""'"); 
  }
  arg1 = reinterpret_cast< Universe * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_double(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Universe_subdivideCells" "', argument " "2"" of type '" "double""'");
    } 
    arg2 = static_cast< double >(val2);
  }
  {
    try {
      (arg1)->subdivideCells(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Universe_buildNeighbors(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Universe *arg1 = (Universe *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Universe_buildNeighbors",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Universe, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Universe_buildNeighbors" "', argument " "1"" of type '" "Universe *""'"); 
  }
  arg1 = reinterpret_cast< Universe * >(argp1);
  {
    try {
      (arg1)->buildNeighbors();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Universe_toString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Universe *arg1 = (Universe *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Universe_toString",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Universe, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Universe_toString" "', argument " "1"" of type '" "Universe *""'"); 
  }
  arg1 = reinterpret_cast< Universe * >(argp1);
  {
    try {
      result = (arg1)->toString();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new std::string(static_cast< const std::string& >(result))), SWIGTYPE_p_std__string, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Universe_printString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Universe *arg1 = (Universe *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Universe_printString",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Universe, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Universe_printString" "', argument " "1"" of type '" "Universe *""'"); 
  }
  arg1 = reinterpret_cast< Universe * >(argp1);
  {
    try {
      (arg1)->printString();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Universe_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Universe *arg1 = (Universe *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Universe *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Universe_clone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Universe, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Universe_clone" "', argument " "1"" of type '" "Universe *""'"); 
  }
  arg1 = reinterpret_cast< Universe * >(argp1);
  {
    try {
      result = (Universe *)(arg1)->clone();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Universe, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Universe_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Universe, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_Lattice(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  int arg1 = (int) (int)-1 ;
  char *arg2 = (char *) "" ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "id",(char *) "name", NULL 
  };
  Lattice *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"|OO:new_Lattice",kwnames,&obj0,&obj1)) SWIG_fail;
  if (obj0) {
    ecode1 = SWIG_AsVal_int(obj0, &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Lattice" "', argument " "1"" of type '" "int""'");
    } 
    arg1 = static_cast< int >(val1);
  }
  if (obj1) {
    res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Lattice" "', argument " "2"" of type '" "char const *""'");
    }
    arg2 = reinterpret_cast< char * >(buf2);
  }
  {
    try {
      result = (Lattice *)new Lattice(arg1,(char const *)arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Lattice, SWIG_POINTER_NEW |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Lattice(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Lattice *arg1 = (Lattice *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Lattice",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Lattice, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Lattice" "', argument " "1"" of type '" "Lattice *""'"); 
  }
  arg1 = reinterpret_cast< Lattice * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lattice_setOffset(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Lattice *arg1 = (Lattice *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "x",(char *) "y",(char *) "z", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOO:Lattice_setOffset",kwnames,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Lattice, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lattice_setOffset" "', argument " "1"" of type '" "Lattice *""'"); 
  }
  arg1 = reinterpret_cast< Lattice * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Lattice_setOffset" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Lattice_setOffset" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Lattice_setOffset" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      (arg1)->setOffset(arg2,arg3,arg4);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lattice_getOffset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Lattice *arg1 = (Lattice *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Point *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Lattice_getOffset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Lattice, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lattice_getOffset" "', argument " "1"" of type '" "Lattice *""'"); 
  }
  arg1 = reinterpret_cast< Lattice * >(argp1);
  {
    try {
      result = (Point *)(arg1)->getOffset();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Point, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lattice_getNumX(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Lattice *arg1 = (Lattice *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Lattice_getNumX",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Lattice, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lattice_getNumX" "', argument " "1"" of type '" "Lattice const *""'"); 
  }
  arg1 = reinterpret_cast< Lattice * >(argp1);
  {
    try {
      result = (int)((Lattice const *)arg1)->getNumX();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lattice_getNumY(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Lattice *arg1 = (Lattice *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Lattice_getNumY",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Lattice, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lattice_getNumY" "', argument " "1"" of type '" "Lattice const *""'"); 
  }
  arg1 = reinterpret_cast< Lattice * >(argp1);
  {
    try {
      result = (int)((Lattice const *)arg1)->getNumY();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lattice_getNumZ(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Lattice *arg1 = (Lattice *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Lattice_getNumZ",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Lattice, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lattice_getNumZ" "', argument " "1"" of type '" "Lattice const *""'"); 
  }
  arg1 = reinterpret_cast< Lattice * >(argp1);
  {
    try {
      result = (int)((Lattice const *)arg1)->getNumZ();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lattice_getWidthX(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Lattice *arg1 = (Lattice *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Lattice_getWidthX",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Lattice, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lattice_getWidthX" "', argument " "1"" of type '" "Lattice const *""'"); 
  }
  arg1 = reinterpret_cast< Lattice * >(argp1);
  {
    try {
      result = (double)((Lattice const *)arg1)->getWidthX();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lattice_getWidthY(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Lattice *arg1 = (Lattice *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Lattice_getWidthY",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Lattice, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lattice_getWidthY" "', argument " "1"" of type '" "Lattice const *""'"); 
  }
  arg1 = reinterpret_cast< Lattice * >(argp1);
  {
    try {
      result = (double)((Lattice const *)arg1)->getWidthY();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lattice_getWidthZ(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Lattice *arg1 = (Lattice *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Lattice_getWidthZ",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Lattice, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lattice_getWidthZ" "', argument " "1"" of type '" "Lattice const *""'"); 
  }
  arg1 = reinterpret_cast< Lattice * >(argp1);
  {
    try {
      result = (double)((Lattice const *)arg1)->getWidthZ();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lattice_getMinX(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Lattice *arg1 = (Lattice *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Lattice_getMinX",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Lattice, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lattice_getMinX" "', argument " "1"" of type '" "Lattice *""'"); 
  }
  arg1 = reinterpret_cast< Lattice * >(argp1);
  {
    try {
      result = (double)(arg1)->getMinX();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lattice_getMaxX(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Lattice *arg1 = (Lattice *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Lattice_getMaxX",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Lattice, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lattice_getMaxX" "', argument " "1"" of type '" "Lattice *""'"); 
  }
  arg1 = reinterpret_cast< Lattice * >(argp1);
  {
    try {
      result = (double)(arg1)->getMaxX();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lattice_getMinY(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Lattice *arg1 = (Lattice *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Lattice_getMinY",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Lattice, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lattice_getMinY" "', argument " "1"" of type '" "Lattice *""'"); 
  }
  arg1 = reinterpret_cast< Lattice * >(argp1);
  {
    try {
      result = (double)(arg1)->getMinY();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lattice_getMaxY(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Lattice *arg1 = (Lattice *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Lattice_getMaxY",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Lattice, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lattice_getMaxY" "', argument " "1"" of type '" "Lattice *""'"); 
  }
  arg1 = reinterpret_cast< Lattice * >(argp1);
  {
    try {
      result = (double)(arg1)->getMaxY();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lattice_getMinZ(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Lattice *arg1 = (Lattice *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Lattice_getMinZ",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Lattice, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lattice_getMinZ" "', argument " "1"" of type '" "Lattice *""'"); 
  }
  arg1 = reinterpret_cast< Lattice * >(argp1);
  {
    try {
      result = (double)(arg1)->getMinZ();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lattice_getMaxZ(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Lattice *arg1 = (Lattice *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Lattice_getMaxZ",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Lattice, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lattice_getMaxZ" "', argument " "1"" of type '" "Lattice *""'"); 
  }
  arg1 = reinterpret_cast< Lattice * >(argp1);
  {
    try {
      result = (double)(arg1)->getMaxZ();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lattice_getUniverse(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Lattice *arg1 = (Lattice *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "lat_x",(char *) "lat_y",(char *) "lat_z", NULL 
  };
  Universe *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOO:Lattice_getUniverse",kwnames,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Lattice, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lattice_getUniverse" "', argument " "1"" of type '" "Lattice const *""'"); 
  }
  arg1 = reinterpret_cast< Lattice * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Lattice_getUniverse" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Lattice_getUniverse" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Lattice_getUniverse" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try {
      result = (Universe *)((Lattice const *)arg1)->getUniverse(arg2,arg3,arg4);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Universe, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lattice_getUniverses(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Lattice *arg1 = (Lattice *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::vector< std::vector< std::pair< int,Universe * >,std::allocator< std::pair< int,Universe * > > >,std::allocator< std::vector< std::pair< int,Universe * >,std::allocator< std::pair< int,Universe * > > > > >,std::allocator< std::vector< std::vector< std::pair< int,Universe * >,std::allocator< std::pair< int,Universe * > > >,std::allocator< std::vector< std::pair< int,Universe * >,std::allocator< std::pair< int,Universe * > > > > > > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Lattice_getUniverses",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Lattice, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lattice_getUniverses" "', argument " "1"" of type '" "Lattice *""'"); 
  }
  arg1 = reinterpret_cast< Lattice * >(argp1);
  {
    try {
      result = (std::vector< std::vector< std::vector< std::pair< int,Universe * >,std::allocator< std::pair< int,Universe * > > >,std::allocator< std::vector< std::pair< int,Universe * >,std::allocator< std::pair< int,Universe * > > > > >,std::allocator< std::vector< std::vector< std::pair< int,Universe * >,std::allocator< std::pair< int,Universe * > > >,std::allocator< std::vector< std::pair< int,Universe * >,std::allocator< std::pair< int,Universe * > > > > > > > *)(arg1)->getUniverses();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_std__vectorT_std__pairT_int_Universe_p_t_std__allocatorT_std__pairT_int_Universe_p_t_t_t_std__allocatorT_std__vectorT_std__pairT_int_Universe_p_t_std__allocatorT_std__pairT_int_Universe_p_t_t_t_t_t_std__allocatorT_std__vectorT_std__vectorT_std__pairT_int_Universe_p_t_std__allocatorT_std__pairT_int_Universe_p_t_t_t_std__allocatorT_std__vectorT_std__pairT_int_Universe_p_t_std__allocatorT_std__pairT_int_Universe_p_t_t_t_t_t_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lattice_getUniqueUniverses(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Lattice *arg1 = (Lattice *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::map< int,Universe *,std::less< int >,std::allocator< std::pair< int const,Universe * > > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Lattice_getUniqueUniverses",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Lattice, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lattice_getUniqueUniverses" "', argument " "1"" of type '" "Lattice *""'"); 
  }
  arg1 = reinterpret_cast< Lattice * >(argp1);
  {
    try {
      result = (arg1)->getUniqueUniverses();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    resultobj = PyDict_New();
    int size = (&result)->size();
    
    std::map<int, Universe*>::iterator iter;
    Universe* univ;
    int univ_id;
    
    for (iter = (&result)->begin(); iter != (&result)->end(); ++iter) {
      univ_id = iter->first;
      univ = iter->second;
      PyObject* value =
      SWIG_NewPointerObj(SWIG_as_voidptr(univ), SWIGTYPE_p_Universe, 0);
      PyDict_SetItem(resultobj, PyInt_FromLong(univ_id), value);
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lattice_getAllCells(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Lattice *arg1 = (Lattice *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::map< int,Cell *,std::less< int >,std::allocator< std::pair< int const,Cell * > > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Lattice_getAllCells",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Lattice, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lattice_getAllCells" "', argument " "1"" of type '" "Lattice *""'"); 
  }
  arg1 = reinterpret_cast< Lattice * >(argp1);
  {
    try {
      result = (arg1)->getAllCells();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    resultobj = PyDict_New();
    int size = (&result)->size();
    
    std::map<int, Cell*>::iterator iter;
    Cell* cell;
    int cell_id;
    
    for (iter = (&result)->begin(); iter != (&result)->end(); ++iter) {
      cell_id = iter->first;
      cell = iter->second;
      PyObject* value =
      SWIG_NewPointerObj(SWIG_as_voidptr(cell), SWIGTYPE_p_Cell, 0);
      PyDict_SetItem(resultobj, PyInt_FromLong(cell_id), value);
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lattice_getAllUniverses(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Lattice *arg1 = (Lattice *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::map< int,Universe *,std::less< int >,std::allocator< std::pair< int const,Universe * > > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Lattice_getAllUniverses",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Lattice, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lattice_getAllUniverses" "', argument " "1"" of type '" "Lattice *""'"); 
  }
  arg1 = reinterpret_cast< Lattice * >(argp1);
  {
    try {
      result = (arg1)->getAllUniverses();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    resultobj = PyDict_New();
    int size = (&result)->size();
    
    std::map<int, Universe*>::iterator iter;
    Universe* univ;
    int univ_id;
    
    for (iter = (&result)->begin(); iter != (&result)->end(); ++iter) {
      univ_id = iter->first;
      univ = iter->second;
      PyObject* value =
      SWIG_NewPointerObj(SWIG_as_voidptr(univ), SWIGTYPE_p_Universe, 0);
      PyDict_SetItem(resultobj, PyInt_FromLong(univ_id), value);
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lattice_setNumX(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Lattice *arg1 = (Lattice *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "num_x", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Lattice_setNumX",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Lattice, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lattice_setNumX" "', argument " "1"" of type '" "Lattice *""'"); 
  }
  arg1 = reinterpret_cast< Lattice * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Lattice_setNumX" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->setNumX(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lattice_setNumY(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Lattice *arg1 = (Lattice *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "num_y", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Lattice_setNumY",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Lattice, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lattice_setNumY" "', argument " "1"" of type '" "Lattice *""'"); 
  }
  arg1 = reinterpret_cast< Lattice * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Lattice_setNumY" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->setNumY(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lattice_setNumZ(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Lattice *arg1 = (Lattice *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "num_z", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Lattice_setNumZ",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Lattice, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lattice_setNumZ" "', argument " "1"" of type '" "Lattice *""'"); 
  }
  arg1 = reinterpret_cast< Lattice * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Lattice_setNumZ" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->setNumZ(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lattice_setWidth(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Lattice *arg1 = (Lattice *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 = (double) std::numeric_limits< double >::infinity() ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "width_x",(char *) "width_y",(char *) "width_z", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO|O:Lattice_setWidth",kwnames,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Lattice, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lattice_setWidth" "', argument " "1"" of type '" "Lattice *""'"); 
  }
  arg1 = reinterpret_cast< Lattice * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Lattice_setWidth" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Lattice_setWidth" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  if (obj3) {
    ecode4 = SWIG_AsVal_double(obj3, &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Lattice_setWidth" "', argument " "4"" of type '" "double""'");
    } 
    arg4 = static_cast< double >(val4);
  }
  {
    try {
      (arg1)->setWidth(arg2,arg3,arg4);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lattice_setUniverses(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Lattice *arg1 = (Lattice *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  Universe **arg5 = (Universe **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "num_z", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Lattice_setUniverses",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Lattice, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lattice_setUniverses" "', argument " "1"" of type '" "Lattice *""'"); 
  }
  arg1 = reinterpret_cast< Lattice * >(argp1);
  {
    if (!PyList_Check(obj1)) {
      PyErr_SetString(PyExc_ValueError,"Expected a Python list of integers "
        "for the Lattice cells");
      return NULL;
    }
    
    arg2 = PySequence_Length(obj1);  // num_z
    arg3 = PySequence_Length(PyList_GetItem(obj1,0)); // num_y
    arg4 = PySequence_Length(PyList_GetItem(PyList_GetItem(obj1,0), 0)); // num_x
    arg5 = (Universe**) malloc((arg2 * arg3 * arg4) * sizeof(Universe*)); // universes
    
    /* Loop over the xy-planes */
    for (int k = 0; k < arg2; k++) {
      /* Get the 2D list of universes in the k-th xy-plane */
      PyObject* outer_outer_list = PyList_GetItem(obj1,k);
      
      /* Loop over y */
      for (int j = 0; j < arg3; j++) {
        /* Get the list of universes in the j-th row of the k-th xy-plane */
        PyObject* outer_list = PyList_GetItem(outer_outer_list, j);
        
        /* Check that the number of universes in the j-th row of the k-th xy-plane
               * is the same as the number of universes in the 1st row of the 1st
               * xy-plane */
        if (PySequence_Length(outer_list) != arg4) {
          PyErr_SetString(PyExc_ValueError, "Size mismatch in dimensions of 3D "
            "list of Universes in input to Lattice:setUniverses"
            " method");
          return NULL;
        }
        
        /* Loop over universes in j-th row of the k-th xy-plane */
        for (int i =0; i < arg4; i++) {
          /* Extract the value from the list at this location and convert
                   * SWIG wrapper to pointer to underlying C++ class instance */
          PyObject* o = PyList_GetItem(outer_list, i);
          void *p1 = 0;
          SWIG_ConvertPtr(o, &p1, SWIGTYPE_p_Universe, 0 | 0);
          arg5[k*(arg3*arg4) + j*arg4 + i] = (Universe*) p1;
        }
      }
    }
  }
  {
    try {
      (arg1)->setUniverses(arg2,arg3,arg4,arg5);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lattice_updateUniverse(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Lattice *arg1 = (Lattice *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  Universe *arg5 = (Universe *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "lat_x",(char *) "lat_y",(char *) "lat_z",(char *) "universe", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOOO:Lattice_updateUniverse",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Lattice, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lattice_updateUniverse" "', argument " "1"" of type '" "Lattice *""'"); 
  }
  arg1 = reinterpret_cast< Lattice * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Lattice_updateUniverse" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Lattice_updateUniverse" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Lattice_updateUniverse" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_Universe, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Lattice_updateUniverse" "', argument " "5"" of type '" "Universe *""'"); 
  }
  arg5 = reinterpret_cast< Universe * >(argp5);
  {
    try {
      (arg1)->updateUniverse(arg2,arg3,arg4,arg5);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lattice_removeUniverse(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Lattice *arg1 = (Lattice *) 0 ;
  Universe *arg2 = (Universe *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "universe", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Lattice_removeUniverse",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Lattice, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lattice_removeUniverse" "', argument " "1"" of type '" "Lattice *""'"); 
  }
  arg1 = reinterpret_cast< Lattice * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Universe, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Lattice_removeUniverse" "', argument " "2"" of type '" "Universe *""'"); 
  }
  arg2 = reinterpret_cast< Universe * >(argp2);
  {
    try {
      (arg1)->removeUniverse(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lattice_subdivideCells(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Lattice *arg1 = (Lattice *) 0 ;
  double arg2 = (double) INFINITY ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "max_radius", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|O:Lattice_subdivideCells",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Lattice, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lattice_subdivideCells" "', argument " "1"" of type '" "Lattice *""'"); 
  }
  arg1 = reinterpret_cast< Lattice * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_double(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Lattice_subdivideCells" "', argument " "2"" of type '" "double""'");
    } 
    arg2 = static_cast< double >(val2);
  }
  {
    try {
      (arg1)->subdivideCells(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lattice_buildNeighbors(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Lattice *arg1 = (Lattice *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Lattice_buildNeighbors",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Lattice, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lattice_buildNeighbors" "', argument " "1"" of type '" "Lattice *""'"); 
  }
  arg1 = reinterpret_cast< Lattice * >(argp1);
  {
    try {
      (arg1)->buildNeighbors();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lattice_withinBounds(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Lattice *arg1 = (Lattice *) 0 ;
  Point *arg2 = (Point *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "point", NULL 
  };
  bool result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Lattice_withinBounds",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Lattice, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lattice_withinBounds" "', argument " "1"" of type '" "Lattice *""'"); 
  }
  arg1 = reinterpret_cast< Lattice * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Point, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Lattice_withinBounds" "', argument " "2"" of type '" "Point *""'"); 
  }
  arg2 = reinterpret_cast< Point * >(argp2);
  {
    try {
      result = (bool)(arg1)->withinBounds(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lattice_findCell(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Lattice *arg1 = (Lattice *) 0 ;
  LocalCoords *arg2 = (LocalCoords *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "coords", NULL 
  };
  Cell *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Lattice_findCell",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Lattice, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lattice_findCell" "', argument " "1"" of type '" "Lattice *""'"); 
  }
  arg1 = reinterpret_cast< Lattice * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_LocalCoords, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Lattice_findCell" "', argument " "2"" of type '" "LocalCoords *""'"); 
  }
  arg2 = reinterpret_cast< LocalCoords * >(argp2);
  {
    try {
      result = (Cell *)(arg1)->findCell(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Cell, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lattice_minSurfaceDist(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Lattice *arg1 = (Lattice *) 0 ;
  LocalCoords *arg2 = (LocalCoords *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "coords", NULL 
  };
  double result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Lattice_minSurfaceDist",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Lattice, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lattice_minSurfaceDist" "', argument " "1"" of type '" "Lattice *""'"); 
  }
  arg1 = reinterpret_cast< Lattice * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_LocalCoords, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Lattice_minSurfaceDist" "', argument " "2"" of type '" "LocalCoords *""'"); 
  }
  arg2 = reinterpret_cast< LocalCoords * >(argp2);
  {
    try {
      result = (double)(arg1)->minSurfaceDist(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lattice_getLatX(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Lattice *arg1 = (Lattice *) 0 ;
  Point *arg2 = (Point *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "point", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Lattice_getLatX",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Lattice, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lattice_getLatX" "', argument " "1"" of type '" "Lattice *""'"); 
  }
  arg1 = reinterpret_cast< Lattice * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Point, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Lattice_getLatX" "', argument " "2"" of type '" "Point *""'"); 
  }
  arg2 = reinterpret_cast< Point * >(argp2);
  {
    try {
      result = (int)(arg1)->getLatX(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lattice_getLatY(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Lattice *arg1 = (Lattice *) 0 ;
  Point *arg2 = (Point *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "point", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Lattice_getLatY",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Lattice, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lattice_getLatY" "', argument " "1"" of type '" "Lattice *""'"); 
  }
  arg1 = reinterpret_cast< Lattice * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Point, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Lattice_getLatY" "', argument " "2"" of type '" "Point *""'"); 
  }
  arg2 = reinterpret_cast< Point * >(argp2);
  {
    try {
      result = (int)(arg1)->getLatY(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lattice_getLatZ(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Lattice *arg1 = (Lattice *) 0 ;
  Point *arg2 = (Point *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "point", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Lattice_getLatZ",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Lattice, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lattice_getLatZ" "', argument " "1"" of type '" "Lattice *""'"); 
  }
  arg1 = reinterpret_cast< Lattice * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Point, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Lattice_getLatZ" "', argument " "2"" of type '" "Point *""'"); 
  }
  arg2 = reinterpret_cast< Point * >(argp2);
  {
    try {
      result = (int)(arg1)->getLatZ(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lattice_getLatticeCell(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Lattice *arg1 = (Lattice *) 0 ;
  Point *arg2 = (Point *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "point", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Lattice_getLatticeCell",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Lattice, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lattice_getLatticeCell" "', argument " "1"" of type '" "Lattice *""'"); 
  }
  arg1 = reinterpret_cast< Lattice * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Point, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Lattice_getLatticeCell" "', argument " "2"" of type '" "Point *""'"); 
  }
  arg2 = reinterpret_cast< Point * >(argp2);
  {
    try {
      result = (int)(arg1)->getLatticeCell(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lattice_getLatticeSurface(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Lattice *arg1 = (Lattice *) 0 ;
  int arg2 ;
  Point *arg3 = (Point *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "cell",(char *) "point", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:Lattice_getLatticeSurface",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Lattice, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lattice_getLatticeSurface" "', argument " "1"" of type '" "Lattice *""'"); 
  }
  arg1 = reinterpret_cast< Lattice * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Lattice_getLatticeSurface" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_Point, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Lattice_getLatticeSurface" "', argument " "3"" of type '" "Point *""'"); 
  }
  arg3 = reinterpret_cast< Point * >(argp3);
  {
    try {
      result = (int)(arg1)->getLatticeSurface(arg2,arg3);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lattice_getDistanceToSurface(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Lattice *arg1 = (Lattice *) 0 ;
  int arg2 ;
  Point *arg3 = (Point *) 0 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "cell",(char *) "point",(char *) "surface", NULL 
  };
  double result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOO:Lattice_getDistanceToSurface",kwnames,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Lattice, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lattice_getDistanceToSurface" "', argument " "1"" of type '" "Lattice *""'"); 
  }
  arg1 = reinterpret_cast< Lattice * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Lattice_getDistanceToSurface" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_Point, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Lattice_getDistanceToSurface" "', argument " "3"" of type '" "Point *""'"); 
  }
  arg3 = reinterpret_cast< Point * >(argp3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Lattice_getDistanceToSurface" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try {
      result = (double)(arg1)->getDistanceToSurface(arg2,arg3,arg4);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lattice_toString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Lattice *arg1 = (Lattice *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Lattice_toString",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Lattice, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lattice_toString" "', argument " "1"" of type '" "Lattice *""'"); 
  }
  arg1 = reinterpret_cast< Lattice * >(argp1);
  {
    try {
      result = (arg1)->toString();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new std::string(static_cast< const std::string& >(result))), SWIGTYPE_p_std__string, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Lattice_printString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Lattice *arg1 = (Lattice *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Lattice_printString",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Lattice, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lattice_printString" "', argument " "1"" of type '" "Lattice *""'"); 
  }
  arg1 = reinterpret_cast< Lattice * >(argp1);
  {
    try {
      (arg1)->printString();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Lattice_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Lattice, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_stencilCompare(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::pair< int,float > *arg1 = 0 ;
  std::pair< int,float > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "firstElem",(char *) "secondElem", NULL 
  };
  bool result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:stencilCompare",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__pairT_int_float_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "stencilCompare" "', argument " "1"" of type '" "std::pair< int,float > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "stencilCompare" "', argument " "1"" of type '" "std::pair< int,float > const &""'"); 
  }
  arg1 = reinterpret_cast< std::pair< int,float > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__pairT_int_float_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "stencilCompare" "', argument " "2"" of type '" "std::pair< int,float > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "stencilCompare" "', argument " "2"" of type '" "std::pair< int,float > const &""'"); 
  }
  arg2 = reinterpret_cast< std::pair< int,float > * >(argp2);
  {
    try {
      result = (bool)stencilCompare((std::pair< int,float > const &)*arg1,(std::pair< int,float > const &)*arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Cmfd(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Cmfd *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Cmfd")) SWIG_fail;
  {
    try {
      result = (Cmfd *)new Cmfd();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Cmfd, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Cmfd(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Cmfd *arg1 = (Cmfd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Cmfd",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Cmfd, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Cmfd" "', argument " "1"" of type '" "Cmfd *""'"); 
  }
  arg1 = reinterpret_cast< Cmfd * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cmfd_computeKeff(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Cmfd *arg1 = (Cmfd *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "moc_iteration", NULL 
  };
  float result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Cmfd_computeKeff",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Cmfd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cmfd_computeKeff" "', argument " "1"" of type '" "Cmfd *""'"); 
  }
  arg1 = reinterpret_cast< Cmfd * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Cmfd_computeKeff" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(arg1)->computeKeff(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cmfd_initialize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Cmfd *arg1 = (Cmfd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Cmfd_initialize",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Cmfd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cmfd_initialize" "', argument " "1"" of type '" "Cmfd *""'"); 
  }
  arg1 = reinterpret_cast< Cmfd * >(argp1);
  {
    try {
      (arg1)->initialize();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cmfd_initializeCellMap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Cmfd *arg1 = (Cmfd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Cmfd_initializeCellMap",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Cmfd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cmfd_initializeCellMap" "', argument " "1"" of type '" "Cmfd *""'"); 
  }
  arg1 = reinterpret_cast< Cmfd * >(argp1);
  {
    try {
      (arg1)->initializeCellMap();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cmfd_initializeGroupMap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Cmfd *arg1 = (Cmfd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Cmfd_initializeGroupMap",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Cmfd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cmfd_initializeGroupMap" "', argument " "1"" of type '" "Cmfd *""'"); 
  }
  arg1 = reinterpret_cast< Cmfd * >(argp1);
  {
    try {
      (arg1)->initializeGroupMap();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cmfd_initializeLattice(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Cmfd *arg1 = (Cmfd *) 0 ;
  Point *arg2 = (Point *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "offset", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Cmfd_initializeLattice",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Cmfd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cmfd_initializeLattice" "', argument " "1"" of type '" "Cmfd *""'"); 
  }
  arg1 = reinterpret_cast< Cmfd * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Point, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Cmfd_initializeLattice" "', argument " "2"" of type '" "Point *""'"); 
  }
  arg2 = reinterpret_cast< Point * >(argp2);
  {
    try {
      (arg1)->initializeLattice(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cmfd_findCmfdCell(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Cmfd *arg1 = (Cmfd *) 0 ;
  LocalCoords *arg2 = (LocalCoords *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "coords", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Cmfd_findCmfdCell",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Cmfd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cmfd_findCmfdCell" "', argument " "1"" of type '" "Cmfd *""'"); 
  }
  arg1 = reinterpret_cast< Cmfd * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_LocalCoords, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Cmfd_findCmfdCell" "', argument " "2"" of type '" "LocalCoords *""'"); 
  }
  arg2 = reinterpret_cast< LocalCoords * >(argp2);
  {
    try {
      result = (int)(arg1)->findCmfdCell(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cmfd_findCmfdSurface(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Cmfd *arg1 = (Cmfd *) 0 ;
  int arg2 ;
  LocalCoords *arg3 = (LocalCoords *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "cell_id",(char *) "coords", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:Cmfd_findCmfdSurface",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Cmfd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cmfd_findCmfdSurface" "', argument " "1"" of type '" "Cmfd *""'"); 
  }
  arg1 = reinterpret_cast< Cmfd * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Cmfd_findCmfdSurface" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_LocalCoords, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Cmfd_findCmfdSurface" "', argument " "3"" of type '" "LocalCoords *""'"); 
  }
  arg3 = reinterpret_cast< LocalCoords * >(argp3);
  {
    try {
      result = (int)(arg1)->findCmfdSurface(arg2,arg3);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cmfd_addFSRToCell(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Cmfd *arg1 = (Cmfd *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "cell_id",(char *) "fsr_id", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:Cmfd_addFSRToCell",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Cmfd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cmfd_addFSRToCell" "', argument " "1"" of type '" "Cmfd *""'"); 
  }
  arg1 = reinterpret_cast< Cmfd * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Cmfd_addFSRToCell" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Cmfd_addFSRToCell" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      (arg1)->addFSRToCell(arg2,arg3);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cmfd_zeroCurrents(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Cmfd *arg1 = (Cmfd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Cmfd_zeroCurrents",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Cmfd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cmfd_zeroCurrents" "', argument " "1"" of type '" "Cmfd *""'"); 
  }
  arg1 = reinterpret_cast< Cmfd * >(argp1);
  {
    try {
      (arg1)->zeroCurrents();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cmfd_tallyCurrent(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Cmfd *arg1 = (Cmfd *) 0 ;
  segment *arg2 = (segment *) 0 ;
  float *arg3 = (float *) 0 ;
  int arg4 ;
  bool arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "curr_segment",(char *) "track_flux",(char *) "azim_index",(char *) "fwd", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOOO:Cmfd_tallyCurrent",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Cmfd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cmfd_tallyCurrent" "', argument " "1"" of type '" "Cmfd *""'"); 
  }
  arg1 = reinterpret_cast< Cmfd * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_segment, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Cmfd_tallyCurrent" "', argument " "2"" of type '" "segment *""'"); 
  }
  arg2 = reinterpret_cast< segment * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Cmfd_tallyCurrent" "', argument " "3"" of type '" "float *""'"); 
  }
  arg3 = reinterpret_cast< float * >(argp3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Cmfd_tallyCurrent" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_bool(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Cmfd_tallyCurrent" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  {
    try {
      (arg1)->tallyCurrent(arg2,arg3,arg4,arg5);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cmfd_updateBoundaryFlux(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Cmfd *arg1 = (Cmfd *) 0 ;
  Track **arg2 = (Track **) 0 ;
  float *arg3 = (float *) 0 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "tracks",(char *) "boundary_flux",(char *) "num_tracks", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOO:Cmfd_updateBoundaryFlux",kwnames,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Cmfd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cmfd_updateBoundaryFlux" "', argument " "1"" of type '" "Cmfd *""'"); 
  }
  arg1 = reinterpret_cast< Cmfd * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_p_Track, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Cmfd_updateBoundaryFlux" "', argument " "2"" of type '" "Track **""'"); 
  }
  arg2 = reinterpret_cast< Track ** >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Cmfd_updateBoundaryFlux" "', argument " "3"" of type '" "float *""'"); 
  }
  arg3 = reinterpret_cast< float * >(argp3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Cmfd_updateBoundaryFlux" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try {
      (arg1)->updateBoundaryFlux(arg2,arg3,arg4);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cmfd_getNumCmfdGroups(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Cmfd *arg1 = (Cmfd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Cmfd_getNumCmfdGroups",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Cmfd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cmfd_getNumCmfdGroups" "', argument " "1"" of type '" "Cmfd *""'"); 
  }
  arg1 = reinterpret_cast< Cmfd * >(argp1);
  {
    try {
      result = (int)(arg1)->getNumCmfdGroups();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cmfd_getNumMOCGroups(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Cmfd *arg1 = (Cmfd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Cmfd_getNumMOCGroups",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Cmfd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cmfd_getNumMOCGroups" "', argument " "1"" of type '" "Cmfd *""'"); 
  }
  arg1 = reinterpret_cast< Cmfd * >(argp1);
  {
    try {
      result = (int)(arg1)->getNumMOCGroups();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cmfd_getNumCells(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Cmfd *arg1 = (Cmfd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Cmfd_getNumCells",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Cmfd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cmfd_getNumCells" "', argument " "1"" of type '" "Cmfd *""'"); 
  }
  arg1 = reinterpret_cast< Cmfd * >(argp1);
  {
    try {
      result = (int)(arg1)->getNumCells();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cmfd_getCmfdGroup(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Cmfd *arg1 = (Cmfd *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "group", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Cmfd_getCmfdGroup",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Cmfd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cmfd_getCmfdGroup" "', argument " "1"" of type '" "Cmfd *""'"); 
  }
  arg1 = reinterpret_cast< Cmfd * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Cmfd_getCmfdGroup" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (int)(arg1)->getCmfdGroup(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cmfd_getBoundary(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Cmfd *arg1 = (Cmfd *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "side", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Cmfd_getBoundary",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Cmfd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cmfd_getBoundary" "', argument " "1"" of type '" "Cmfd *""'"); 
  }
  arg1 = reinterpret_cast< Cmfd * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Cmfd_getBoundary" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (int)(arg1)->getBoundary(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cmfd_getLattice(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Cmfd *arg1 = (Cmfd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Lattice *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Cmfd_getLattice",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Cmfd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cmfd_getLattice" "', argument " "1"" of type '" "Cmfd *""'"); 
  }
  arg1 = reinterpret_cast< Cmfd * >(argp1);
  {
    try {
      result = (Lattice *)(arg1)->getLattice();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Lattice, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cmfd_getNumX(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Cmfd *arg1 = (Cmfd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Cmfd_getNumX",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Cmfd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cmfd_getNumX" "', argument " "1"" of type '" "Cmfd *""'"); 
  }
  arg1 = reinterpret_cast< Cmfd * >(argp1);
  {
    try {
      result = (int)(arg1)->getNumX();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cmfd_getNumY(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Cmfd *arg1 = (Cmfd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Cmfd_getNumY",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Cmfd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cmfd_getNumY" "', argument " "1"" of type '" "Cmfd *""'"); 
  }
  arg1 = reinterpret_cast< Cmfd * >(argp1);
  {
    try {
      result = (int)(arg1)->getNumY();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cmfd_convertFSRIdToCmfdCell(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Cmfd *arg1 = (Cmfd *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "fsr_id", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Cmfd_convertFSRIdToCmfdCell",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Cmfd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cmfd_convertFSRIdToCmfdCell" "', argument " "1"" of type '" "Cmfd *""'"); 
  }
  arg1 = reinterpret_cast< Cmfd * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Cmfd_convertFSRIdToCmfdCell" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (int)(arg1)->convertFSRIdToCmfdCell(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cmfd_getCellFSRs(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Cmfd *arg1 = (Cmfd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Cmfd_getCellFSRs",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Cmfd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cmfd_getCellFSRs" "', argument " "1"" of type '" "Cmfd *""'"); 
  }
  arg1 = reinterpret_cast< Cmfd * >(argp1);
  {
    try {
      result = (std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > *)(arg1)->getCellFSRs();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cmfd_isFluxUpdateOn(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Cmfd *arg1 = (Cmfd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Cmfd_isFluxUpdateOn",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Cmfd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cmfd_isFluxUpdateOn" "', argument " "1"" of type '" "Cmfd *""'"); 
  }
  arg1 = reinterpret_cast< Cmfd * >(argp1);
  {
    try {
      result = (bool)(arg1)->isFluxUpdateOn();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cmfd_isCentroidUpdateOn(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Cmfd *arg1 = (Cmfd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Cmfd_isCentroidUpdateOn",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Cmfd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cmfd_isCentroidUpdateOn" "', argument " "1"" of type '" "Cmfd *""'"); 
  }
  arg1 = reinterpret_cast< Cmfd * >(argp1);
  {
    try {
      result = (bool)(arg1)->isCentroidUpdateOn();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cmfd_setSORRelaxationFactor(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Cmfd *arg1 = (Cmfd *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "SOR_factor", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Cmfd_setSORRelaxationFactor",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Cmfd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cmfd_setSORRelaxationFactor" "', argument " "1"" of type '" "Cmfd *""'"); 
  }
  arg1 = reinterpret_cast< Cmfd * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Cmfd_setSORRelaxationFactor" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  {
    try {
      (arg1)->setSORRelaxationFactor(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cmfd_setGeometry(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Cmfd *arg1 = (Cmfd *) 0 ;
  Geometry *arg2 = (Geometry *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "geometry", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Cmfd_setGeometry",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Cmfd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cmfd_setGeometry" "', argument " "1"" of type '" "Cmfd *""'"); 
  }
  arg1 = reinterpret_cast< Cmfd * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Geometry, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Cmfd_setGeometry" "', argument " "2"" of type '" "Geometry *""'"); 
  }
  arg2 = reinterpret_cast< Geometry * >(argp2);
  {
    try {
      (arg1)->setGeometry(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cmfd_setWidthX(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Cmfd *arg1 = (Cmfd *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "width", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Cmfd_setWidthX",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Cmfd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cmfd_setWidthX" "', argument " "1"" of type '" "Cmfd *""'"); 
  }
  arg1 = reinterpret_cast< Cmfd * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Cmfd_setWidthX" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setWidthX(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cmfd_setWidthY(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Cmfd *arg1 = (Cmfd *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "width", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Cmfd_setWidthY",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Cmfd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cmfd_setWidthY" "', argument " "1"" of type '" "Cmfd *""'"); 
  }
  arg1 = reinterpret_cast< Cmfd * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Cmfd_setWidthY" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setWidthY(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cmfd_setNumX(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Cmfd *arg1 = (Cmfd *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "num_x", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Cmfd_setNumX",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Cmfd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cmfd_setNumX" "', argument " "1"" of type '" "Cmfd *""'"); 
  }
  arg1 = reinterpret_cast< Cmfd * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Cmfd_setNumX" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->setNumX(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cmfd_setNumY(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Cmfd *arg1 = (Cmfd *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "num_y", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Cmfd_setNumY",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Cmfd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cmfd_setNumY" "', argument " "1"" of type '" "Cmfd *""'"); 
  }
  arg1 = reinterpret_cast< Cmfd * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Cmfd_setNumY" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->setNumY(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cmfd_setNumFSRs(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Cmfd *arg1 = (Cmfd *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "num_fsrs", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Cmfd_setNumFSRs",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Cmfd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cmfd_setNumFSRs" "', argument " "1"" of type '" "Cmfd *""'"); 
  }
  arg1 = reinterpret_cast< Cmfd * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Cmfd_setNumFSRs" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->setNumFSRs(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cmfd_setNumMOCGroups(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Cmfd *arg1 = (Cmfd *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "num_moc_groups", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Cmfd_setNumMOCGroups",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Cmfd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cmfd_setNumMOCGroups" "', argument " "1"" of type '" "Cmfd *""'"); 
  }
  arg1 = reinterpret_cast< Cmfd * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Cmfd_setNumMOCGroups" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->setNumMOCGroups(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cmfd_setBoundary(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Cmfd *arg1 = (Cmfd *) 0 ;
  int arg2 ;
  boundaryType arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "side",(char *) "boundary", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:Cmfd_setBoundary",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Cmfd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cmfd_setBoundary" "', argument " "1"" of type '" "Cmfd *""'"); 
  }
  arg1 = reinterpret_cast< Cmfd * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Cmfd_setBoundary" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Cmfd_setBoundary" "', argument " "3"" of type '" "boundaryType""'");
  } 
  arg3 = static_cast< boundaryType >(val3);
  {
    try {
      (arg1)->setBoundary(arg2,arg3);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cmfd_setLatticeStructure(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Cmfd *arg1 = (Cmfd *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "num_x",(char *) "num_y", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:Cmfd_setLatticeStructure",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Cmfd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cmfd_setLatticeStructure" "', argument " "1"" of type '" "Cmfd *""'"); 
  }
  arg1 = reinterpret_cast< Cmfd * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Cmfd_setLatticeStructure" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Cmfd_setLatticeStructure" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      (arg1)->setLatticeStructure(arg2,arg3);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cmfd_setFluxUpdateOn(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Cmfd *arg1 = (Cmfd *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "flux_update_on", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Cmfd_setFluxUpdateOn",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Cmfd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cmfd_setFluxUpdateOn" "', argument " "1"" of type '" "Cmfd *""'"); 
  }
  arg1 = reinterpret_cast< Cmfd * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Cmfd_setFluxUpdateOn" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      (arg1)->setFluxUpdateOn(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cmfd_setCentroidUpdateOn(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Cmfd *arg1 = (Cmfd *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "centroid_update_on", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Cmfd_setCentroidUpdateOn",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Cmfd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cmfd_setCentroidUpdateOn" "', argument " "1"" of type '" "Cmfd *""'"); 
  }
  arg1 = reinterpret_cast< Cmfd * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Cmfd_setCentroidUpdateOn" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      (arg1)->setCentroidUpdateOn(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cmfd_setGroupStructure(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Cmfd *arg1 = (Cmfd *) 0 ;
  std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "group_indices", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Cmfd_setGroupStructure",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Cmfd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cmfd_setGroupStructure" "', argument " "1"" of type '" "Cmfd *""'"); 
  }
  arg1 = reinterpret_cast< Cmfd * >(argp1);
  {
    std::vector<std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > *ptr = (std::vector<std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > *)0;
    int res = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Cmfd_setGroupStructure" "', argument " "2"" of type '" "std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > >""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      (arg1)->setGroupStructure(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cmfd_setSourceConvergenceThreshold(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Cmfd *arg1 = (Cmfd *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "source_thresh", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Cmfd_setSourceConvergenceThreshold",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Cmfd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cmfd_setSourceConvergenceThreshold" "', argument " "1"" of type '" "Cmfd *""'"); 
  }
  arg1 = reinterpret_cast< Cmfd * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Cmfd_setSourceConvergenceThreshold" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  {
    try {
      (arg1)->setSourceConvergenceThreshold(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cmfd_setQuadrature(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Cmfd *arg1 = (Cmfd *) 0 ;
  Quadrature *arg2 = (Quadrature *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "quadrature", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Cmfd_setQuadrature",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Cmfd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cmfd_setQuadrature" "', argument " "1"" of type '" "Cmfd *""'"); 
  }
  arg1 = reinterpret_cast< Cmfd * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Quadrature, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Cmfd_setQuadrature" "', argument " "2"" of type '" "Quadrature *""'"); 
  }
  arg2 = reinterpret_cast< Quadrature * >(argp2);
  {
    try {
      (arg1)->setQuadrature(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cmfd_setKNearest(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Cmfd *arg1 = (Cmfd *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "k_nearest", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Cmfd_setKNearest",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Cmfd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cmfd_setKNearest" "', argument " "1"" of type '" "Cmfd *""'"); 
  }
  arg1 = reinterpret_cast< Cmfd * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Cmfd_setKNearest" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->setKNearest(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cmfd_setFSRMaterials(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Cmfd *arg1 = (Cmfd *) 0 ;
  Material **arg2 = (Material **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "FSR_materials", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Cmfd_setFSRMaterials",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Cmfd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cmfd_setFSRMaterials" "', argument " "1"" of type '" "Cmfd *""'"); 
  }
  arg1 = reinterpret_cast< Cmfd * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_p_Material, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Cmfd_setFSRMaterials" "', argument " "2"" of type '" "Material **""'"); 
  }
  arg2 = reinterpret_cast< Material ** >(argp2);
  {
    try {
      (arg1)->setFSRMaterials(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cmfd_setFSRVolumes(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Cmfd *arg1 = (Cmfd *) 0 ;
  float *arg2 = (float *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "FSR_volumes", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Cmfd_setFSRVolumes",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Cmfd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cmfd_setFSRVolumes" "', argument " "1"" of type '" "Cmfd *""'"); 
  }
  arg1 = reinterpret_cast< Cmfd * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Cmfd_setFSRVolumes" "', argument " "2"" of type '" "float *""'"); 
  }
  arg2 = reinterpret_cast< float * >(argp2);
  {
    try {
      (arg1)->setFSRVolumes(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cmfd_setFSRFluxes(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Cmfd *arg1 = (Cmfd *) 0 ;
  float *arg2 = (float *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "scalar_flux", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Cmfd_setFSRFluxes",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Cmfd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cmfd_setFSRFluxes" "', argument " "1"" of type '" "Cmfd *""'"); 
  }
  arg1 = reinterpret_cast< Cmfd * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Cmfd_setFSRFluxes" "', argument " "2"" of type '" "float *""'"); 
  }
  arg2 = reinterpret_cast< float * >(argp2);
  {
    try {
      (arg1)->setFSRFluxes(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cmfd_setCellFSRs(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Cmfd *arg1 = (Cmfd *) 0 ;
  std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > *arg2 = (std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "cell_fsrs", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Cmfd_setCellFSRs",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Cmfd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cmfd_setCellFSRs" "', argument " "1"" of type '" "Cmfd *""'"); 
  }
  arg1 = reinterpret_cast< Cmfd * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Cmfd_setCellFSRs" "', argument " "2"" of type '" "std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > * >(argp2);
  {
    try {
      (arg1)->setCellFSRs(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Cmfd_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Cmfd, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_Vector(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  omp_lock_t *arg1 = (omp_lock_t *) 0 ;
  int arg2 = (int) 1 ;
  int arg3 = (int) 1 ;
  int arg4 = (int) 1 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char *  kwnames[] = {
    (char *) "cell_locks",(char *) "num_x",(char *) "num_y",(char *) "num_groups", NULL 
  };
  Vector *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|OOO:new_Vector",kwnames,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_omp_lock_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Vector" "', argument " "1"" of type '" "omp_lock_t *""'"); 
  }
  arg1 = reinterpret_cast< omp_lock_t * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_int(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Vector" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
  }
  if (obj2) {
    ecode3 = SWIG_AsVal_int(obj2, &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Vector" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
  }
  if (obj3) {
    ecode4 = SWIG_AsVal_int(obj3, &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_Vector" "', argument " "4"" of type '" "int""'");
    } 
    arg4 = static_cast< int >(val4);
  }
  {
    try {
      result = (Vector *)new Vector(arg1,arg2,arg3,arg4);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Vector, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Vector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vector *arg1 = (Vector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Vector",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vector, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Vector" "', argument " "1"" of type '" "Vector *""'"); 
  }
  arg1 = reinterpret_cast< Vector * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vector_incrementValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Vector *arg1 = (Vector *) 0 ;
  int arg2 ;
  int arg3 ;
  float arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "cell",(char *) "group",(char *) "val", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOO:Vector_incrementValue",kwnames,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector_incrementValue" "', argument " "1"" of type '" "Vector *""'"); 
  }
  arg1 = reinterpret_cast< Vector * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vector_incrementValue" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Vector_incrementValue" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Vector_incrementValue" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = static_cast< float >(val4);
  {
    try {
      (arg1)->incrementValue(arg2,arg3,arg4);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vector_incrementValues(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Vector *arg1 = (Vector *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  float *arg5 = (float *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "cell",(char *) "group_start",(char *) "group_end",(char *) "vals", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOOO:Vector_incrementValues",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector_incrementValues" "', argument " "1"" of type '" "Vector *""'"); 
  }
  arg1 = reinterpret_cast< Vector * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vector_incrementValues" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Vector_incrementValues" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Vector_incrementValues" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Vector_incrementValues" "', argument " "5"" of type '" "float *""'"); 
  }
  arg5 = reinterpret_cast< float * >(argp5);
  {
    try {
      (arg1)->incrementValues(arg2,arg3,arg4,arg5);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vector_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vector *arg1 = (Vector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Vector_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector_clear" "', argument " "1"" of type '" "Vector *""'"); 
  }
  arg1 = reinterpret_cast< Vector * >(argp1);
  {
    try {
      (arg1)->clear();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vector_scaleByValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Vector *arg1 = (Vector *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "val", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Vector_scaleByValue",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector_scaleByValue" "', argument " "1"" of type '" "Vector *""'"); 
  }
  arg1 = reinterpret_cast< Vector * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vector_scaleByValue" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  {
    try {
      (arg1)->scaleByValue(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vector_printString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vector *arg1 = (Vector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Vector_printString",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector_printString" "', argument " "1"" of type '" "Vector *""'"); 
  }
  arg1 = reinterpret_cast< Vector * >(argp1);
  {
    try {
      (arg1)->printString();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vector_copyTo(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Vector *arg1 = (Vector *) 0 ;
  Vector *arg2 = (Vector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "vector", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Vector_copyTo",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector_copyTo" "', argument " "1"" of type '" "Vector *""'"); 
  }
  arg1 = reinterpret_cast< Vector * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Vector, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Vector_copyTo" "', argument " "2"" of type '" "Vector *""'"); 
  }
  arg2 = reinterpret_cast< Vector * >(argp2);
  {
    try {
      (arg1)->copyTo(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vector_getValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Vector *arg1 = (Vector *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "cell",(char *) "group", NULL 
  };
  float result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:Vector_getValue",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector_getValue" "', argument " "1"" of type '" "Vector *""'"); 
  }
  arg1 = reinterpret_cast< Vector * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vector_getValue" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Vector_getValue" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (float)(arg1)->getValue(arg2,arg3);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vector_getArray(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vector *arg1 = (Vector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Vector_getArray",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector_getArray" "', argument " "1"" of type '" "Vector *""'"); 
  }
  arg1 = reinterpret_cast< Vector * >(argp1);
  {
    try {
      result = (float *)(arg1)->getArray();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_float, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vector_getNumX(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vector *arg1 = (Vector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Vector_getNumX",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector_getNumX" "', argument " "1"" of type '" "Vector *""'"); 
  }
  arg1 = reinterpret_cast< Vector * >(argp1);
  {
    try {
      result = (int)(arg1)->getNumX();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vector_getNumY(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vector *arg1 = (Vector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Vector_getNumY",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector_getNumY" "', argument " "1"" of type '" "Vector *""'"); 
  }
  arg1 = reinterpret_cast< Vector * >(argp1);
  {
    try {
      result = (int)(arg1)->getNumY();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vector_getNumGroups(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vector *arg1 = (Vector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Vector_getNumGroups",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector_getNumGroups" "', argument " "1"" of type '" "Vector *""'"); 
  }
  arg1 = reinterpret_cast< Vector * >(argp1);
  {
    try {
      result = (int)(arg1)->getNumGroups();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vector_getNumRows(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vector *arg1 = (Vector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Vector_getNumRows",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector_getNumRows" "', argument " "1"" of type '" "Vector *""'"); 
  }
  arg1 = reinterpret_cast< Vector * >(argp1);
  {
    try {
      result = (int)(arg1)->getNumRows();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vector_getSum(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vector *arg1 = (Vector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Vector_getSum",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector_getSum" "', argument " "1"" of type '" "Vector *""'"); 
  }
  arg1 = reinterpret_cast< Vector * >(argp1);
  {
    try {
      result = (float)(arg1)->getSum();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vector_getCellLocks(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vector *arg1 = (Vector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  omp_lock_t *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Vector_getCellLocks",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector_getCellLocks" "', argument " "1"" of type '" "Vector *""'"); 
  }
  arg1 = reinterpret_cast< Vector * >(argp1);
  {
    try {
      result = (omp_lock_t *)(arg1)->getCellLocks();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_omp_lock_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vector_setValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Vector *arg1 = (Vector *) 0 ;
  int arg2 ;
  int arg3 ;
  float arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "cell",(char *) "group",(char *) "val", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOO:Vector_setValue",kwnames,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector_setValue" "', argument " "1"" of type '" "Vector *""'"); 
  }
  arg1 = reinterpret_cast< Vector * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vector_setValue" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Vector_setValue" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Vector_setValue" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = static_cast< float >(val4);
  {
    try {
      (arg1)->setValue(arg2,arg3,arg4);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vector_setValues(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Vector *arg1 = (Vector *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  float *arg5 = (float *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "cell",(char *) "group_start",(char *) "group_end",(char *) "vals", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOOO:Vector_setValues",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector_setValues" "', argument " "1"" of type '" "Vector *""'"); 
  }
  arg1 = reinterpret_cast< Vector * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vector_setValues" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Vector_setValues" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Vector_setValues" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Vector_setValues" "', argument " "5"" of type '" "float *""'"); 
  }
  arg5 = reinterpret_cast< float * >(argp5);
  {
    try {
      (arg1)->setValues(arg2,arg3,arg4,arg5);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vector_setAll(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Vector *arg1 = (Vector *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "val", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Vector_setAll",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector_setAll" "', argument " "1"" of type '" "Vector *""'"); 
  }
  arg1 = reinterpret_cast< Vector * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vector_setAll" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  {
    try {
      (arg1)->setAll(arg2);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Vector_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Vector, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_Matrix(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  omp_lock_t *arg1 = (omp_lock_t *) 0 ;
  int arg2 = (int) 1 ;
  int arg3 = (int) 1 ;
  int arg4 = (int) 1 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char *  kwnames[] = {
    (char *) "cell_locks",(char *) "num_x",(char *) "num_y",(char *) "num_groups", NULL 
  };
  Matrix *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|OOO:new_Matrix",kwnames,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_omp_lock_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Matrix" "', argument " "1"" of type '" "omp_lock_t *""'"); 
  }
  arg1 = reinterpret_cast< omp_lock_t * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_int(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Matrix" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
  }
  if (obj2) {
    ecode3 = SWIG_AsVal_int(obj2, &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Matrix" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
  }
  if (obj3) {
    ecode4 = SWIG_AsVal_int(obj3, &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_Matrix" "', argument " "4"" of type '" "int""'");
    } 
    arg4 = static_cast< int >(val4);
  }
  {
    try {
      result = (Matrix *)new Matrix(arg1,arg2,arg3,arg4);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Matrix, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Matrix(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Matrix *arg1 = (Matrix *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Matrix",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Matrix, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Matrix" "', argument " "1"" of type '" "Matrix *""'"); 
  }
  arg1 = reinterpret_cast< Matrix * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Matrix_incrementValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Matrix *arg1 = (Matrix *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  float arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  float val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "cell_from",(char *) "group_from",(char *) "cell_to",(char *) "group_to",(char *) "val", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOOOO:Matrix_incrementValue",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Matrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix_incrementValue" "', argument " "1"" of type '" "Matrix *""'"); 
  }
  arg1 = reinterpret_cast< Matrix * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Matrix_incrementValue" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Matrix_incrementValue" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Matrix_incrementValue" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Matrix_incrementValue" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_float(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "Matrix_incrementValue" "', argument " "6"" of type '" "float""'");
  } 
  arg6 = static_cast< float >(val6);
  {
    try {
      (arg1)->incrementValue(arg2,arg3,arg4,arg5,arg6);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Matrix_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Matrix *arg1 = (Matrix *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Matrix_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Matrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix_clear" "', argument " "1"" of type '" "Matrix *""'"); 
  }
  arg1 = reinterpret_cast< Matrix * >(argp1);
  {
    try {
      (arg1)->clear();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Matrix_printString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Matrix *arg1 = (Matrix *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Matrix_printString",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Matrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix_printString" "', argument " "1"" of type '" "Matrix *""'"); 
  }
  arg1 = reinterpret_cast< Matrix * >(argp1);
  {
    try {
      (arg1)->printString();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Matrix_transpose(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Matrix *arg1 = (Matrix *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Matrix_transpose",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Matrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix_transpose" "', argument " "1"" of type '" "Matrix *""'"); 
  }
  arg1 = reinterpret_cast< Matrix * >(argp1);
  {
    try {
      (arg1)->transpose();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Matrix_getValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Matrix *arg1 = (Matrix *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "cell_from",(char *) "group_from",(char *) "cell_to",(char *) "group_to", NULL 
  };
  float result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOOO:Matrix_getValue",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Matrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix_getValue" "', argument " "1"" of type '" "Matrix *""'"); 
  }
  arg1 = reinterpret_cast< Matrix * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Matrix_getValue" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Matrix_getValue" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Matrix_getValue" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Matrix_getValue" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  {
    try {
      result = (float)(arg1)->getValue(arg2,arg3,arg4,arg5);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Matrix_getLU(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Matrix *arg1 = (Matrix *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Matrix_getLU",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Matrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix_getLU" "', argument " "1"" of type '" "Matrix *""'"); 
  }
  arg1 = reinterpret_cast< Matrix * >(argp1);
  {
    try {
      result = (float *)(arg1)->getLU();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_float, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Matrix_getILU(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Matrix *arg1 = (Matrix *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Matrix_getILU",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Matrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix_getILU" "', argument " "1"" of type '" "Matrix *""'"); 
  }
  arg1 = reinterpret_cast< Matrix * >(argp1);
  {
    try {
      result = (int *)(arg1)->getILU();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_int, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Matrix_getJLU(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Matrix *arg1 = (Matrix *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Matrix_getJLU",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Matrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix_getJLU" "', argument " "1"" of type '" "Matrix *""'"); 
  }
  arg1 = reinterpret_cast< Matrix * >(argp1);
  {
    try {
      result = (int *)(arg1)->getJLU();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_int, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Matrix_getNumX(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Matrix *arg1 = (Matrix *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Matrix_getNumX",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Matrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix_getNumX" "', argument " "1"" of type '" "Matrix *""'"); 
  }
  arg1 = reinterpret_cast< Matrix * >(argp1);
  {
    try {
      result = (int)(arg1)->getNumX();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Matrix_getNumY(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Matrix *arg1 = (Matrix *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Matrix_getNumY",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Matrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix_getNumY" "', argument " "1"" of type '" "Matrix *""'"); 
  }
  arg1 = reinterpret_cast< Matrix * >(argp1);
  {
    try {
      result = (int)(arg1)->getNumY();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Matrix_getNumGroups(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Matrix *arg1 = (Matrix *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Matrix_getNumGroups",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Matrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix_getNumGroups" "', argument " "1"" of type '" "Matrix *""'"); 
  }
  arg1 = reinterpret_cast< Matrix * >(argp1);
  {
    try {
      result = (int)(arg1)->getNumGroups();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Matrix_getNumRows(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Matrix *arg1 = (Matrix *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Matrix_getNumRows",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Matrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix_getNumRows" "', argument " "1"" of type '" "Matrix *""'"); 
  }
  arg1 = reinterpret_cast< Matrix * >(argp1);
  {
    try {
      result = (int)(arg1)->getNumRows();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Matrix_getNNZ(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Matrix *arg1 = (Matrix *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Matrix_getNNZ",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Matrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix_getNNZ" "', argument " "1"" of type '" "Matrix *""'"); 
  }
  arg1 = reinterpret_cast< Matrix * >(argp1);
  {
    try {
      result = (int)(arg1)->getNNZ();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Matrix_getNNZLU(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Matrix *arg1 = (Matrix *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Matrix_getNNZLU",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Matrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix_getNNZLU" "', argument " "1"" of type '" "Matrix *""'"); 
  }
  arg1 = reinterpret_cast< Matrix * >(argp1);
  {
    try {
      result = (int)(arg1)->getNNZLU();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Matrix_getCellLocks(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Matrix *arg1 = (Matrix *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  omp_lock_t *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Matrix_getCellLocks",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Matrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix_getCellLocks" "', argument " "1"" of type '" "Matrix *""'"); 
  }
  arg1 = reinterpret_cast< Matrix * >(argp1);
  {
    try {
      result = (omp_lock_t *)(arg1)->getCellLocks();
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_omp_lock_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Matrix_setValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Matrix *arg1 = (Matrix *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  float arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  float val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "cell_from",(char *) "group_from",(char *) "cell_to",(char *) "group_to",(char *) "val", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOOOO:Matrix_setValue",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Matrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix_setValue" "', argument " "1"" of type '" "Matrix *""'"); 
  }
  arg1 = reinterpret_cast< Matrix * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Matrix_setValue" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Matrix_setValue" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Matrix_setValue" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Matrix_setValue" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_float(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "Matrix_setValue" "', argument " "6"" of type '" "float""'");
  } 
  arg6 = static_cast< float >(val6);
  {
    try {
      (arg1)->setValue(arg2,arg3,arg4,arg5,arg6);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Matrix_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Matrix, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_eigenvalueSolve(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Matrix *arg1 = (Matrix *) 0 ;
  Matrix *arg2 = (Matrix *) 0 ;
  Vector *arg3 = (Vector *) 0 ;
  float arg4 ;
  float arg5 = (float) 1.5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  char *  kwnames[] = {
    (char *) "A",(char *) "M",(char *) "X",(char *) "tol",(char *) "SOR_factor", NULL 
  };
  float result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOO|O:eigenvalueSolve",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Matrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "eigenvalueSolve" "', argument " "1"" of type '" "Matrix *""'"); 
  }
  arg1 = reinterpret_cast< Matrix * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Matrix, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "eigenvalueSolve" "', argument " "2"" of type '" "Matrix *""'"); 
  }
  arg2 = reinterpret_cast< Matrix * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_Vector, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "eigenvalueSolve" "', argument " "3"" of type '" "Vector *""'"); 
  }
  arg3 = reinterpret_cast< Vector * >(argp3);
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "eigenvalueSolve" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = static_cast< float >(val4);
  if (obj4) {
    ecode5 = SWIG_AsVal_float(obj4, &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "eigenvalueSolve" "', argument " "5"" of type '" "float""'");
    } 
    arg5 = static_cast< float >(val5);
  }
  {
    try {
      result = (float)eigenvalueSolve(arg1,arg2,arg3,arg4,arg5);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_linearSolve(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Matrix *arg1 = (Matrix *) 0 ;
  Matrix *arg2 = (Matrix *) 0 ;
  Vector *arg3 = (Vector *) 0 ;
  Vector *arg4 = (Vector *) 0 ;
  float arg5 ;
  float arg6 = (float) 1.5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  float val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  char *  kwnames[] = {
    (char *) "A",(char *) "M",(char *) "X",(char *) "B",(char *) "tol",(char *) "SOR_factor", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOOO|O:linearSolve",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Matrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "linearSolve" "', argument " "1"" of type '" "Matrix *""'"); 
  }
  arg1 = reinterpret_cast< Matrix * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Matrix, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "linearSolve" "', argument " "2"" of type '" "Matrix *""'"); 
  }
  arg2 = reinterpret_cast< Matrix * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_Vector, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "linearSolve" "', argument " "3"" of type '" "Vector *""'"); 
  }
  arg3 = reinterpret_cast< Vector * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_Vector, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "linearSolve" "', argument " "4"" of type '" "Vector *""'"); 
  }
  arg4 = reinterpret_cast< Vector * >(argp4);
  ecode5 = SWIG_AsVal_float(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "linearSolve" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = static_cast< float >(val5);
  if (obj5) {
    ecode6 = SWIG_AsVal_float(obj5, &val6);
    if (!SWIG_IsOK(ecode6)) {
      SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "linearSolve" "', argument " "6"" of type '" "float""'");
    } 
    arg6 = static_cast< float >(val6);
  }
  {
    try {
      linearSolve(arg1,arg2,arg3,arg4,arg5,arg6);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_matrixMultiplication(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Matrix *arg1 = (Matrix *) 0 ;
  Vector *arg2 = (Vector *) 0 ;
  Vector *arg3 = (Vector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "A",(char *) "X",(char *) "B", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:matrixMultiplication",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Matrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "matrixMultiplication" "', argument " "1"" of type '" "Matrix *""'"); 
  }
  arg1 = reinterpret_cast< Matrix * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Vector, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "matrixMultiplication" "', argument " "2"" of type '" "Vector *""'"); 
  }
  arg2 = reinterpret_cast< Vector * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_Vector, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "matrixMultiplication" "', argument " "3"" of type '" "Vector *""'"); 
  }
  arg3 = reinterpret_cast< Vector * >(argp3);
  {
    try {
      matrixMultiplication(arg1,arg2,arg3);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_computeRMSE(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Vector *arg1 = (Vector *) 0 ;
  Vector *arg2 = (Vector *) 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "x",(char *) "y",(char *) "integrated", NULL 
  };
  float result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:computeRMSE",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Vector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "computeRMSE" "', argument " "1"" of type '" "Vector *""'"); 
  }
  arg1 = reinterpret_cast< Vector * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Vector, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "computeRMSE" "', argument " "2"" of type '" "Vector *""'"); 
  }
  arg2 = reinterpret_cast< Vector * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "computeRMSE" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      result = (float)computeRMSE(arg1,arg2,arg3);
    } catch (const std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


static PyMethodDef SwigMethods[] = {
	 { (char *)"SWIG_PyInstanceMethod_New", (PyCFunction)SWIG_PyInstanceMethod_New, METH_O, NULL},
	 { (char *)"castUniverseToLattice", (PyCFunction) _wrap_castUniverseToLattice, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"castLatticeToUniverse", (PyCFunction) _wrap_castLatticeToUniverse, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"castSurfaceToPlane", (PyCFunction) _wrap_castSurfaceToPlane, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"castSurfaceToXPlane", (PyCFunction) _wrap_castSurfaceToXPlane, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"castSurfaceToYPlane", (PyCFunction) _wrap_castSurfaceToYPlane, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"castSurfaceToZPlane", (PyCFunction) _wrap_castSurfaceToZPlane, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"castSurfaceToZCylinder", (PyCFunction) _wrap_castSurfaceToZCylinder, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"delete_SwigPyIterator", _wrap_delete_SwigPyIterator, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator_value", _wrap_SwigPyIterator_value, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator_incr", (PyCFunction) _wrap_SwigPyIterator_incr, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"SwigPyIterator_decr", (PyCFunction) _wrap_SwigPyIterator_decr, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"SwigPyIterator_distance", (PyCFunction) _wrap_SwigPyIterator_distance, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"SwigPyIterator_equal", (PyCFunction) _wrap_SwigPyIterator_equal, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"SwigPyIterator_copy", _wrap_SwigPyIterator_copy, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator_next", _wrap_SwigPyIterator_next, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator___next__", _wrap_SwigPyIterator___next__, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator_previous", _wrap_SwigPyIterator_previous, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator_advance", (PyCFunction) _wrap_SwigPyIterator_advance, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"SwigPyIterator___eq__", (PyCFunction) _wrap_SwigPyIterator___eq__, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"SwigPyIterator___ne__", (PyCFunction) _wrap_SwigPyIterator___ne__, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"SwigPyIterator___iadd__", (PyCFunction) _wrap_SwigPyIterator___iadd__, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"SwigPyIterator___isub__", (PyCFunction) _wrap_SwigPyIterator___isub__, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"SwigPyIterator___add__", (PyCFunction) _wrap_SwigPyIterator___add__, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"SwigPyIterator___sub__", _wrap_SwigPyIterator___sub__, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator_swigregister", SwigPyIterator_swigregister, METH_VARARGS, NULL},
	 { (char *)"DoubleVector_iterator", _wrap_DoubleVector_iterator, METH_VARARGS, NULL},
	 { (char *)"DoubleVector___nonzero__", _wrap_DoubleVector___nonzero__, METH_VARARGS, NULL},
	 { (char *)"DoubleVector___bool__", _wrap_DoubleVector___bool__, METH_VARARGS, NULL},
	 { (char *)"DoubleVector___len__", _wrap_DoubleVector___len__, METH_VARARGS, NULL},
	 { (char *)"DoubleVector_pop", _wrap_DoubleVector_pop, METH_VARARGS, NULL},
	 { (char *)"DoubleVector___getslice__", (PyCFunction) _wrap_DoubleVector___getslice__, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DoubleVector___setslice__", (PyCFunction) _wrap_DoubleVector___setslice__, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DoubleVector___delslice__", (PyCFunction) _wrap_DoubleVector___delslice__, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DoubleVector___delitem__", _wrap_DoubleVector___delitem__, METH_VARARGS, NULL},
	 { (char *)"DoubleVector___getitem__", _wrap_DoubleVector___getitem__, METH_VARARGS, NULL},
	 { (char *)"DoubleVector___setitem__", _wrap_DoubleVector___setitem__, METH_VARARGS, NULL},
	 { (char *)"DoubleVector_append", (PyCFunction) _wrap_DoubleVector_append, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DoubleVector_empty", _wrap_DoubleVector_empty, METH_VARARGS, NULL},
	 { (char *)"DoubleVector_size", _wrap_DoubleVector_size, METH_VARARGS, NULL},
	 { (char *)"DoubleVector_clear", _wrap_DoubleVector_clear, METH_VARARGS, NULL},
	 { (char *)"DoubleVector_swap", (PyCFunction) _wrap_DoubleVector_swap, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DoubleVector_get_allocator", _wrap_DoubleVector_get_allocator, METH_VARARGS, NULL},
	 { (char *)"DoubleVector_begin", _wrap_DoubleVector_begin, METH_VARARGS, NULL},
	 { (char *)"DoubleVector_end", _wrap_DoubleVector_end, METH_VARARGS, NULL},
	 { (char *)"DoubleVector_rbegin", _wrap_DoubleVector_rbegin, METH_VARARGS, NULL},
	 { (char *)"DoubleVector_rend", _wrap_DoubleVector_rend, METH_VARARGS, NULL},
	 { (char *)"DoubleVector_pop_back", _wrap_DoubleVector_pop_back, METH_VARARGS, NULL},
	 { (char *)"DoubleVector_erase", _wrap_DoubleVector_erase, METH_VARARGS, NULL},
	 { (char *)"new_DoubleVector", _wrap_new_DoubleVector, METH_VARARGS, NULL},
	 { (char *)"DoubleVector_push_back", (PyCFunction) _wrap_DoubleVector_push_back, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DoubleVector_front", _wrap_DoubleVector_front, METH_VARARGS, NULL},
	 { (char *)"DoubleVector_back", _wrap_DoubleVector_back, METH_VARARGS, NULL},
	 { (char *)"DoubleVector_assign", (PyCFunction) _wrap_DoubleVector_assign, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DoubleVector_resize", _wrap_DoubleVector_resize, METH_VARARGS, NULL},
	 { (char *)"DoubleVector_insert", _wrap_DoubleVector_insert, METH_VARARGS, NULL},
	 { (char *)"DoubleVector_reserve", (PyCFunction) _wrap_DoubleVector_reserve, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DoubleVector_capacity", _wrap_DoubleVector_capacity, METH_VARARGS, NULL},
	 { (char *)"delete_DoubleVector", _wrap_delete_DoubleVector, METH_VARARGS, NULL},
	 { (char *)"DoubleVector_swigregister", DoubleVector_swigregister, METH_VARARGS, NULL},
	 { (char *)"IntVector_iterator", _wrap_IntVector_iterator, METH_VARARGS, NULL},
	 { (char *)"IntVector___nonzero__", _wrap_IntVector___nonzero__, METH_VARARGS, NULL},
	 { (char *)"IntVector___bool__", _wrap_IntVector___bool__, METH_VARARGS, NULL},
	 { (char *)"IntVector___len__", _wrap_IntVector___len__, METH_VARARGS, NULL},
	 { (char *)"IntVector_pop", _wrap_IntVector_pop, METH_VARARGS, NULL},
	 { (char *)"IntVector___getslice__", (PyCFunction) _wrap_IntVector___getslice__, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"IntVector___setslice__", (PyCFunction) _wrap_IntVector___setslice__, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"IntVector___delslice__", (PyCFunction) _wrap_IntVector___delslice__, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"IntVector___delitem__", _wrap_IntVector___delitem__, METH_VARARGS, NULL},
	 { (char *)"IntVector___getitem__", _wrap_IntVector___getitem__, METH_VARARGS, NULL},
	 { (char *)"IntVector___setitem__", _wrap_IntVector___setitem__, METH_VARARGS, NULL},
	 { (char *)"IntVector_append", (PyCFunction) _wrap_IntVector_append, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"IntVector_empty", _wrap_IntVector_empty, METH_VARARGS, NULL},
	 { (char *)"IntVector_size", _wrap_IntVector_size, METH_VARARGS, NULL},
	 { (char *)"IntVector_clear", _wrap_IntVector_clear, METH_VARARGS, NULL},
	 { (char *)"IntVector_swap", (PyCFunction) _wrap_IntVector_swap, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"IntVector_get_allocator", _wrap_IntVector_get_allocator, METH_VARARGS, NULL},
	 { (char *)"IntVector_begin", _wrap_IntVector_begin, METH_VARARGS, NULL},
	 { (char *)"IntVector_end", _wrap_IntVector_end, METH_VARARGS, NULL},
	 { (char *)"IntVector_rbegin", _wrap_IntVector_rbegin, METH_VARARGS, NULL},
	 { (char *)"IntVector_rend", _wrap_IntVector_rend, METH_VARARGS, NULL},
	 { (char *)"IntVector_pop_back", _wrap_IntVector_pop_back, METH_VARARGS, NULL},
	 { (char *)"IntVector_erase", _wrap_IntVector_erase, METH_VARARGS, NULL},
	 { (char *)"new_IntVector", _wrap_new_IntVector, METH_VARARGS, NULL},
	 { (char *)"IntVector_push_back", (PyCFunction) _wrap_IntVector_push_back, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"IntVector_front", _wrap_IntVector_front, METH_VARARGS, NULL},
	 { (char *)"IntVector_back", _wrap_IntVector_back, METH_VARARGS, NULL},
	 { (char *)"IntVector_assign", (PyCFunction) _wrap_IntVector_assign, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"IntVector_resize", _wrap_IntVector_resize, METH_VARARGS, NULL},
	 { (char *)"IntVector_insert", _wrap_IntVector_insert, METH_VARARGS, NULL},
	 { (char *)"IntVector_reserve", (PyCFunction) _wrap_IntVector_reserve, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"IntVector_capacity", _wrap_IntVector_capacity, METH_VARARGS, NULL},
	 { (char *)"delete_IntVector", _wrap_delete_IntVector, METH_VARARGS, NULL},
	 { (char *)"IntVector_swigregister", IntVector_swigregister, METH_VARARGS, NULL},
	 { (char *)"Array_iterator", _wrap_Array_iterator, METH_VARARGS, NULL},
	 { (char *)"Array___nonzero__", _wrap_Array___nonzero__, METH_VARARGS, NULL},
	 { (char *)"Array___bool__", _wrap_Array___bool__, METH_VARARGS, NULL},
	 { (char *)"Array___len__", _wrap_Array___len__, METH_VARARGS, NULL},
	 { (char *)"Array_pop", _wrap_Array_pop, METH_VARARGS, NULL},
	 { (char *)"Array___getslice__", (PyCFunction) _wrap_Array___getslice__, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Array___setslice__", (PyCFunction) _wrap_Array___setslice__, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Array___delslice__", (PyCFunction) _wrap_Array___delslice__, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Array___delitem__", _wrap_Array___delitem__, METH_VARARGS, NULL},
	 { (char *)"Array___getitem__", _wrap_Array___getitem__, METH_VARARGS, NULL},
	 { (char *)"Array___setitem__", _wrap_Array___setitem__, METH_VARARGS, NULL},
	 { (char *)"Array_append", (PyCFunction) _wrap_Array_append, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Array_empty", _wrap_Array_empty, METH_VARARGS, NULL},
	 { (char *)"Array_size", _wrap_Array_size, METH_VARARGS, NULL},
	 { (char *)"Array_clear", _wrap_Array_clear, METH_VARARGS, NULL},
	 { (char *)"Array_swap", (PyCFunction) _wrap_Array_swap, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Array_get_allocator", _wrap_Array_get_allocator, METH_VARARGS, NULL},
	 { (char *)"Array_begin", _wrap_Array_begin, METH_VARARGS, NULL},
	 { (char *)"Array_end", _wrap_Array_end, METH_VARARGS, NULL},
	 { (char *)"Array_rbegin", _wrap_Array_rbegin, METH_VARARGS, NULL},
	 { (char *)"Array_rend", _wrap_Array_rend, METH_VARARGS, NULL},
	 { (char *)"Array_pop_back", _wrap_Array_pop_back, METH_VARARGS, NULL},
	 { (char *)"Array_erase", _wrap_Array_erase, METH_VARARGS, NULL},
	 { (char *)"new_Array", _wrap_new_Array, METH_VARARGS, NULL},
	 { (char *)"Array_push_back", (PyCFunction) _wrap_Array_push_back, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Array_front", _wrap_Array_front, METH_VARARGS, NULL},
	 { (char *)"Array_back", _wrap_Array_back, METH_VARARGS, NULL},
	 { (char *)"Array_assign", (PyCFunction) _wrap_Array_assign, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Array_resize", _wrap_Array_resize, METH_VARARGS, NULL},
	 { (char *)"Array_insert", _wrap_Array_insert, METH_VARARGS, NULL},
	 { (char *)"Array_reserve", (PyCFunction) _wrap_Array_reserve, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Array_capacity", _wrap_Array_capacity, METH_VARARGS, NULL},
	 { (char *)"delete_Array", _wrap_delete_Array, METH_VARARGS, NULL},
	 { (char *)"Array_swigregister", Array_swigregister, METH_VARARGS, NULL},
	 { (char *)"REPORT_WIDTH_swigconstant", REPORT_WIDTH_swigconstant, METH_VARARGS, NULL},
	 { (char *)"DEFAULT_INIT_ID_swigconstant", DEFAULT_INIT_ID_swigconstant, METH_VARARGS, NULL},
	 { (char *)"FOUR_PI_swigconstant", FOUR_PI_swigconstant, METH_VARARGS, NULL},
	 { (char *)"ONE_OVER_FOUR_PI_swigconstant", ONE_OVER_FOUR_PI_swigconstant, METH_VARARGS, NULL},
	 { (char *)"ZERO_SIGMA_T_swigconstant", ZERO_SIGMA_T_swigconstant, METH_VARARGS, NULL},
	 { (char *)"SIGMA_T_THRESH_swigconstant", SIGMA_T_THRESH_swigconstant, METH_VARARGS, NULL},
	 { (char *)"TINY_MOVE_swigconstant", TINY_MOVE_swigconstant, METH_VARARGS, NULL},
	 { (char *)"ON_LATTICE_CELL_THRESH_swigconstant", ON_LATTICE_CELL_THRESH_swigconstant, METH_VARARGS, NULL},
	 { (char *)"ON_SURFACE_THRESH_swigconstant", ON_SURFACE_THRESH_swigconstant, METH_VARARGS, NULL},
	 { (char *)"POLAR_WEIGHT_SUM_TOL_swigconstant", POLAR_WEIGHT_SUM_TOL_swigconstant, METH_VARARGS, NULL},
	 { (char *)"TAU_NUDGE_swigconstant", TAU_NUDGE_swigconstant, METH_VARARGS, NULL},
	 { (char *)"MIN_LINALG_POWER_ITERATIONS_swigconstant", MIN_LINALG_POWER_ITERATIONS_swigconstant, METH_VARARGS, NULL},
	 { (char *)"MAX_LINALG_POWER_ITERATIONS_swigconstant", MAX_LINALG_POWER_ITERATIONS_swigconstant, METH_VARARGS, NULL},
	 { (char *)"MIN_LINEAR_SOLVE_ITERATIONS_swigconstant", MIN_LINEAR_SOLVE_ITERATIONS_swigconstant, METH_VARARGS, NULL},
	 { (char *)"MAX_LINEAR_SOLVE_ITERATIONS_swigconstant", MAX_LINEAR_SOLVE_ITERATIONS_swigconstant, METH_VARARGS, NULL},
	 { (char *)"NUM_FACES_swigconstant", NUM_FACES_swigconstant, METH_VARARGS, NULL},
	 { (char *)"NUM_EDGES_swigconstant", NUM_EDGES_swigconstant, METH_VARARGS, NULL},
	 { (char *)"NUM_SURFACES_swigconstant", NUM_SURFACES_swigconstant, METH_VARARGS, NULL},
	 { (char *)"SURFACE_X_MIN_swigconstant", SURFACE_X_MIN_swigconstant, METH_VARARGS, NULL},
	 { (char *)"SURFACE_Y_MIN_swigconstant", SURFACE_Y_MIN_swigconstant, METH_VARARGS, NULL},
	 { (char *)"SURFACE_X_MAX_swigconstant", SURFACE_X_MAX_swigconstant, METH_VARARGS, NULL},
	 { (char *)"SURFACE_Y_MAX_swigconstant", SURFACE_Y_MAX_swigconstant, METH_VARARGS, NULL},
	 { (char *)"SURFACE_X_MIN_Y_MIN_swigconstant", SURFACE_X_MIN_Y_MIN_swigconstant, METH_VARARGS, NULL},
	 { (char *)"SURFACE_X_MAX_Y_MIN_swigconstant", SURFACE_X_MAX_Y_MIN_swigconstant, METH_VARARGS, NULL},
	 { (char *)"SURFACE_X_MAX_Y_MAX_swigconstant", SURFACE_X_MAX_Y_MAX_swigconstant, METH_VARARGS, NULL},
	 { (char *)"SURFACE_X_MIN_Y_MAX_swigconstant", SURFACE_X_MIN_Y_MAX_swigconstant, METH_VARARGS, NULL},
	 { (char *)"NUM_VALUES_PER_RETRIEVED_TRACK_swigconstant", NUM_VALUES_PER_RETRIEVED_TRACK_swigconstant, METH_VARARGS, NULL},
	 { (char *)"NUM_VALUES_PER_RETRIEVED_SEGMENT_swigconstant", NUM_VALUES_PER_RETRIEVED_SEGMENT_swigconstant, METH_VARARGS, NULL},
	 { (char *)"cell_id", _wrap_cell_id, METH_VARARGS, (char *)"\n"
		"\n"
		"cell_id() -> int  \n"
		"\n"
		"Returns an auto-generated unique Cell ID.  \n"
		"\n"
		"This method is intended as a utility method for users writing OpenMOC input files. The\n"
		"method makes use of a static Cell ID which is incremented each time the method is called\n"
		"to enable unique generation of monotonically increasing IDs. The method's first ID begins\n"
		"at 10000. Hence, user-defined Cell IDs greater than or equal to 10000 are prohibited.  \n"
		"\n"
		""},
	 { (char *)"reset_cell_id", _wrap_reset_cell_id, METH_VARARGS, (char *)"\n"
		"\n"
		"reset_cell_id()  \n"
		"\n"
		"Resets the auto-generated unique Cell ID counter to 10000.  \n"
		"\n"
		""},
	 { (char *)"maximize_cell_id", (PyCFunction) _wrap_maximize_cell_id, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"maximize_cell_id(int cell_id)  \n"
		"\n"
		"Maximize the auto-generated unique Cell ID counter.  \n"
		"\n"
		"This method updates the auto-generated unique Cell ID counter if the input parameter is\n"
		"greater than the present value. This is useful for the OpenMC compatibility module to\n"
		"ensure that the auto-generated Cell IDs do not collide with those created in OpenMC.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* cell_id :  \n"
		"    the id assigned to the auto-generated counter  \n"
		"\n"
		""},
	 { (char *)"surface_halfspace__surface_set", _wrap_surface_halfspace__surface_set, METH_VARARGS, NULL},
	 { (char *)"surface_halfspace__surface_get", _wrap_surface_halfspace__surface_get, METH_VARARGS, NULL},
	 { (char *)"surface_halfspace__halfspace_set", _wrap_surface_halfspace__halfspace_set, METH_VARARGS, NULL},
	 { (char *)"surface_halfspace__halfspace_get", _wrap_surface_halfspace__halfspace_get, METH_VARARGS, NULL},
	 { (char *)"new_surface_halfspace", _wrap_new_surface_halfspace, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"A surface_halfspace represents a surface pointer with associated halfspace.  \n"
		"\n"
		"Attributes\n"
		"----------\n"
		"* _surface : Surface *  \n"
		"    A pointer to the Surface object  \n"
		"\n"
		"* _halfspace : int  \n"
		"    The halfspace associated with this surface  \n"
		"\n"
		"C++ includes: Cell.h\n"
		"\n"
		""},
	 { (char *)"delete_surface_halfspace", _wrap_delete_surface_halfspace, METH_VARARGS, NULL},
	 { (char *)"surface_halfspace_swigregister", surface_halfspace_swigregister, METH_VARARGS, NULL},
	 { (char *)"MATERIAL_swigconstant", MATERIAL_swigconstant, METH_VARARGS, NULL},
	 { (char *)"FILL_swigconstant", FILL_swigconstant, METH_VARARGS, NULL},
	 { (char *)"UNFILLED_swigconstant", UNFILLED_swigconstant, METH_VARARGS, NULL},
	 { (char *)"new_Cell", (PyCFunction) _wrap_new_Cell, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"Cell(int id=0, const char *name=\"\")  \n"
		"\n"
		"Constructor sets the unique and user-specifed IDs for this Cell.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* id :  \n"
		"    the user-specified optional Cell ID  \n"
		"* name :  \n"
		"    the user-specified optional Cell name  \n"
		"\n"
		""},
	 { (char *)"delete_Cell", _wrap_delete_Cell, METH_VARARGS, (char *)"\n"
		"\n"
		"~Cell()  \n"
		"\n"
		"Destructor clears vector of Surface pointers bounding the Cell.  \n"
		"\n"
		""},
	 { (char *)"Cell_getUid", _wrap_Cell_getUid, METH_VARARGS, (char *)"\n"
		"\n"
		"getUid() const  -> int  \n"
		"\n"
		"Return the Cell's unique ID.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the Cell's unique ID  \n"
		"\n"
		""},
	 { (char *)"Cell_getId", _wrap_Cell_getId, METH_VARARGS, (char *)"\n"
		"\n"
		"getId() const  -> int  \n"
		"\n"
		"Return the Cell's user-specified ID.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the Cell's user-specified ID  \n"
		"\n"
		""},
	 { (char *)"Cell_getName", _wrap_Cell_getName, METH_VARARGS, (char *)"\n"
		"\n"
		"getName() const  -> char *  \n"
		"\n"
		"Return the user-defined name of the Cell.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the Cell name  \n"
		"\n"
		""},
	 { (char *)"Cell_getType", _wrap_Cell_getType, METH_VARARGS, (char *)"\n"
		"\n"
		"getType() const  -> cellType  \n"
		"\n"
		"Return the Cell type (FILL or MATERIAL).  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the Cell type  \n"
		"\n"
		""},
	 { (char *)"Cell_getFillMaterial", _wrap_Cell_getFillMaterial, METH_VARARGS, (char *)"\n"
		"\n"
		"getFillMaterial() -> Material *  \n"
		"\n"
		"Return a pointer to the Material filling this Cell.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the Material fill pointer  \n"
		"\n"
		""},
	 { (char *)"Cell_getFillUniverse", _wrap_Cell_getFillUniverse, METH_VARARGS, (char *)"\n"
		"\n"
		"getFillUniverse() -> Universe *  \n"
		"\n"
		"Return a pointer to the Material filling this Cell.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the Material fill pointer  \n"
		"\n"
		""},
	 { (char *)"Cell_getVolume", _wrap_Cell_getVolume, METH_VARARGS, (char *)"\n"
		"\n"
		"getVolume() -> double  \n"
		"\n"
		"Return the aggregate volume/area of all instances of this Cell.  \n"
		"\n"
		"The volume/area of the Cell is computed from track segments which overlap this Cell during\n"
		"track generation.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the volume/area of the Cell  \n"
		"\n"
		""},
	 { (char *)"Cell_getNumInstances", _wrap_Cell_getNumInstances, METH_VARARGS, (char *)"\n"
		"\n"
		"getNumInstances() -> int  \n"
		"\n"
		"Return the number of instances of this Cell in the Geometry.  \n"
		"\n"
		"The number of instances of this Cell in the Geometry is determined during track\n"
		"generation.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the number of cell instances  \n"
		"\n"
		""},
	 { (char *)"Cell_isRotated", _wrap_Cell_isRotated, METH_VARARGS, (char *)"\n"
		"\n"
		"isRotated() -> bool  \n"
		"\n"
		"Return a boolean indicating whether the Cell has been rotated.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"whether the Cell has been rotated  \n"
		"\n"
		""},
	 { (char *)"Cell_isTranslated", _wrap_Cell_isTranslated, METH_VARARGS, (char *)"\n"
		"\n"
		"isTranslated() -> bool  \n"
		"\n"
		"Return a boolean indicating whether the Cell has been translated.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"whether the Cell has been translated  \n"
		"\n"
		""},
	 { (char *)"Cell_getPhi", (PyCFunction) _wrap_Cell_getPhi, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"getPhi(std::string units=\"degrees\") -> double  \n"
		"\n"
		"Get the rotation angle about the x-axis in degrees.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* units :  \n"
		"    the angular units in \"radians\" or \"degrees\" (default)  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the rotation angle about the x-axis  \n"
		"\n"
		""},
	 { (char *)"Cell_getTheta", (PyCFunction) _wrap_Cell_getTheta, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"getTheta(std::string units=\"degrees\") -> double  \n"
		"\n"
		"Get the rotation angle about the y-axis in degrees.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* units :  \n"
		"    the angular units in \"radians\" or \"degrees\" (default)  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the rotation angle about the y-axis  \n"
		"\n"
		""},
	 { (char *)"Cell_getPsi", (PyCFunction) _wrap_Cell_getPsi, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"getPsi(std::string units=\"degrees\") -> double  \n"
		"\n"
		"Get the rotation angle about the z-axis in degrees.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* units :  \n"
		"    the angular units in \"radians\" or \"degrees\" (default)  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the rotation angle about the z-axis  \n"
		"\n"
		""},
	 { (char *)"Cell_getRotationMatrix", _wrap_Cell_getRotationMatrix, METH_VARARGS, (char *)"\n"
		"\n"
		"getRotationMatrix() -> double *  \n"
		"\n"
		"Return pointer to array for the rotation matrix.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"a pointer to an array of rotation angles  \n"
		"\n"
		""},
	 { (char *)"Cell_getTranslation", _wrap_Cell_getTranslation, METH_VARARGS, (char *)"\n"
		"\n"
		"getTranslation() -> double *  \n"
		"\n"
		"Return pointer to array for the translations along x, y and z.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"a pointer to an array of translations  \n"
		"\n"
		""},
	 { (char *)"Cell_retrieveRotation", (PyCFunction) _wrap_Cell_retrieveRotation, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"retrieveRotation(double *rotations, int num_axes, std::string units=\"degrees\")  \n"
		"\n"
		"Fills an array with the rotation angles for x, y and z.  \n"
		"\n"
		"This class method is intended to be called by the OpenMOC Python OpenMC compatiblity\n"
		"module. Although this method appears to require two arguments, in reality it only requires\n"
		"one due to SWIG and would be called from within Python as follows:  \n"
		"\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* rotation :  \n"
		"    an array of rotation angles of length 3 for x, y and z  \n"
		"* num_axes :  \n"
		"    the number of axes (this must always be 3)  \n"
		"* units :  \n"
		"    the angular units in \"radians\" or \"degrees\" (default)  \n"
		"\n"
		""},
	 { (char *)"Cell_retrieveTranslation", (PyCFunction) _wrap_Cell_retrieveTranslation, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"retrieveTranslation(double *translations, int num_axes)  \n"
		"\n"
		"Fills an array with the translations along x, y and z.  \n"
		"\n"
		"This class method is intended to be called by the OpenMOC Python OpenMC compatiblity\n"
		"module. Although this method appears to require two arguments, in reality it only requires\n"
		"one due to SWIG and would be called from within Python as follows:  \n"
		"\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* translation :  \n"
		"    an array of translations of length 3 for x, y and z  \n"
		"* num_axes :  \n"
		"    the number of axes (this must always be 3)  \n"
		"\n"
		""},
	 { (char *)"Cell_getNumRings", _wrap_Cell_getNumRings, METH_VARARGS, (char *)"\n"
		"\n"
		"getNumRings() -> int  \n"
		"\n"
		"Return the number of rings in the Cell.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the number of rings  \n"
		"\n"
		""},
	 { (char *)"Cell_getNumSectors", _wrap_Cell_getNumSectors, METH_VARARGS, (char *)"\n"
		"\n"
		"getNumSectors() -> int  \n"
		"\n"
		"Return the number of sectors in the Cell.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the number of sectors  \n"
		"\n"
		""},
	 { (char *)"Cell_getMinX", _wrap_Cell_getMinX, METH_VARARGS, (char *)"\n"
		"\n"
		"getMinX() -> double  \n"
		"\n"
		"Return the minimum reachable x-coordinate in the Cell.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the minimum x-coordinate  \n"
		"\n"
		""},
	 { (char *)"Cell_getMaxX", _wrap_Cell_getMaxX, METH_VARARGS, (char *)"\n"
		"\n"
		"getMaxX() -> double  \n"
		"\n"
		"Return the maximum reachable x-coordinate in the Cell.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the maximum x-coordinate  \n"
		"\n"
		""},
	 { (char *)"Cell_getMinY", _wrap_Cell_getMinY, METH_VARARGS, (char *)"\n"
		"\n"
		"getMinY() -> double  \n"
		"\n"
		"Return the minimum reachable y-coordinate in the Cell.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the minimum y-coordinate  \n"
		"\n"
		""},
	 { (char *)"Cell_getMaxY", _wrap_Cell_getMaxY, METH_VARARGS, (char *)"\n"
		"\n"
		"getMaxY() -> double  \n"
		"\n"
		"Return the maximum reachable y-coordinate in the Cell.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the maximum y-coordinate  \n"
		"\n"
		""},
	 { (char *)"Cell_getMinZ", _wrap_Cell_getMinZ, METH_VARARGS, (char *)"\n"
		"\n"
		"getMinZ() -> double  \n"
		"\n"
		"Return the minimum reachable z-coordinate in the Cell.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the minimum z-coordinate  \n"
		"\n"
		""},
	 { (char *)"Cell_getMaxZ", _wrap_Cell_getMaxZ, METH_VARARGS, (char *)"\n"
		"\n"
		"getMaxZ() -> double  \n"
		"\n"
		"Return the maximum reachable z-coordinate in the Cell.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the maximum z-coordinate  \n"
		"\n"
		""},
	 { (char *)"Cell_getMinXBoundaryType", _wrap_Cell_getMinXBoundaryType, METH_VARARGS, (char *)"\n"
		"\n"
		"getMinXBoundaryType() -> boundaryType  \n"
		"\n"
		"Return the boundary condition (REFLECTIVE, VACUUM, or INTERFACE) at the minimum reachable\n"
		"x-coordinate in the Cell.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the boundary condition at the minimum x-coordinate  \n"
		"\n"
		""},
	 { (char *)"Cell_getMaxXBoundaryType", _wrap_Cell_getMaxXBoundaryType, METH_VARARGS, (char *)"\n"
		"\n"
		"getMaxXBoundaryType() -> boundaryType  \n"
		"\n"
		"Return the boundary condition (REFLECTIVE, VACUUM, or INTERFACE) at the maximum reachable\n"
		"x-coordinate in the Cell.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the boundary condition at the maximum x-coordinate  \n"
		"\n"
		""},
	 { (char *)"Cell_getMinYBoundaryType", _wrap_Cell_getMinYBoundaryType, METH_VARARGS, (char *)"\n"
		"\n"
		"getMinYBoundaryType() -> boundaryType  \n"
		"\n"
		"Return the boundary condition (REFLECTIVE, VACUUM, or INTERFACE) at the minimum reachable\n"
		"y-coordinate in the Cell.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the boundary condition at the minimum y-coordinate  \n"
		"\n"
		""},
	 { (char *)"Cell_getMaxYBoundaryType", _wrap_Cell_getMaxYBoundaryType, METH_VARARGS, (char *)"\n"
		"\n"
		"getMaxYBoundaryType() -> boundaryType  \n"
		"\n"
		"Return the boundary condition (REFLECTIVE, VACUUM, or INTERFACE) at the maximum reachable\n"
		"y-coordinate in the Cell.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the boundary condition at the maximum y-coordinate  \n"
		"\n"
		""},
	 { (char *)"Cell_getNumSurfaces", _wrap_Cell_getNumSurfaces, METH_VARARGS, (char *)"\n"
		"\n"
		"getNumSurfaces() const  -> int  \n"
		"\n"
		"Return the number of Surfaces in the Cell.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the number of Surfaces  \n"
		"\n"
		""},
	 { (char *)"Cell_getSurfaces", _wrap_Cell_getSurfaces, METH_VARARGS, (char *)"\n"
		"\n"
		"getSurfaces() const  -> std::map< int, surface_halfspace * >  \n"
		"\n"
		"Return the std::map of Surface pointers and halfspaces (+/-1) for all surfaces bounding\n"
		"the Cell.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"std::map of Surface pointers and halfspaces  \n"
		"\n"
		""},
	 { (char *)"Cell_getNeighbors", _wrap_Cell_getNeighbors, METH_VARARGS, (char *)"\n"
		"\n"
		"getNeighbors() const  -> std::vector< Cell * >  \n"
		"\n"
		"Return the std::vector of neighbor Cells to this Cell.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"std::vector of neighbor Cell pointers  \n"
		"\n"
		""},
	 { (char *)"Cell_hasParent", _wrap_Cell_hasParent, METH_VARARGS, (char *)"\n"
		"\n"
		"hasParent() -> bool  \n"
		"\n"
		"Return true if the Cell has a parent and false otherwise.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"whether the Cell has a parent Cell  \n"
		"\n"
		""},
	 { (char *)"Cell_getParent", _wrap_Cell_getParent, METH_VARARGS, (char *)"\n"
		"\n"
		"getParent() -> Cell *  \n"
		"\n"
		"Return this Cell's parent Cell.  \n"
		"\n"
		"If no parent Cell has been assigned from Cell cloning, then NULL is returned.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"a pointer to the parent Cell  \n"
		"\n"
		""},
	 { (char *)"Cell_getOldestAncestor", _wrap_Cell_getOldestAncestor, METH_VARARGS, (char *)"\n"
		"\n"
		"getOldestAncestor() -> Cell *  \n"
		"\n"
		"Get the oldest ancestor Cell for this Cell.  \n"
		"\n"
		"This method traverses the linked list of parent Cells to find the one at the root node.\n"
		"The oldest ancestor Cell is likely the one created by the user at runtime, while\n"
		"intermediate ancestors were created during radial and angular spatial discretization.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"this Cell's oldest ancestor Cell  \n"
		"\n"
		""},
	 { (char *)"Cell_getAllCells", _wrap_Cell_getAllCells, METH_VARARGS, (char *)"\n"
		"\n"
		"getAllCells() -> std::map< int, Cell * >  \n"
		"\n"
		"Returns the std::map of Cell IDs and Cell pointers within any nested Universes filling\n"
		"this Cell.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"std::map of Cell IDs and pointers  \n"
		"\n"
		""},
	 { (char *)"Cell_getAllUniverses", _wrap_Cell_getAllUniverses, METH_VARARGS, (char *)"\n"
		"\n"
		"getAllUniverses() -> std::map< int, Universe * >  \n"
		"\n"
		"Returns the std::map of all nested Universe IDs and Universe pointers filling this Cell.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"std::map of Universe IDs and pointers  \n"
		"\n"
		""},
	 { (char *)"Cell_setName", (PyCFunction) _wrap_Cell_setName, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"setName(const char *name)  \n"
		"\n"
		"Sets the name of the Cell.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* name :  \n"
		"    the Cell name string  \n"
		"\n"
		""},
	 { (char *)"Cell_setFill", _wrap_Cell_setFill, METH_VARARGS, (char *)"\n"
		"\n"
		"setFill(Material *fill)  \n"
		"setFill(Universe *fill)  \n"
		"\n"
		"Overloaded function\n"
		"-------------------\n"
		"* setFill(Material *fill)  \n"
		"\n"
		"    Sets the Material filling this Cell.  \n"
		"\n"
		"    Parameters:  \n"
		"    * fill :  \n"
		"        the Material filling this Cell  \n"
		"\n"
		"* setFill(Universe *fill)  \n"
		"\n"
		"    Sets the Universe filling this Cell.  \n"
		"\n"
		"    Parameters:  \n"
		"    * fill :  \n"
		"        the Universe filling this Cell  \n"
		"\n"
		""},
	 { (char *)"Cell_setVolume", (PyCFunction) _wrap_Cell_setVolume, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"setVolume(double volume)  \n"
		"\n"
		"Set the volume/area of the Cell.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* volume :  \n"
		"    the volume/area of the Cell  \n"
		"\n"
		""},
	 { (char *)"Cell_incrementVolume", (PyCFunction) _wrap_Cell_incrementVolume, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"incrementVolume(double volume)  \n"
		"\n"
		"Increment the volume/area of the Cell by some amount.  \n"
		"\n"
		"This routine is called by the TrackGenerator during track generation and segmentation.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* volume :  \n"
		"    the amount to increment the current volume by  \n"
		"\n"
		""},
	 { (char *)"Cell_setNumInstances", (PyCFunction) _wrap_Cell_setNumInstances, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"setNumInstances(int num_instances)  \n"
		"\n"
		"Set the number of instances of this Cell.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* num_instances :  \n"
		"    the number of instances of this Cell in the Geometry  \n"
		"\n"
		""},
	 { (char *)"Cell_incrementNumInstances", _wrap_Cell_incrementNumInstances, METH_VARARGS, (char *)"\n"
		"\n"
		"incrementNumInstances()  \n"
		"\n"
		"Increment the number of instances of this Cell.  \n"
		"\n"
		"This routine is called by the TrackGenerator during track generation and segmentation.  \n"
		"\n"
		""},
	 { (char *)"Cell_setRotation", (PyCFunction) _wrap_Cell_setRotation, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"setRotation(double *rotation, int num_axes, std::string units=\"degrees\")  \n"
		"\n"
		"Set the Cell's rotation angles about the x, y and z axes.  \n"
		"\n"
		"This method is a helper function to allow OpenMOC users to assign the Cell's rotation\n"
		"angles in Python. A user must initialize a length 3 NumPy array as input to this function.\n"
		"This function then stores the data values in the NumPy array in the Cell's rotation array.\n"
		"An example of how this function might be called in Python is as follows:  \n"
		"\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* rotation :  \n"
		"    the array of rotation angles  \n"
		"* num_axes :  \n"
		"    the number of axes (this must always be 3)  \n"
		"* units :  \n"
		"    the angular units in \"radians\" or \"degrees\" (default)  \n"
		"\n"
		""},
	 { (char *)"Cell_setTranslation", (PyCFunction) _wrap_Cell_setTranslation, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"setTranslation(double *translation, int num_axes)  \n"
		"\n"
		"Set the Cell's translation along the x, y and z axes.  \n"
		"\n"
		"This method is a helper function to allow OpenMOC users to assign the Cell's translations\n"
		"in Python. A user must initialize a length 3 NumPy array as input to this function. This\n"
		"function then stores the data values in the NumPy array in the Cell's translation array.\n"
		"An example of how this function might be called in Python is as follows:  \n"
		"\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* translation :  \n"
		"    the array of translations  \n"
		"* num_axes :  \n"
		"    the number of axes (this must always be 3)  \n"
		"\n"
		""},
	 { (char *)"Cell_setNumRings", (PyCFunction) _wrap_Cell_setNumRings, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"setNumRings(int num_rings)  \n"
		"\n"
		"Set the Cell's number of rings.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* num_rings :  \n"
		"    the number of rings in this Cell  \n"
		"\n"
		""},
	 { (char *)"Cell_setNumSectors", (PyCFunction) _wrap_Cell_setNumSectors, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"setNumSectors(int num_sectors)  \n"
		"\n"
		"Set the Cell's number of sectors.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* num_sectors :  \n"
		"    the number of sectors in this Cell  \n"
		"\n"
		""},
	 { (char *)"Cell_setParent", (PyCFunction) _wrap_Cell_setParent, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"setParent(Cell *parent)  \n"
		"\n"
		"Assign a parent Cell to this Cell.  \n"
		"\n"
		"This is used by Cell cloning when applied for radial and angular discretization.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* parent :  \n"
		"    a pointer to the parent Cell  \n"
		"\n"
		""},
	 { (char *)"Cell_addSurface", (PyCFunction) _wrap_Cell_addSurface, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"addSurface(int halfspace, Surface *surface)  \n"
		"\n"
		"Insert a Surface into this Cell's container of bounding Surfaces.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* halfspace :  \n"
		"    the Surface halfspace (+/-1)  \n"
		"* surface :  \n"
		"    a pointer to the Surface  \n"
		"\n"
		""},
	 { (char *)"Cell_removeSurface", (PyCFunction) _wrap_Cell_removeSurface, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"removeSurface(Surface *surface)  \n"
		"\n"
		"Removes a Surface from this Cell's container of bounding Surfaces.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* surface :  \n"
		"    a pointer to the Surface to remove  \n"
		"\n"
		""},
	 { (char *)"Cell_addNeighborCell", (PyCFunction) _wrap_Cell_addNeighborCell, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"addNeighborCell(Cell *cell)  \n"
		"\n"
		"Add a neighboring Cell to this Cell's collection of neighbors.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* cell :  \n"
		"    a pointer to the neighboring Cell  \n"
		"\n"
		""},
	 { (char *)"Cell_isFissionable", _wrap_Cell_isFissionable, METH_VARARGS, (char *)"\n"
		"\n"
		"isFissionable() -> bool  \n"
		"\n"
		"Returns true if this Cell is filled with a fissionable Material.  \n"
		"\n"
		"If the Cell is filled by a Material, this method will simply query the filling Material.\n"
		"If the Cell is filled by a Universe, this method will consider any Materials filling those\n"
		"Cells contained by the filling Universe. This method should not be called prior to the\n"
		"calling of the Geometry::computeFissionability() method.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"true if contains a fissionable Material  \n"
		"\n"
		""},
	 { (char *)"Cell_containsPoint", (PyCFunction) _wrap_Cell_containsPoint, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"containsPoint(Point *point) -> bool  \n"
		"\n"
		"Determines whether a Point is contained inside a Cell.  \n"
		"\n"
		"Queries each Surface inside the Cell to determine if the Point is on the same side of the\n"
		"Surface. This point is only inside the Cell if it is on the same side of every Surface in\n"
		"the Cell.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* point :  \n"
		"    a pointer to a Point  \n"
		"\n"
		""},
	 { (char *)"Cell_containsCoords", (PyCFunction) _wrap_Cell_containsCoords, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"containsCoords(LocalCoords *coords) -> bool  \n"
		"\n"
		"Determines whether a Point is contained inside a Cell.  \n"
		"\n"
		"Queries each Surface inside the Cell to determine if the Point is on the same side of the\n"
		"Surface. This Point is only inside the Cell if it is on the same side of every Surface in\n"
		"the Cell.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* coords :  \n"
		"    a pointer to a localcoord  \n"
		"\n"
		""},
	 { (char *)"Cell_minSurfaceDist", (PyCFunction) _wrap_Cell_minSurfaceDist, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"minSurfaceDist(LocalCoords *coords) -> double  \n"
		"\n"
		"Computes the minimum distance to a Surface from a point with a given trajectory at a\n"
		"certain angle stored in a LocalCoords object.  \n"
		"\n"
		"If the trajectory will not intersect any of the Surfaces in the Cell returns INFINITY.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* coords :  \n"
		"    a pointer to a localcoords  \n"
		"\n"
		""},
	 { (char *)"Cell_clone", _wrap_Cell_clone, METH_VARARGS, (char *)"\n"
		"\n"
		"clone() -> Cell *  \n"
		"\n"
		"Create a duplicate of the Cell.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"a pointer to the clone  \n"
		"\n"
		""},
	 { (char *)"Cell_subdivideCell", (PyCFunction) _wrap_Cell_subdivideCell, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"subdivideCell(double max_radius)  \n"
		"\n"
		"Subdivides a Cell into rings and sectors aligned with the z-axis.  \n"
		"\n"
		"This method uses the Cell's clone method to produce a vector of this Cell's subdivided\n"
		"ring and sector Cells.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* max_radius :  \n"
		"    the maximum allowable radius used in the subdivisions  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"a vector of Cell pointers to the new subdivided Cells  \n"
		"\n"
		"A container of all Cell clones created for rings and sectors  \n"
		"\n"
		""},
	 { (char *)"Cell_buildNeighbors", _wrap_Cell_buildNeighbors, METH_VARARGS, (char *)"\n"
		"\n"
		"buildNeighbors()  \n"
		"\n"
		"Build a collection of neighboring Cells for optimized ray tracing.  \n"
		"\n"
		""},
	 { (char *)"Cell_toString", _wrap_Cell_toString, METH_VARARGS, (char *)"\n"
		"\n"
		"toString() -> std::string  \n"
		"\n"
		"Convert this Cell's attributes to a string format.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"a character array of this Cell's attributes  \n"
		"\n"
		"Add string data for the Surfaces in this Cell  \n"
		"\n"
		""},
	 { (char *)"Cell_printString", _wrap_Cell_printString, METH_VARARGS, (char *)"\n"
		"\n"
		"printString()  \n"
		"\n"
		"Prints a string representation of all of the Cell's attributes to the console.  \n"
		"\n"
		""},
	 { (char *)"Cell_swigregister", Cell_swigregister, METH_VARARGS, NULL},
	 { (char *)"fsr_data__fsr_id_set", _wrap_fsr_data__fsr_id_set, METH_VARARGS, NULL},
	 { (char *)"fsr_data__fsr_id_get", _wrap_fsr_data__fsr_id_get, METH_VARARGS, NULL},
	 { (char *)"fsr_data__cmfd_cell_set", _wrap_fsr_data__cmfd_cell_set, METH_VARARGS, NULL},
	 { (char *)"fsr_data__cmfd_cell_get", _wrap_fsr_data__cmfd_cell_get, METH_VARARGS, NULL},
	 { (char *)"fsr_data__mat_id_set", _wrap_fsr_data__mat_id_set, METH_VARARGS, NULL},
	 { (char *)"fsr_data__mat_id_get", _wrap_fsr_data__mat_id_get, METH_VARARGS, NULL},
	 { (char *)"fsr_data__point_set", _wrap_fsr_data__point_set, METH_VARARGS, NULL},
	 { (char *)"fsr_data__point_get", _wrap_fsr_data__point_get, METH_VARARGS, NULL},
	 { (char *)"fsr_data__centroid_set", _wrap_fsr_data__centroid_set, METH_VARARGS, NULL},
	 { (char *)"fsr_data__centroid_get", _wrap_fsr_data__centroid_get, METH_VARARGS, NULL},
	 { (char *)"new_fsr_data", _wrap_new_fsr_data, METH_VARARGS, (char *)"\n"
		"\n"
		"fsr_data()  \n"
		"\n"
		"Constructor for FSR data initializes centroids and points to NULL  \n"
		"\n"
		""},
	 { (char *)"delete_fsr_data", _wrap_delete_fsr_data, METH_VARARGS, (char *)"\n"
		"\n"
		"~fsr_data()  \n"
		"\n"
		"Destructor for fsr_data  \n"
		"\n"
		""},
	 { (char *)"fsr_data_swigregister", fsr_data_swigregister, METH_VARARGS, NULL},
	 { (char *)"reset_auto_ids", _wrap_reset_auto_ids, METH_VARARGS, (char *)"\n"
		"\n"
		"reset_auto_ids()  \n"
		"\n"
		"Resets the auto-generated unique IDs for Materials, Surfaces, Cells and Universes/Lattices\n"
		"to 10000.  \n"
		"\n"
		""},
	 { (char *)"new_Geometry", _wrap_new_Geometry, METH_VARARGS, (char *)"\n"
		"\n"
		"Geometry()  \n"
		"\n"
		"Constructor initializes an empty Geometry.  \n"
		"\n"
		""},
	 { (char *)"delete_Geometry", _wrap_delete_Geometry, METH_VARARGS, (char *)"\n"
		"\n"
		"~Geometry()  \n"
		"\n"
		"Destructor clears FSR to Cells and Materials maps.  \n"
		"\n"
		""},
	 { (char *)"Geometry_getWidthX", _wrap_Geometry_getWidthX, METH_VARARGS, (char *)"\n"
		"\n"
		"getWidthX() -> double  \n"
		"\n"
		"Returns the total width in the x-direction of the Geometry in cm.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the total width of the Geometry in the x-direction (cm)  \n"
		"\n"
		""},
	 { (char *)"Geometry_getWidthY", _wrap_Geometry_getWidthY, METH_VARARGS, (char *)"\n"
		"\n"
		"getWidthY() -> double  \n"
		"\n"
		"Returns the total width in the y-direction of the Geometry in cm.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the total width of the Geometry in the y-direction (cm)  \n"
		"\n"
		""},
	 { (char *)"Geometry_getWidthZ", _wrap_Geometry_getWidthZ, METH_VARARGS, (char *)"\n"
		"\n"
		"getWidthZ() -> double  \n"
		"\n"
		"Returns the total width in the z-direction of the Geometry in cm.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the total width of the Geometry in the z-direction (cm)  \n"
		"\n"
		""},
	 { (char *)"Geometry_getMinX", _wrap_Geometry_getMinX, METH_VARARGS, (char *)"\n"
		"\n"
		"getMinX() -> double  \n"
		"\n"
		"Return the minimum x-coordinate contained by the Geometry.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the minimum x-coordinate (cm)  \n"
		"\n"
		""},
	 { (char *)"Geometry_getMaxX", _wrap_Geometry_getMaxX, METH_VARARGS, (char *)"\n"
		"\n"
		"getMaxX() -> double  \n"
		"\n"
		"Return the maximum x-coordinate contained by the Geometry.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the maximum x-coordinate (cm)  \n"
		"\n"
		""},
	 { (char *)"Geometry_getMinY", _wrap_Geometry_getMinY, METH_VARARGS, (char *)"\n"
		"\n"
		"getMinY() -> double  \n"
		"\n"
		"Return the minimum y-coordinate contained by the Geometry.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the minimum y-coordinate (cm)  \n"
		"\n"
		""},
	 { (char *)"Geometry_getMaxY", _wrap_Geometry_getMaxY, METH_VARARGS, (char *)"\n"
		"\n"
		"getMaxY() -> double  \n"
		"\n"
		"Return the maximum y-coordinate contained by the Geometry.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the maximum y-coordinate (cm)  \n"
		"\n"
		""},
	 { (char *)"Geometry_getMinZ", _wrap_Geometry_getMinZ, METH_VARARGS, (char *)"\n"
		"\n"
		"getMinZ() -> double  \n"
		"\n"
		"Return the minimum z-coordinate contained by the Geometry.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the minimum z-coordinate (cm)  \n"
		"\n"
		""},
	 { (char *)"Geometry_getMaxZ", _wrap_Geometry_getMaxZ, METH_VARARGS, (char *)"\n"
		"\n"
		"getMaxZ() -> double  \n"
		"\n"
		"Return the maximum z-coordinate contained by the Geometry.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the maximum z-coordinate (cm)  \n"
		"\n"
		""},
	 { (char *)"Geometry_getMinXBoundaryType", _wrap_Geometry_getMinXBoundaryType, METH_VARARGS, (char *)"\n"
		"\n"
		"getMinXBoundaryType() -> boundaryType  \n"
		"\n"
		"Returns the boundary conditions (REFLECTIVE or VACUUM) at the minimum x-coordinate in the\n"
		"Geometry.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the boundary conditions for the minimum x-coordinate in the Geometry  \n"
		"\n"
		""},
	 { (char *)"Geometry_getMaxXBoundaryType", _wrap_Geometry_getMaxXBoundaryType, METH_VARARGS, (char *)"\n"
		"\n"
		"getMaxXBoundaryType() -> boundaryType  \n"
		"\n"
		"Returns the boundary conditions (REFLECTIVE or VACUUM) at the maximum x-coordinate in the\n"
		"Geometry.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the boundary conditions for the maximum z-coordinate in the Geometry  \n"
		"\n"
		""},
	 { (char *)"Geometry_getMinYBoundaryType", _wrap_Geometry_getMinYBoundaryType, METH_VARARGS, (char *)"\n"
		"\n"
		"getMinYBoundaryType() -> boundaryType  \n"
		"\n"
		"Returns the boundary conditions (REFLECTIVE or VACUUM) at the minimum y-coordinate in the\n"
		"Geometry.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the boundary conditions for the minimum y-coordinate in the Geometry  \n"
		"\n"
		""},
	 { (char *)"Geometry_getMaxYBoundaryType", _wrap_Geometry_getMaxYBoundaryType, METH_VARARGS, (char *)"\n"
		"\n"
		"getMaxYBoundaryType() -> boundaryType  \n"
		"\n"
		"Returns the boundary conditions (REFLECTIVE or VACUUM) at the maximum y-coordinate in the\n"
		"Geometry.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the boundary conditions for the maximum y-coordinate in the Geometry  \n"
		"\n"
		""},
	 { (char *)"Geometry_getRootUniverse", _wrap_Geometry_getRootUniverse, METH_VARARGS, (char *)"\n"
		"\n"
		"getRootUniverse() -> Universe *  \n"
		"\n"
		"Returns the Universe at the root node in the CSG tree.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the root Universe  \n"
		"\n"
		""},
	 { (char *)"Geometry_getNumFSRs", _wrap_Geometry_getNumFSRs, METH_VARARGS, (char *)"\n"
		"\n"
		"getNumFSRs() -> int  \n"
		"\n"
		"Returns the number of flat source regions in the Geometry.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"number of FSRs  \n"
		"\n"
		""},
	 { (char *)"Geometry_getNumEnergyGroups", _wrap_Geometry_getNumEnergyGroups, METH_VARARGS, (char *)"\n"
		"\n"
		"getNumEnergyGroups() -> int  \n"
		"\n"
		"Returns the number of energy groups for each Material's nuclear data.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the number of energy groups  \n"
		"\n"
		""},
	 { (char *)"Geometry_getNumMaterials", _wrap_Geometry_getNumMaterials, METH_VARARGS, (char *)"\n"
		"\n"
		"getNumMaterials() -> int  \n"
		"\n"
		"Returns the number of Materials in the Geometry.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the number of Materials  \n"
		"\n"
		""},
	 { (char *)"Geometry_getNumCells", _wrap_Geometry_getNumCells, METH_VARARGS, (char *)"\n"
		"\n"
		"getNumCells() -> int  \n"
		"\n"
		"Returns the number of Cells in the Geometry.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the number of Cells  \n"
		"\n"
		""},
	 { (char *)"Geometry_getAllMaterials", _wrap_Geometry_getAllMaterials, METH_VARARGS, (char *)"\n"
		"\n"
		"getAllMaterials() -> std::map< int, Material * >  \n"
		"\n"
		"Return a std::map container of Material IDs (keys) with Materials pointers (values).  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"a std::map of Materials indexed by Material ID in the geometry  \n"
		"\n"
		""},
	 { (char *)"Geometry_getAllSurfaces", _wrap_Geometry_getAllSurfaces, METH_VARARGS, (char *)"\n"
		"\n"
		"getAllSurfaces() -> std::map< int, Surface * >  \n"
		"\n"
		"Return a std::map container of Surface IDs (keys) with Surfaces pointers (values).  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"a std::map of Surfaces indexed by Surface ID in the geometry  \n"
		"\n"
		""},
	 { (char *)"Geometry_getAllCells", _wrap_Geometry_getAllCells, METH_VARARGS, (char *)"\n"
		"\n"
		"getAllCells() -> std::map< int, Cell * >  \n"
		"\n"
		"Return a std::map container of Cell IDs (keys) with Cells pointers (values).  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"a std::map of Cells indexed by Cell ID in the geometry  \n"
		"\n"
		""},
	 { (char *)"Geometry_getAllMaterialCells", _wrap_Geometry_getAllMaterialCells, METH_VARARGS, (char *)"\n"
		"\n"
		"getAllMaterialCells() -> std::map< int, Cell * >  \n"
		"\n"
		"Return a std::map container of Cell IDs (keys) with Cells pointers (values).  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"a std::map of Cells indexed by Cell ID in the geometry  \n"
		"\n"
		""},
	 { (char *)"Geometry_getAllUniverses", _wrap_Geometry_getAllUniverses, METH_VARARGS, (char *)"\n"
		"\n"
		"getAllUniverses() -> std::map< int, Universe * >  \n"
		"\n"
		"Return a std::map container of Universe IDs (keys) with Unierses pointers (values).  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"a std::map of Universes indexed by Universe ID in the geometry  \n"
		"\n"
		""},
	 { (char *)"Geometry_setRootUniverse", (PyCFunction) _wrap_Geometry_setRootUniverse, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"setRootUniverse(Universe *root_universe)  \n"
		"\n"
		"Sets the root Universe for the CSG tree.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* root_universe :  \n"
		"    the root Universe of the CSG tree.  \n"
		"\n"
		""},
	 { (char *)"Geometry_getCmfd", _wrap_Geometry_getCmfd, METH_VARARGS, (char *)"\n"
		"\n"
		"getCmfd() -> Cmfd *  \n"
		"\n"
		"Returns a pointer to the CMFD object.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"A pointer to the CMFD object  \n"
		"\n"
		""},
	 { (char *)"Geometry_getFSRsToKeys", _wrap_Geometry_getFSRsToKeys, METH_VARARGS, (char *)"\n"
		"\n"
		"getFSRsToKeys() -> std::vector< std::string > &  \n"
		"\n"
		"Returns the vector that maps FSR IDs to FSR key hashes.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"_FSR_keys_map map of FSR keys to FSR IDs  \n"
		"\n"
		""},
	 { (char *)"Geometry_getFSRId", (PyCFunction) _wrap_Geometry_getFSRId, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"getFSRId(LocalCoords *coords) -> int  \n"
		"\n"
		"Return the ID of the flat source region that a given LocalCoords object resides within.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* coords :  \n"
		"    a LocalCoords object pointer  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the FSR ID for a given LocalCoords object  \n"
		"\n"
		""},
	 { (char *)"Geometry_getFSRPoint", (PyCFunction) _wrap_Geometry_getFSRPoint, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"getFSRPoint(int fsr_id) -> Point *  \n"
		"\n"
		"Return the characteristic point for a given FSR ID.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* fsr_id :  \n"
		"    the FSR ID  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the FSR's characteristic point  \n"
		"\n"
		""},
	 { (char *)"Geometry_getFSRCentroid", (PyCFunction) _wrap_Geometry_getFSRCentroid, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"getFSRCentroid(int fsr_id) -> Point *  \n"
		"\n"
		"Return the centroid for a given FSR ID.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* fsr_id :  \n"
		"    the FSR ID  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the FSR's centroid  \n"
		"\n"
		""},
	 { (char *)"Geometry_getFSRKey", (PyCFunction) _wrap_Geometry_getFSRKey, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"getFSRKey(LocalCoords *coords) -> std::string  \n"
		"\n"
		"Generate a string FSR \"key\" that identifies an FSR by its unique hierarchical\n"
		"lattice/universe/cell structure.  \n"
		"\n"
		"Since not all FSRs will reside on the absolute lowest universe level and Cells might\n"
		"overlap other cells, it is important to have a method for uniquely identifying FSRs. This\n"
		"method creates a unique FSR key by constructing a structured string that describes the\n"
		"hierarchy of lattices/universes/cells.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* coords :  \n"
		"    a LocalCoords object pointer  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the FSR key  \n"
		"\n"
		""},
	 { (char *)"Geometry_getFSRKeysMap", _wrap_Geometry_getFSRKeysMap, METH_VARARGS, (char *)"\n"
		"\n"
		"getFSRKeysMap() -> ParallelHashMap< std::string, fsr_data * > &  \n"
		"\n"
		"Returns a pointer to the map that maps FSR keys to FSR IDs.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"pointer to _FSR_keys_map map of FSR keys to FSR IDs  \n"
		"\n"
		""},
	 { (char *)"Geometry_matchFSRstoCells", _wrap_Geometry_matchFSRstoCells, METH_VARARGS, NULL},
	 { (char *)"Geometry_getMapFSRstoCells", _wrap_Geometry_getMapFSRstoCells, METH_VARARGS, NULL},
	 { (char *)"Geometry_setCmfd", (PyCFunction) _wrap_Geometry_setCmfd, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"setCmfd(Cmfd *cmfd)  \n"
		"\n"
		"Sets the pointer to a CMFD object used for acceleration.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* cmfd :  \n"
		"    a pointer to the CMFD object  \n"
		"\n"
		""},
	 { (char *)"Geometry_findCellContainingCoords", (PyCFunction) _wrap_Geometry_findCellContainingCoords, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"findCellContainingCoords(LocalCoords *coords) -> Cell *  \n"
		"\n"
		"Find the Cell that this LocalCoords object is in at the lowest level of the nested\n"
		"Universe hierarchy.  \n"
		"\n"
		"This method assumes that the LocalCoords has been initialized with coordinates and a\n"
		"Universe ID. The method will recursively find the Cell on the lowest level of the nested\n"
		"Universe hierarchy by building a linked list of LocalCoords from the LocalCoord passed in\n"
		"as an argument down to the lowest level Cell found. In the process it will set the\n"
		"coordinates at each level of the hierarchy for each LocalCoord in the linked list for the\n"
		"Lattice or Universe that it is in. If the LocalCoords is outside the bounds of the\n"
		"Geometry or on the boundaries this method will return NULL; otherwise it will return a\n"
		"pointer to the Cell that is found by the recursive Geometry::findCell(...) method.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* coords :  \n"
		"    pointer to a LocalCoords object  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"returns a pointer to a Cell if found, NULL if no Cell found  \n"
		"\n"
		""},
	 { (char *)"Geometry_findFSRMaterial", (PyCFunction) _wrap_Geometry_findFSRMaterial, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"findFSRMaterial(int fsr_id) -> Material *  \n"
		"\n"
		"Find the Material for a flat source region ID.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* fsr_id :  \n"
		"    a FSR id  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"a pointer to the Material that this FSR is in  \n"
		"\n"
		""},
	 { (char *)"Geometry_findFSRId", (PyCFunction) _wrap_Geometry_findFSRId, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"findFSRId(LocalCoords *coords) -> int  \n"
		"\n"
		"Find and return the ID of the flat source region that a given LocalCoords object resides\n"
		"within.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* coords :  \n"
		"    a LocalCoords object pointer  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the FSR ID for a given LocalCoords object  \n"
		"\n"
		""},
	 { (char *)"Geometry_findCellContainingFSR", (PyCFunction) _wrap_Geometry_findCellContainingFSR, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"findCellContainingFSR(int fsr_id) -> Cell *  \n"
		"\n"
		"Finds the Cell containing a given fsr ID.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* fsr_id :  \n"
		"    an FSR ID.  \n"
		"\n"
		""},
	 { (char *)"Geometry_subdivideCells", _wrap_Geometry_subdivideCells, METH_VARARGS, (char *)"\n"
		"\n"
		"subdivideCells()  \n"
		"\n"
		"Subdivides all Cells in the Geometry into rings and angular sectors aligned with the\n"
		"z-axis.  \n"
		"\n"
		"This method is called by the Geometry::initializeFSRs() method but may also be called by\n"
		"the user in Python if needed:  \n"
		"\n"
		"\n"
		"\n"
		""},
	 { (char *)"Geometry_initializeFSRs", (PyCFunction) _wrap_Geometry_initializeFSRs, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"initializeFSRs(bool neighbor_cells=false)  \n"
		"\n"
		"Compute the number of flat source regions in the Geometry and initialize CMFD.  \n"
		"\n"
		"This method is intended to be called by the user before initiating source iteration. This\n"
		"method first subdivides all Cells by calling the Geometry::subdivideCells() method. Then\n"
		"it initializes the CMFD object. neighbor_cells whether to use neighbor cell optimizations  \n"
		"\n"
		""},
	 { (char *)"Geometry_segmentize", (PyCFunction) _wrap_Geometry_segmentize, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"segmentize(Track *track)  \n"
		"\n"
		"This method performs ray tracing to create Track segments within each flat source region\n"
		"in the Geometry.  \n"
		"\n"
		"This method starts at the beginning of a Track and finds successive intersection points\n"
		"with FSRs as the Track crosses through the Geometry and creates segment structs and adds\n"
		"them to the Track.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* track :  \n"
		"    a pointer to a track to segmentize  \n"
		"\n"
		""},
	 { (char *)"Geometry_computeFissionability", (PyCFunction) _wrap_Geometry_computeFissionability, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"computeFissionability(Universe *univ=NULL)  \n"
		"\n"
		"Determines the fissionability of each Universe within this Geometry.  \n"
		"\n"
		"A Universe is determined fissionable if it contains a Cell filled by a Material with a\n"
		"non-zero fission cross-section. Note that this method recurses through all Universes at\n"
		"each level in the nested Universe hierarchy. Users should only call this method without a\n"
		"parameter (the default) from Python as follows to ensure that the recursion starts from\n"
		"the uppermost Universe level:  \n"
		"\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* univ :  \n"
		"    the Universe of interest (default is NULL)  \n"
		"\n"
		""},
	 { (char *)"Geometry_getSpatialDataOnGrid", (PyCFunction) _wrap_Geometry_getSpatialDataOnGrid, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"getSpatialDataOnGrid(std::vector< double > grid_x, std::vector< double > grid_y, double\n"
		"    zcoord, const char *domain_type=\"material\") -> std::vector< int >  \n"
		"\n"
		"Get the material, cell or FSR IDs on a 2D spatial grid.  \n"
		"\n"
		"This is a helper method for the openmoc.plotter module. This method may also be called by\n"
		"the user in Python if needed. A user must initialize NumPy arrays with the x and y grid\n"
		"coordinates input to this function. This function then fills a NumPy array with the domain\n"
		"IDs for each coordinate. An example of how this function might be called in Python is as\n"
		"follows:  \n"
		"\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* grid_x :  \n"
		"    a NumPy array or list of the x-coordinates  \n"
		"* num_x :  \n"
		"    the number of x-coordinates in the grid  \n"
		"* grid_y :  \n"
		"    a NumPy array or list of the y-coordinates  \n"
		"* num_y :  \n"
		"    the number of y-coordinates in the grid  \n"
		"* zcoord :  \n"
		"    the z-coordinate to use to find the domain IDs  \n"
		"* domain_type :  \n"
		"    the type of domain ('fsr', 'material', 'cell')  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"a NumPy array or list of the domain IDs  \n"
		"\n"
		""},
	 { (char *)"Geometry_toString", _wrap_Geometry_toString, METH_VARARGS, (char *)"\n"
		"\n"
		"toString() -> std::string  \n"
		"\n"
		"Converts this Geometry's attributes to a character array.  \n"
		"\n"
		"This method calls the toString() method for all Surfaces, Cells, Universes and Lattices\n"
		"contained by the Geometry. Since this routine provides the metadata used by the\n"
		"TrackGenerator to discriminate between geometries when exporting / importing binary track\n"
		"files.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"a character array of this Geometry's class attributes  \n"
		"\n"
		"Add string data for all Cells  \n"
		"\n"
		"Add string data for the Surfaces in this Cell  \n"
		"\n"
		"Add string data for all Universes  \n"
		"\n"
		""},
	 { (char *)"Geometry_printString", _wrap_Geometry_printString, METH_VARARGS, (char *)"\n"
		"\n"
		"printString()  \n"
		"\n"
		"Prints a string representation of all of the Geometry's attributes to the console.  \n"
		"\n"
		"This method calls the printString() method for all Materials, Surfaces, Cell, Universes\n"
		"and Lattices contained by the Geometry.  \n"
		"\n"
		""},
	 { (char *)"Geometry_initializeCmfd", _wrap_Geometry_initializeCmfd, METH_VARARGS, (char *)"\n"
		"\n"
		"initializeCmfd()  \n"
		"\n"
		"This is a method that initializes the CMFD Lattice and sets CMFD parameters.  \n"
		"\n"
		""},
	 { (char *)"Geometry_withinBounds", (PyCFunction) _wrap_Geometry_withinBounds, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"withinBounds(LocalCoords *coords) -> bool  \n"
		"\n"
		"Determins whether a point is within the bounding box of the geometry.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* coords :  \n"
		"    a populated LocalCoords linked list  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"boolean indicating whether the coords is within the geometry  \n"
		"\n"
		""},
	 { (char *)"Geometry_swigregister", Geometry_swigregister, METH_VARARGS, NULL},
	 { (char *)"UNIV_swigconstant", UNIV_swigconstant, METH_VARARGS, NULL},
	 { (char *)"LAT_swigconstant", LAT_swigconstant, METH_VARARGS, NULL},
	 { (char *)"new_LocalCoords", (PyCFunction) _wrap_new_LocalCoords, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"LocalCoords(double x, double y, double z)  \n"
		"\n"
		"Constructor sets the x and y coordinates.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* x :  \n"
		"    the x-coordinate  \n"
		"* y :  \n"
		"    the y-coordinate  \n"
		"\n"
		""},
	 { (char *)"delete_LocalCoords", _wrap_delete_LocalCoords, METH_VARARGS, (char *)"\n"
		"\n"
		"~LocalCoords()  \n"
		"\n"
		"Destructor.  \n"
		"\n"
		""},
	 { (char *)"LocalCoords_getType", _wrap_LocalCoords_getType, METH_VARARGS, (char *)"\n"
		"\n"
		"getType() -> coordType  \n"
		"\n"
		"Return the level (UNIV or LAT) of this LocalCoords.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the nested Universe level (UNIV or LAT)  \n"
		"\n"
		""},
	 { (char *)"LocalCoords_getUniverse", _wrap_LocalCoords_getUniverse, METH_VARARGS, (char *)"\n"
		"\n"
		"getUniverse() const  -> Universe *  \n"
		"\n"
		"Return the Universe within which this LocalCoords resides.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the Universe  \n"
		"\n"
		""},
	 { (char *)"LocalCoords_getCell", _wrap_LocalCoords_getCell, METH_VARARGS, (char *)"\n"
		"\n"
		"getCell() const  -> Cell *  \n"
		"\n"
		"Return the Cell within which this LocalCoords resides.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the Cell  \n"
		"\n"
		""},
	 { (char *)"LocalCoords_getLattice", _wrap_LocalCoords_getLattice, METH_VARARGS, (char *)"\n"
		"\n"
		"getLattice() const  -> Lattice *  \n"
		"\n"
		"Return the Lattice within which this LocalCoords resides.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the Lattice  \n"
		"\n"
		""},
	 { (char *)"LocalCoords_getLatticeX", _wrap_LocalCoords_getLatticeX, METH_VARARGS, (char *)"\n"
		"\n"
		"getLatticeX() const  -> int  \n"
		"\n"
		"Return the first index of the Lattice cell within which this LocalCoords resides.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the first Lattice cell index  \n"
		"\n"
		""},
	 { (char *)"LocalCoords_getLatticeY", _wrap_LocalCoords_getLatticeY, METH_VARARGS, (char *)"\n"
		"\n"
		"getLatticeY() const  -> int  \n"
		"\n"
		"Return the second index of the Lattice cell within which this LocalCoords resides.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the second Lattice cell index  \n"
		"\n"
		""},
	 { (char *)"LocalCoords_getLatticeZ", _wrap_LocalCoords_getLatticeZ, METH_VARARGS, (char *)"\n"
		"\n"
		"getLatticeZ() const  -> int  \n"
		"\n"
		"Return the third index of the Lattice cell within which this LocalCoords resides.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the third Lattice cell index  \n"
		"\n"
		""},
	 { (char *)"LocalCoords_getX", _wrap_LocalCoords_getX, METH_VARARGS, (char *)"\n"
		"\n"
		"getX() const  -> double  \n"
		"\n"
		"Returns the x-coordinate for this LocalCoords location.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the x-coordinate of this LocalCoords location  \n"
		"\n"
		""},
	 { (char *)"LocalCoords_getY", _wrap_LocalCoords_getY, METH_VARARGS, (char *)"\n"
		"\n"
		"getY() const  -> double  \n"
		"\n"
		"Returns the y-coordinate for this LocalCoords location.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the y-coordinate of this LocalCoords location  \n"
		"\n"
		""},
	 { (char *)"LocalCoords_getZ", _wrap_LocalCoords_getZ, METH_VARARGS, (char *)"\n"
		"\n"
		"getZ() const  -> double  \n"
		"\n"
		"Returns the z-coordinate for this LocalCoords location.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the z-coordinate of this LocalCoords location  \n"
		"\n"
		""},
	 { (char *)"LocalCoords_getPhi", _wrap_LocalCoords_getPhi, METH_VARARGS, (char *)"\n"
		"\n"
		"getPhi() const  -> double  \n"
		"\n"
		"Returns the direction angle in radians with respect to the x-axis.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the direction angle in radians  \n"
		"\n"
		""},
	 { (char *)"LocalCoords_getPoint", _wrap_LocalCoords_getPoint, METH_VARARGS, (char *)"\n"
		"\n"
		"getPoint() -> Point *  \n"
		"\n"
		"Returns a pointer to the Point containing the coordinates for this LocalCoord.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"pointer to the Point containing the x and y coordinates  \n"
		"\n"
		""},
	 { (char *)"LocalCoords_getNext", _wrap_LocalCoords_getNext, METH_VARARGS, (char *)"\n"
		"\n"
		"getNext() const  -> LocalCoords *  \n"
		"\n"
		"Return a pointer to the LocalCoord at the next lower nested Universe level if one exists.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"pointer to the next LocalCoord  \n"
		"\n"
		""},
	 { (char *)"LocalCoords_getPrev", _wrap_LocalCoords_getPrev, METH_VARARGS, (char *)"\n"
		"\n"
		"getPrev() const  -> LocalCoords *  \n"
		"\n"
		"Return a pointer to the LocalCoord at the next higher nested Universe level if one exists.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"pointer to the previous LocalCoord  \n"
		"\n"
		""},
	 { (char *)"LocalCoords_setType", (PyCFunction) _wrap_LocalCoords_setType, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"setType(coordType type)  \n"
		"\n"
		"Set the type of LocalCoords (UNIV or LAT).  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* type :  \n"
		"    the type for LocalCoords (UNIV or LAT)  \n"
		"\n"
		""},
	 { (char *)"LocalCoords_setUniverse", (PyCFunction) _wrap_LocalCoords_setUniverse, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"setUniverse(Universe *universe)  \n"
		"\n"
		"Set the Universe within which this LocalCoords resides.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* universe :  \n"
		"    the Universe  \n"
		"\n"
		""},
	 { (char *)"LocalCoords_setCell", (PyCFunction) _wrap_LocalCoords_setCell, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"setCell(Cell *cell)  \n"
		"\n"
		"Set the Cell within which this LocalCoords resides.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* cell :  \n"
		"    the Cell  \n"
		"\n"
		""},
	 { (char *)"LocalCoords_setLattice", (PyCFunction) _wrap_LocalCoords_setLattice, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"setLattice(Lattice *lattice)  \n"
		"\n"
		"Sets the Lattice within which this LocalCoords resides.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* lattice :  \n"
		"    the Lattice  \n"
		"\n"
		""},
	 { (char *)"LocalCoords_setLatticeX", (PyCFunction) _wrap_LocalCoords_setLatticeX, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"setLatticeX(int lattice_x)  \n"
		"\n"
		"Sets the x index for the Lattice cell within which this LocalCoords resides.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* lattice_x :  \n"
		"    the x Lattice cell index  \n"
		"\n"
		""},
	 { (char *)"LocalCoords_setLatticeY", (PyCFunction) _wrap_LocalCoords_setLatticeY, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"setLatticeY(int lattice_y)  \n"
		"\n"
		"Sets the y index for the Lattice cell within which this LocalCoords resides.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* lattice_y :  \n"
		"    the y Lattice cell index  \n"
		"\n"
		""},
	 { (char *)"LocalCoords_setLatticeZ", (PyCFunction) _wrap_LocalCoords_setLatticeZ, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"setLatticeZ(int lattice_z)  \n"
		"\n"
		"Sets the z index for the Lattice cell within which this LocalCoords resides.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* lattice_z :  \n"
		"    the z Lattice cell index  \n"
		"\n"
		""},
	 { (char *)"LocalCoords_setX", (PyCFunction) _wrap_LocalCoords_setX, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"setX(double x)  \n"
		"\n"
		"Set the x-coordinate for this LocalCoords.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* x :  \n"
		"    the x-coordinate  \n"
		"\n"
		""},
	 { (char *)"LocalCoords_setY", (PyCFunction) _wrap_LocalCoords_setY, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"setY(double y)  \n"
		"\n"
		"Set the y-coordinate for this Localcoords.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* y :  \n"
		"    the y-coordinate  \n"
		"\n"
		""},
	 { (char *)"LocalCoords_setZ", (PyCFunction) _wrap_LocalCoords_setZ, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"setZ(double z)  \n"
		"\n"
		"Set the z-coordinate for this Localcoords.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* z :  \n"
		"    the z-coordinate  \n"
		"\n"
		""},
	 { (char *)"LocalCoords_setPhi", (PyCFunction) _wrap_LocalCoords_setPhi, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"setPhi(double phi)  \n"
		"\n"
		"Set the direction angle in radians for this LocalCoords.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* angle :  \n"
		"    the direction angle in radians  \n"
		"\n"
		""},
	 { (char *)"LocalCoords_incrementPhi", (PyCFunction) _wrap_LocalCoords_incrementPhi, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"incrementPhi(double phi)  \n"
		"\n"
		"Increment the direction angle in radians for this LocalCoords.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* phi :  \n"
		"    the incremental direction angle in radians  \n"
		"\n"
		""},
	 { (char *)"LocalCoords_setNext", (PyCFunction) _wrap_LocalCoords_setNext, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"setNext(LocalCoords *next)  \n"
		"\n"
		"Sets the pointer to the LocalCoords on the next lower nested Universe level.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* next :  \n"
		"    pointer to the next LocalCoords  \n"
		"\n"
		""},
	 { (char *)"LocalCoords_setPrev", (PyCFunction) _wrap_LocalCoords_setPrev, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"setPrev(LocalCoords *coords)  \n"
		"\n"
		"Sets the pointer to the LocalCoords on the next higher nested Universe level.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* prev :  \n"
		"    pointer to the previous LocalCoords  \n"
		"\n"
		""},
	 { (char *)"LocalCoords_getLowestLevel", _wrap_LocalCoords_getLowestLevel, METH_VARARGS, (char *)"\n"
		"\n"
		"getLowestLevel() -> LocalCoords *  \n"
		"\n"
		"Find and return the last LocalCoords in the linked list which represents the local\n"
		"coordinates on the lowest level of a geometry of nested universes.  \n"
		"\n"
		"Traverses a linked list of LocalCoords to find the one at the lowest nested Universe\n"
		"level.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"a pointer to the last LocalCoords object in the list  \n"
		"\n"
		""},
	 { (char *)"LocalCoords_getHighestLevel", _wrap_LocalCoords_getHighestLevel, METH_VARARGS, (char *)"\n"
		"\n"
		"getHighestLevel() -> LocalCoords *  \n"
		"\n"
		"Find and return the first LocalCoords in the linked list which represents the local\n"
		"coordinates on the highest level of a geometry of nested universes.  \n"
		"\n"
		"Traverses a linked list of LocalCoords to find the one at the highest nested Universe\n"
		"level.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"a pointer to the first LocalCoords object in the list  \n"
		"\n"
		""},
	 { (char *)"LocalCoords_adjustCoords", (PyCFunction) _wrap_LocalCoords_adjustCoords, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"adjustCoords(double delta)  \n"
		"\n"
		"Translate all of the x,y coordinates for each LocalCoords object in the linked list.  \n"
		"\n"
		"This method will traverse the entire linked list and apply the translation to each\n"
		"element.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* delta :  \n"
		"    amount we wish to move the point by  \n"
		"\n"
		""},
	 { (char *)"LocalCoords_updateMostLocal", (PyCFunction) _wrap_LocalCoords_updateMostLocal, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"updateMostLocal(Point *point)  \n"
		"\n"
		"Update the last element in the linked list (the one at the lowest level of nested\n"
		"Universes) to have the same coordinates as a given point.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* point :  \n"
		"    a pointer to a point of interest  \n"
		"\n"
		""},
	 { (char *)"LocalCoords_prune", _wrap_LocalCoords_prune, METH_VARARGS, (char *)"\n"
		"\n"
		"prune()  \n"
		"\n"
		"Removes and frees memory for all LocalCoords beyond this one in the linked list.  \n"
		"\n"
		""},
	 { (char *)"LocalCoords_copyCoords", (PyCFunction) _wrap_LocalCoords_copyCoords, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"copyCoords(LocalCoords *coords)  \n"
		"\n"
		"Copies a LocalCoords' values to this one. details Given a pointer to a LocalCoords, it\n"
		"first prunes it and then creates a copy of the linked list of LocalCoords in the linked\n"
		"list below this one to give to the input LocalCoords.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* coords :  \n"
		"    a pointer to the LocalCoords to give the linked list copy to  \n"
		"\n"
		""},
	 { (char *)"LocalCoords_toString", _wrap_LocalCoords_toString, METH_VARARGS, (char *)"\n"
		"\n"
		"toString() -> std::string  \n"
		"\n"
		"Converts this LocalCoords's attributes to a character array representation.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"a character array of the LocalCoord's attributes  \n"
		"\n"
		""},
	 { (char *)"LocalCoords_swigregister", LocalCoords_swigregister, METH_VARARGS, NULL},
	 { (char *)"DEBUG_swigconstant", DEBUG_swigconstant, METH_VARARGS, NULL},
	 { (char *)"INFO_swigconstant", INFO_swigconstant, METH_VARARGS, NULL},
	 { (char *)"NORMAL_swigconstant", NORMAL_swigconstant, METH_VARARGS, NULL},
	 { (char *)"SEPARATOR_swigconstant", SEPARATOR_swigconstant, METH_VARARGS, NULL},
	 { (char *)"HEADER_swigconstant", HEADER_swigconstant, METH_VARARGS, NULL},
	 { (char *)"TITLE_swigconstant", TITLE_swigconstant, METH_VARARGS, NULL},
	 { (char *)"WARNING_swigconstant", WARNING_swigconstant, METH_VARARGS, NULL},
	 { (char *)"CRITICAL_swigconstant", CRITICAL_swigconstant, METH_VARARGS, NULL},
	 { (char *)"RESULT_swigconstant", RESULT_swigconstant, METH_VARARGS, NULL},
	 { (char *)"ERROR_swigconstant", ERROR_swigconstant, METH_VARARGS, NULL},
	 { (char *)"set_err", (PyCFunction) _wrap_set_err, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"set_err(const char *msg)  \n"
		"\n"
		"A function stub used to convert C++ exceptions into Python exceptions through SWIG.  \n"
		"\n"
		"This method is not defined in the C++ source. It is defined in the SWIG inteface files\n"
		"(i.e., openmoc/openmoc.i)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* msg :  \n"
		"    a character array for the exception message  \n"
		"\n"
		""},
	 { (char *)"initialize_logger", _wrap_initialize_logger, METH_VARARGS, (char *)"\n"
		"\n"
		"initialize_logger()  \n"
		"\n"
		"Initializes the logger for use.  \n"
		"\n"
		"This should be immediately called when the logger is imported into Python and before any\n"
		"of its other routines are called. The routine initializes an OpenMP mutual exclusion lock\n"
		"which is used to preclude race conditions from occurring when an ERROR message is reported\n"
		"and program execution is terminated.  \n"
		"\n"
		""},
	 { (char *)"set_output_directory", (PyCFunction) _wrap_set_output_directory, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"set_output_directory(char *directory)  \n"
		"\n"
		"Sets the output directory for log files.  \n"
		"\n"
		"If the directory does not exist, it creates it for the user.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* directory :  \n"
		"    a character array for the log file directory  \n"
		"\n"
		""},
	 { (char *)"get_output_directory", _wrap_get_output_directory, METH_VARARGS, (char *)"\n"
		"\n"
		"get_output_directory() -> const char *  \n"
		"\n"
		"Returns the output directory for log files.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"a character array for the log file directory  \n"
		"\n"
		""},
	 { (char *)"set_log_filename", (PyCFunction) _wrap_set_log_filename, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"set_log_filename(char *filename)  \n"
		"\n"
		"Sets the name for the log file.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* filename :  \n"
		"    a character array for log filename  \n"
		"\n"
		""},
	 { (char *)"get_log_filename", _wrap_get_log_filename, METH_VARARGS, (char *)"\n"
		"\n"
		"get_log_filename() -> const char *  \n"
		"\n"
		"Returns the log filename.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"a character array for the log filename  \n"
		"\n"
		""},
	 { (char *)"set_separator_character", (PyCFunction) _wrap_set_separator_character, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"set_separator_character(char c)  \n"
		"\n"
		"Sets the character to be used when printing SEPARATOR log messages.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* c :  \n"
		"    the character for SEPARATOR log messages  \n"
		"\n"
		""},
	 { (char *)"get_separator_character", _wrap_get_separator_character, METH_VARARGS, (char *)"\n"
		"\n"
		"get_separator_character() -> char  \n"
		"\n"
		"Returns the character used to format SEPARATOR log messages.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the character used for SEPARATOR log messages  \n"
		"\n"
		""},
	 { (char *)"set_header_character", (PyCFunction) _wrap_set_header_character, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"set_header_character(char c)  \n"
		"\n"
		"Sets the character to be used when printing HEADER log messages.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* c :  \n"
		"    the character for HEADER log messages  \n"
		"\n"
		""},
	 { (char *)"get_header_character", _wrap_get_header_character, METH_VARARGS, (char *)"\n"
		"\n"
		"get_header_character() -> char  \n"
		"\n"
		"Returns the character used to format HEADER type log messages.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the character used for HEADER type log messages  \n"
		"\n"
		""},
	 { (char *)"set_title_character", (PyCFunction) _wrap_set_title_character, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"set_title_character(char c)  \n"
		"\n"
		"Sets the character to be used when printing TITLE log messages.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* c :  \n"
		"    the character for TITLE log messages  \n"
		"\n"
		""},
	 { (char *)"get_title_character", _wrap_get_title_character, METH_VARARGS, (char *)"\n"
		"\n"
		"get_title_character() -> char  \n"
		"\n"
		"Returns the character used to format TITLE log messages.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the character used for TITLE log messages  \n"
		"\n"
		""},
	 { (char *)"set_line_length", (PyCFunction) _wrap_set_line_length, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"set_line_length(int length)  \n"
		"\n"
		"Sets the maximum line length for log messages.  \n"
		"\n"
		"Messages longer than this amount will be broken up into multiline messages.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* length :  \n"
		"    the maximum log message line length in characters  \n"
		"\n"
		""},
	 { (char *)"set_log_level", (PyCFunction) _wrap_set_log_level, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"set_log_level(const char *new_level)  \n"
		"\n"
		"Sets the minimum log message level which will be printed to the console and to the log\n"
		"file.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* new_level :  \n"
		"    the minimum logging level as a character array  \n"
		"\n"
		""},
	 { (char *)"get_log_level", _wrap_get_log_level, METH_VARARGS, (char *)"\n"
		"\n"
		"get_log_level() -> const char *  \n"
		"\n"
		"Return the minimum level for log messages printed to the screen.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the minimum level for log messages  \n"
		"\n"
		""},
	 { (char *)"log_printf", (PyCFunction) _wrap_log_printf, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"log_printf(logLevel level, const char *format,...)  \n"
		"\n"
		"Print a formatted message to the console.  \n"
		"\n"
		"If the logging level is ERROR, this function will throw a runtime exception  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* level :  \n"
		"    the logging level for this message  \n"
		"* format :  \n"
		"    variable list of C++ formatted arguments  \n"
		"\n"
		""},
	 { (char *)"create_multiline_msg", (PyCFunction) _wrap_create_multiline_msg, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"create_multiline_msg(std::string level, std::string message) -> std::string  \n"
		"\n"
		"Breaks up a message which is too long for a single line into a multiline message.  \n"
		"\n"
		"This is an internal function which is called by log_printf and should not be called\n"
		"directly by the user.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* level :  \n"
		"    a string containing log level prefix  \n"
		"* message :  \n"
		"    a string containing the log message  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"a string with a formatted multiline message  \n"
		"\n"
		""},
	 { (char *)"material_id", _wrap_material_id, METH_VARARGS, (char *)"\n"
		"\n"
		"material_id() -> int  \n"
		"\n"
		"Returns an auto-generated unique Material ID.  \n"
		"\n"
		"This method is intended as a utility method for user's writing OpenMOC input files. The\n"
		"method makes use of a static Material ID which is incremented each time the method is\n"
		"called to enable unique generation of monotonically increasing IDs. The method's first ID\n"
		"begins at 10000. Hence, user-defined material IDs greater than or equal to 10000 is\n"
		"prohibited.  \n"
		"\n"
		""},
	 { (char *)"reset_material_id", _wrap_reset_material_id, METH_VARARGS, (char *)"\n"
		"\n"
		"reset_material_id()  \n"
		"\n"
		"Resets the auto-generated unique Material ID counter to 10000.  \n"
		"\n"
		""},
	 { (char *)"maximize_material_id", (PyCFunction) _wrap_maximize_material_id, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"maximize_material_id(int material_id)  \n"
		"\n"
		"Maximize the auto-generated unique Material ID counter.  \n"
		"\n"
		"This method updates the auto-generated unique Material ID counter if the input parameter\n"
		"is greater than the present value. This is useful for the OpenMC compatibility module to\n"
		"ensure that the auto-generated Material IDs do not collide with those created in OpenMC.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* material_id :  \n"
		"    the id assigned to the auto-generated counter  \n"
		"\n"
		""},
	 { (char *)"new_Material", (PyCFunction) _wrap_new_Material, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"Material(int id=0, const char *name=\"\")  \n"
		"\n"
		"Constructor sets the ID and unique ID for the Material.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* id :  \n"
		"    the user-specified optional Material ID  \n"
		"* name :  \n"
		"    the user-specified optional Material name  \n"
		"\n"
		""},
	 { (char *)"delete_Material", _wrap_delete_Material, METH_VARARGS, (char *)"\n"
		"\n"
		"~Material()  \n"
		"\n"
		"Destructor deletes all cross-section data structures from memory.  \n"
		"\n"
		""},
	 { (char *)"Material_getId", _wrap_Material_getId, METH_VARARGS, (char *)"\n"
		"\n"
		"getId() const  -> int  \n"
		"\n"
		"Return the Material's user-defined ID.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the Material's user-defined ID  \n"
		"\n"
		""},
	 { (char *)"Material_getName", _wrap_Material_getName, METH_VARARGS, (char *)"\n"
		"\n"
		"getName() const  -> char *  \n"
		"\n"
		"Return the user-defined name of the Material.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the Material name  \n"
		"\n"
		""},
	 { (char *)"Material_getVolume", _wrap_Material_getVolume, METH_VARARGS, (char *)"\n"
		"\n"
		"getVolume() -> double  \n"
		"\n"
		"Return the aggregate volume/area of all instances of this Material.  \n"
		"\n"
		"The volume/area of the Material is computed from track segments which overlap this\n"
		"Material during track generation.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the volume/area of the Material  \n"
		"\n"
		""},
	 { (char *)"Material_getNumInstances", _wrap_Material_getNumInstances, METH_VARARGS, (char *)"\n"
		"\n"
		"getNumInstances() -> int  \n"
		"\n"
		"Return the number of instances of this Material in the Geometry.  \n"
		"\n"
		"The number of instances of this Material in the Geometry is determined during track\n"
		"generation.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the number of material instances  \n"
		"\n"
		""},
	 { (char *)"Material_getNumEnergyGroups", _wrap_Material_getNumEnergyGroups, METH_VARARGS, (char *)"\n"
		"\n"
		"getNumEnergyGroups() const  -> int  \n"
		"\n"
		"Returns the number of energy groups for this Material's nuclear data.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the number of energy groups  \n"
		"\n"
		""},
	 { (char *)"Material_getSigmaT", _wrap_Material_getSigmaT, METH_VARARGS, (char *)"\n"
		"\n"
		"getSigmaT() -> FP_PRECISION *  \n"
		"\n"
		"Return the array of the Material's total cross-sections.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the pointer to the Material's array of total cross-sections  \n"
		"\n"
		""},
	 { (char *)"Material_getSigmaS", _wrap_Material_getSigmaS, METH_VARARGS, (char *)"\n"
		"\n"
		"getSigmaS() -> FP_PRECISION *  \n"
		"\n"
		"Return the array of the Material's scattering cross-section matrix.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the pointer to the Material's array of scattering cross-sections  \n"
		"\n"
		""},
	 { (char *)"Material_getSigmaF", _wrap_Material_getSigmaF, METH_VARARGS, (char *)"\n"
		"\n"
		"getSigmaF() -> FP_PRECISION *  \n"
		"\n"
		"Return the array of the Material's fission cross-sections.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the pointer to the Material's array of fission cross-sections  \n"
		"\n"
		""},
	 { (char *)"Material_getNuSigmaF", _wrap_Material_getNuSigmaF, METH_VARARGS, (char *)"\n"
		"\n"
		"getNuSigmaF() -> FP_PRECISION *  \n"
		"\n"
		"Return the array of the Material's fission cross-sections multiplied by nu $ \\nu $.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the pointer to the Material's array of fission cross-sections multiplied by nu $ \\nu $  \n"
		"\n"
		""},
	 { (char *)"Material_getChi", _wrap_Material_getChi, METH_VARARGS, (char *)"\n"
		"\n"
		"getChi() -> FP_PRECISION *  \n"
		"\n"
		"Return the array of the Material's chi $ \\chi $.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the pointer to the Material's array of chi $ \\chi $ values  \n"
		"\n"
		""},
	 { (char *)"Material_getFissionMatrix", _wrap_Material_getFissionMatrix, METH_VARARGS, (char *)"\n"
		"\n"
		"getFissionMatrix() -> FP_PRECISION *  \n"
		"\n"
		"Return the array of the Material's fission matrix.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the pointer to the Material's fission matrix array  \n"
		"\n"
		""},
	 { (char *)"Material_getSigmaTByGroup", (PyCFunction) _wrap_Material_getSigmaTByGroup, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"getSigmaTByGroup(int group) -> FP_PRECISION  \n"
		"\n"
		"Get the Material's total cross section for some energy group.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* group :  \n"
		"    the energy group  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the total cross section  \n"
		"\n"
		""},
	 { (char *)"Material_getSigmaSByGroup", (PyCFunction) _wrap_Material_getSigmaSByGroup, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"getSigmaSByGroup(int origin, int destination) -> FP_PRECISION  \n"
		"\n"
		"Get the Material's scattering cross section for some energy group.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* origin :  \n"
		"    the incoming energy group  \n"
		"* destination :  \n"
		"    the outgoing energy group  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the scattering cross section  \n"
		"\n"
		""},
	 { (char *)"Material_getSigmaFByGroup", (PyCFunction) _wrap_Material_getSigmaFByGroup, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"getSigmaFByGroup(int group) -> FP_PRECISION  \n"
		"\n"
		"Get the Material's fission cross section for some energy group.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* group :  \n"
		"    the energy group  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the fission cross section  \n"
		"\n"
		""},
	 { (char *)"Material_getNuSigmaFByGroup", (PyCFunction) _wrap_Material_getNuSigmaFByGroup, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"getNuSigmaFByGroup(int group) -> FP_PRECISION  \n"
		"\n"
		"Get the Material's nu-fission cross section for some energy group.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* group :  \n"
		"    the energy group  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the nu-fission cross section  \n"
		"\n"
		""},
	 { (char *)"Material_getChiByGroup", (PyCFunction) _wrap_Material_getChiByGroup, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"getChiByGroup(int group) -> FP_PRECISION  \n"
		"\n"
		"Get the Material's fission spectrum for some energy group.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* group :  \n"
		"    the energy group  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the fission spectrum  \n"
		"\n"
		""},
	 { (char *)"Material_getFissionMatrixByGroup", (PyCFunction) _wrap_Material_getFissionMatrixByGroup, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"getFissionMatrixByGroup(int origin, int destination) -> FP_PRECISION  \n"
		"\n"
		"Get the Material's fission matrix for some energy group.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* origin :  \n"
		"    the incoming energy group $ E_{0} $  \n"
		"* destination :  \n"
		"    the outgoing energy group $ E_{1} $  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the fission matrix entry $ \\nu\\Sigma_{f}(E_{0}) * \\chi(E_{1})$  \n"
		"\n"
		""},
	 { (char *)"Material_isFissionable", _wrap_Material_isFissionable, METH_VARARGS, (char *)"\n"
		"\n"
		"isFissionable() -> bool  \n"
		"\n"
		"Returns whether or not the Material contains a fissionable (non-zero) fission cross-\n"
		"section.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"true if fissionable, false otherwise  \n"
		"\n"
		""},
	 { (char *)"Material_isDataAligned", _wrap_Material_isDataAligned, METH_VARARGS, (char *)"\n"
		"\n"
		"isDataAligned() -> bool  \n"
		"\n"
		"Returns true if the data is vector aligned, false otherwise (default).  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"Whether or not the Material's data is vector aligned  \n"
		"\n"
		""},
	 { (char *)"Material_getNumVectorGroups", _wrap_Material_getNumVectorGroups, METH_VARARGS, (char *)"\n"
		"\n"
		"getNumVectorGroups() -> int  \n"
		"\n"
		"Returns the rounded up number of energy groups to fill an integral number of vector\n"
		"lengths.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"The number of vector-aligned energy groups  \n"
		"\n"
		""},
	 { (char *)"Material_setName", (PyCFunction) _wrap_Material_setName, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"setName(const char *name)  \n"
		"\n"
		"Sets the name of the Material.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* name :  \n"
		"    the Material name string  \n"
		"\n"
		""},
	 { (char *)"Material_setVolume", (PyCFunction) _wrap_Material_setVolume, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"setVolume(double volume)  \n"
		"\n"
		"Set the volume/area of the Material.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* volume :  \n"
		"    the volume/area of the Material  \n"
		"\n"
		""},
	 { (char *)"Material_incrementVolume", (PyCFunction) _wrap_Material_incrementVolume, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"incrementVolume(double volume)  \n"
		"\n"
		"Increment the volume/area of the Material by some amount.  \n"
		"\n"
		"This routine is called by the TrackGenerator during track generation and segmentation.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* volume :  \n"
		"    the amount to increment the current volume by  \n"
		"\n"
		""},
	 { (char *)"Material_setNumInstances", (PyCFunction) _wrap_Material_setNumInstances, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"setNumInstances(int num_instances)  \n"
		"\n"
		"Set the number of instances of this Material.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* num_instances :  \n"
		"    the number of instances of this Material in the Geometry  \n"
		"\n"
		""},
	 { (char *)"Material_incrementNumInstances", _wrap_Material_incrementNumInstances, METH_VARARGS, (char *)"\n"
		"\n"
		"incrementNumInstances()  \n"
		"\n"
		"Increment the number of instances of this Material.  \n"
		"\n"
		"This routine is called by the TrackGenerator during track generation and segmentation.  \n"
		"\n"
		""},
	 { (char *)"Material_setNumEnergyGroups", (PyCFunction) _wrap_Material_setNumEnergyGroups, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"setNumEnergyGroups(const int num_groups)  \n"
		"\n"
		"Set the number of energy groups for this Material.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* num_groups :  \n"
		"    the number of energy groups.  \n"
		"\n"
		""},
	 { (char *)"Material_setSigmaT", (PyCFunction) _wrap_Material_setSigmaT, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"setSigmaT(double *xs, int num_groups)  \n"
		"\n"
		"Set the Material's array of total cross-sections.  \n"
		"\n"
		"This method is a helper function to allow OpenMOC users to assign the Material's nuclear\n"
		"data in Python. A user must initialize a NumPy array of the correct size (e.g., a float64\n"
		"array the length of the number of energy groups) as input to this function. This function\n"
		"then fills the NumPy array with the data values for the Material's total cross-sections.\n"
		"An example of how this function might be called in Python is as follows:  \n"
		"\n"
		"\n"
		"\n"
		"         NOTE: This routine will override an zero-valued cross-sections\n"
		"         (e.g., in void or gap regions) with a minimum value of 1E-10 to\n"
		"         void numerical issues in the MOC solver.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* xs :  \n"
		"    the array of total cross-sections  \n"
		"* num_groups :  \n"
		"    the number of energy groups  \n"
		"\n"
		""},
	 { (char *)"Material_setSigmaS", (PyCFunction) _wrap_Material_setSigmaS, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"setSigmaS(double *xs, int num_groups)  \n"
		"\n"
		"Set the Material's 2D array of scattering cross-sections.  \n"
		"\n"
		"The array should be passed to OpenMOC as a 1D array in column-major order. This assumes\n"
		"the standard convention, where column index is the origin group and the row index is the\n"
		"destination group. That is, the array should be ordered as follows: 1 -> 1 1 -> 2 1 -> 3\n"
		"... 2 -> 1 2 -> 2 ...  \n"
		"\n"
		"Note that if the scattering matrix is defined in NumPy by the standard convention,\n"
		"\"flat\" will put the matrix into row major order. Thus, one should transpose the matrix\n"
		"before flattening.  \n"
		"\n"
		"For cache efficiency, the transpose of the input is actually stored in OpenMOC.  \n"
		"\n"
		"This method is a helper function to allow OpenMOC users to assign the Material's nuclear\n"
		"data in Python. A user must initialize a NumPy array of the correct size (e.g., a float64\n"
		"array the length of the square of the number of energy groups) as input to this function.\n"
		"This function then fills the NumPy array with the data values for the Material's\n"
		"scattering cross-sections. An example of how this function might be called in Python is as\n"
		"follows:  \n"
		"\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* xs :  \n"
		"    the array of scattering cross-sections  \n"
		"* num_groups_squared :  \n"
		"    the number of energy groups squared  \n"
		"\n"
		""},
	 { (char *)"Material_setSigmaF", (PyCFunction) _wrap_Material_setSigmaF, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"setSigmaF(double *xs, int num_groups)  \n"
		"\n"
		"Set the Material's array of fission cross-sections.  \n"
		"\n"
		"This method is a helper function to allow OpenMOC users to assign the Material's nuclear\n"
		"data in Python. A user must initialize a NumPy array of the correct size (e.g., a float64\n"
		"array the length of the number of energy groups) as input to this function. This function\n"
		"then fills the NumPy array with the data values for the Material's fission cross-sections.\n"
		"An example of how this function might be called in Python is as follows:  \n"
		"\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* xs :  \n"
		"    the array of fission cross-sections  \n"
		"* num_groups :  \n"
		"    the number of energy groups  \n"
		"\n"
		""},
	 { (char *)"Material_setNuSigmaF", (PyCFunction) _wrap_Material_setNuSigmaF, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"setNuSigmaF(double *xs, int num_groups)  \n"
		"\n"
		"Set the Material's array of fission cross-sections multiplied by $ \\nu $.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* xs :  \n"
		"    the array of fission cross-sections multiplied by nu $ \\nu $  \n"
		"* num_groups :  \n"
		"    the number of energy groups  \n"
		"\n"
		""},
	 { (char *)"Material_setChi", (PyCFunction) _wrap_Material_setChi, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"setChi(double *xs, int num_groups)  \n"
		"\n"
		"Set the Material's array of chi $ \\chi $ values.  \n"
		"\n"
		"This method is a helper function to allow OpenMOC users to assign the Material's nuclear\n"
		"data in Python. A user must initialize a NumPy array of the correct size (e.g., a float64\n"
		"array the length of the number of energy groups) as input to this function. This function\n"
		"then fills the NumPy array with the data values for the Material's chi distribution. An\n"
		"example of how this function might be called in Python is as follows:  \n"
		"\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* xs :  \n"
		"    the array of chi $ \\chi $ values  \n"
		"* num_groups :  \n"
		"    the number of energy groups  \n"
		"\n"
		""},
	 { (char *)"Material_setSigmaTByGroup", (PyCFunction) _wrap_Material_setSigmaTByGroup, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"setSigmaTByGroup(double xs, int group)  \n"
		"\n"
		"Set the Material's total cross-section for some energy group.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* xs :  \n"
		"    the total cross-section  \n"
		"* group :  \n"
		"    the energy group  \n"
		"\n"
		""},
	 { (char *)"Material_setSigmaFByGroup", (PyCFunction) _wrap_Material_setSigmaFByGroup, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"setSigmaFByGroup(double xs, int group)  \n"
		"\n"
		"Set the Material's fission cross-section for some energy group.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* xs :  \n"
		"    the fission cross-section  \n"
		"* group :  \n"
		"    the energy group  \n"
		"\n"
		""},
	 { (char *)"Material_setNuSigmaFByGroup", (PyCFunction) _wrap_Material_setNuSigmaFByGroup, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"setNuSigmaFByGroup(double xs, int group)  \n"
		"\n"
		"Set the Material's fission cross-section multiplied by $ \\nu $ for some energy group.  \n"
		"\n"
		"This method is a helper function to allow OpenMOC users to assign the Material's nuclear\n"
		"data in Python. A user must initialize a NumPy array of the correct size (e.g., a float64\n"
		"array the length of the number of energy groups) as input to this function. This function\n"
		"then fills the NumPy array with the data values for the Material's nu*fission cross-\n"
		"sections. An example of how this function might be called in Python is as follows:  \n"
		"\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* xs :  \n"
		"    the fission cross-section multiplied by nu $ \\nu $  \n"
		"* group :  \n"
		"    the energy group  \n"
		"\n"
		""},
	 { (char *)"Material_setSigmaSByGroup", (PyCFunction) _wrap_Material_setSigmaSByGroup, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"setSigmaSByGroup(double xs, int origin, int destination)  \n"
		"\n"
		"Set the Material's scattering cross-section for some energy group.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* xs :  \n"
		"    the scattering cross-section  \n"
		"* origin :  \n"
		"    the column index in the scattering matrix  \n"
		"* destination :  \n"
		"    the row index in the scattering matrix  \n"
		"\n"
		""},
	 { (char *)"Material_setChiByGroup", (PyCFunction) _wrap_Material_setChiByGroup, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"setChiByGroup(double xs, int group)  \n"
		"\n"
		"Set the Material's chi value for some energy group.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* xs :  \n"
		"    the chi value ( $ \\Chi $)  \n"
		"* group :  \n"
		"    the energy group  \n"
		"\n"
		""},
	 { (char *)"Material_buildFissionMatrix", _wrap_Material_buildFissionMatrix, METH_VARARGS, (char *)"\n"
		"\n"
		"buildFissionMatrix()  \n"
		"\n"
		"Builds the fission matrix from chi and the fission cross-section.  \n"
		"\n"
		"The fission matrix is constructed as the outer product of the chi and fission cross-\n"
		"section vectors. This routine is intended for internal use and is called by the Solver at\n"
		"runtime.  \n"
		"\n"
		""},
	 { (char *)"Material_transposeProductionMatrices", _wrap_Material_transposeProductionMatrices, METH_VARARGS, (char *)"\n"
		"\n"
		"transposeProductionMatrices()  \n"
		"\n"
		"Transposes the scattering and fission matrices.  \n"
		"\n"
		"This routine is used by the Solver when performing adjoint flux caclulations.  \n"
		"\n"
		""},
	 { (char *)"Material_alignData", _wrap_Material_alignData, METH_VARARGS, (char *)"\n"
		"\n"
		"alignData()  \n"
		"\n"
		"Reallocates the Material's cross-section data structures along word-aligned boundaries.  \n"
		"\n"
		"This method is used to assist with SIMD auto-vectorization of the MOC routines in the\n"
		"Solver classes. Rather than using the assigned number of energy groups, this method adds\n"
		"\"dummy\" energy groups such that the total number of groups is some multiple of\n"
		"VEC_LENGTH (typically 4, 8, or 16). As a result, the SIMD-vectorized Solver subclasses can\n"
		"break up loops over energy groups in such a way to \"expose\" the SIMD nature of the\n"
		"algorithm.  \n"
		"\n"
		""},
	 { (char *)"Material_clone", _wrap_Material_clone, METH_VARARGS, (char *)"\n"
		"\n"
		"clone() -> Material *  \n"
		"\n"
		"Create a duplicate of the Material.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"a pointer to the clone  \n"
		"\n"
		""},
	 { (char *)"Material_copyFrom", (PyCFunction) _wrap_Material_copyFrom, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Material_toString", _wrap_Material_toString, METH_VARARGS, (char *)"\n"
		"\n"
		"toString() -> std::string  \n"
		"\n"
		"Converts this Material's attributes to a character array representation.  \n"
		"\n"
		"The character array returned includes the user-defined ID, and each of the absorption,\n"
		"total, fission, nu multiplied by fission and scattering cross-sections and chi for all\n"
		"energy groups.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"character array of this Material's attributes  \n"
		"\n"
		""},
	 { (char *)"Material_printString", _wrap_Material_printString, METH_VARARGS, (char *)"\n"
		"\n"
		"printString()  \n"
		"\n"
		"Prints a string representation of all of the Material's attributes to the console.  \n"
		"\n"
		""},
	 { (char *)"Material_swigregister", Material_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Point", _wrap_new_Point, METH_VARARGS, (char *)"\n"
		"\n"
		"Point()  \n"
		"\n"
		"Constructor initializes an empty Point.  \n"
		"\n"
		""},
	 { (char *)"delete_Point", _wrap_delete_Point, METH_VARARGS, (char *)"\n"
		"\n"
		"~Point()  \n"
		"\n"
		"Destructor.  \n"
		"\n"
		""},
	 { (char *)"Point_setCoords", (PyCFunction) _wrap_Point_setCoords, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"setCoords(const double x, const double y, const double z)  \n"
		"\n"
		"Initializes a Point with two-dimensional coordinates.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* x :  \n"
		"    x-coordinate  \n"
		"* y :  \n"
		"    y-coordinate  \n"
		"\n"
		""},
	 { (char *)"Point_getX", _wrap_Point_getX, METH_VARARGS, (char *)"\n"
		"\n"
		"getX() const  -> double  \n"
		"\n"
		"Returns this Point's x-coordinate.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the x-coordinate  \n"
		"\n"
		""},
	 { (char *)"Point_getY", _wrap_Point_getY, METH_VARARGS, (char *)"\n"
		"\n"
		"getY() const  -> double  \n"
		"\n"
		"Returns this Point's y-coordinate.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the y-coordinate  \n"
		"\n"
		""},
	 { (char *)"Point_getZ", _wrap_Point_getZ, METH_VARARGS, (char *)"\n"
		"\n"
		"getZ() const  -> double  \n"
		"\n"
		"Returns this Point's z-coordinate.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the z-coordinate  \n"
		"\n"
		""},
	 { (char *)"Point_setX", (PyCFunction) _wrap_Point_setX, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"setX(const double x)  \n"
		"\n"
		"Set the Point's x-coordinate.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* x :  \n"
		"    the new x-coordinate  \n"
		"\n"
		""},
	 { (char *)"Point_setY", (PyCFunction) _wrap_Point_setY, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"setY(const double y)  \n"
		"\n"
		"Set the Point's y-coordinate.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* y :  \n"
		"    the new y-coordinate  \n"
		"\n"
		""},
	 { (char *)"Point_setZ", (PyCFunction) _wrap_Point_setZ, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"setZ(const double z)  \n"
		"\n"
		"Set the Point's z-coordinate.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* z :  \n"
		"    the new z-coordinate  \n"
		"\n"
		""},
	 { (char *)"Point_distanceToPoint", (PyCFunction) _wrap_Point_distanceToPoint, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"distanceToPoint(const Point *point) -> double  \n"
		"\n"
		"Compute the distance from this Point to another Point of interest.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* point :  \n"
		"    a pointer to the Point of interest  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"distance to the Point of interest  \n"
		"\n"
		""},
	 { (char *)"Point_toString", _wrap_Point_toString, METH_VARARGS, (char *)"\n"
		"\n"
		"toString() -> std::string  \n"
		"\n"
		"Converts this Point to a character representation of its attributes.  \n"
		"\n"
		"The character array includes the x-coordinate, y-coordinate, and z-coordinate  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"a character array of this Point's attributes  \n"
		"\n"
		""},
	 { (char *)"Point_swigregister", Point_swigregister, METH_VARARGS, NULL},
	 { (char *)"TABUCHI_YAMAMOTO_swigconstant", TABUCHI_YAMAMOTO_swigconstant, METH_VARARGS, NULL},
	 { (char *)"LEONARD_swigconstant", LEONARD_swigconstant, METH_VARARGS, NULL},
	 { (char *)"GAUSS_LEGENDRE_swigconstant", GAUSS_LEGENDRE_swigconstant, METH_VARARGS, NULL},
	 { (char *)"EQUAL_WEIGHT_swigconstant", EQUAL_WEIGHT_swigconstant, METH_VARARGS, NULL},
	 { (char *)"EQUAL_ANGLE_swigconstant", EQUAL_ANGLE_swigconstant, METH_VARARGS, NULL},
	 { (char *)"new_Quadrature", _wrap_new_Quadrature, METH_VARARGS, (char *)"\n"
		"\n"
		"Quadrature()  \n"
		"\n"
		"Dummy constructor sets the default number of angles to zero.  \n"
		"\n"
		""},
	 { (char *)"delete_Quadrature", _wrap_delete_Quadrature, METH_VARARGS, (char *)"\n"
		"\n"
		"~Quadrature()  \n"
		"\n"
		"Destructor deletes arrray of sines of the polar angles, the weights of the polar angles\n"
		"and the products of the sines and weights.  \n"
		"\n"
		""},
	 { (char *)"Quadrature_getNumPolarAngles", _wrap_Quadrature_getNumPolarAngles, METH_VARARGS, (char *)"\n"
		"\n"
		"getNumPolarAngles() const  -> int  \n"
		"\n"
		"Returns the number of polar angles.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the number of polar angles  \n"
		"\n"
		""},
	 { (char *)"Quadrature_getNumAzimAngles", _wrap_Quadrature_getNumAzimAngles, METH_VARARGS, (char *)"\n"
		"\n"
		"getNumAzimAngles() const  -> int  \n"
		"\n"
		"Returns the number of azimuthal angles.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the number of azimuthal angles  \n"
		"\n"
		""},
	 { (char *)"Quadrature_getSinTheta", (PyCFunction) _wrap_Quadrature_getSinTheta, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"getSinTheta(int azim, int polar) -> FP_PRECISION  \n"
		"\n"
		"Returns the $ sin(\\theta)$ value for a particular polar angle.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* azim :  \n"
		"    index of the azimthal angle of interest  \n"
		"* polar :  \n"
		"    index of the polar angle of interest  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the value of $ \\sin(\\theta) $ for this azimuthal and polar angle  \n"
		"\n"
		""},
	 { (char *)"Quadrature_getTheta", (PyCFunction) _wrap_Quadrature_getTheta, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"getTheta(int azim, int polar) -> double  \n"
		"\n"
		"Returns the polar angle in radians for a given azimuthal and polar angle index.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* azim :  \n"
		"    index of the azimthal angle of interest  \n"
		"* polar :  \n"
		"    index of the polar angle of interest  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the value of the polar angle for this azimuthal and polar angle index  \n"
		"\n"
		""},
	 { (char *)"Quadrature_getPhi", (PyCFunction) _wrap_Quadrature_getPhi, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"getPhi(int azim) -> double  \n"
		"\n"
		"Returns the azimuthal angle value in radians.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* azim :  \n"
		"    index of the azimthal angle of interest  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the value of the azimuthal angle  \n"
		"\n"
		""},
	 { (char *)"Quadrature_getAzimWeight", (PyCFunction) _wrap_Quadrature_getAzimWeight, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"getAzimWeight(int azim) -> FP_PRECISION  \n"
		"\n"
		"Returns the azimuthal angle weight value for a particular azimuthal angle.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* azim :  \n"
		"    index of the azimuthal angle of interest  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the weight for an azimuthal angle  \n"
		"\n"
		""},
	 { (char *)"Quadrature_getPolarWeight", (PyCFunction) _wrap_Quadrature_getPolarWeight, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"getPolarWeight(int azim, int polar) -> FP_PRECISION  \n"
		"\n"
		"Returns the polar weight for a particular azimuthal and polar angle.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* azim :  \n"
		"    index of the azimthal angle of interest  \n"
		"* polar :  \n"
		"    index of the polar angle of interest  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the value of the polar weight for this azimuthal and polar angle  \n"
		"\n"
		""},
	 { (char *)"Quadrature_getWeight", (PyCFunction) _wrap_Quadrature_getWeight, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"getWeight(int azim, int polar) -> FP_PRECISION  \n"
		"\n"
		"Returns the total weight for Tracks with the given azimuthal and polar indexes.  \n"
		"\n"
		"Angular weights are multiplied by Track spcings  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* azim :  \n"
		"    index of the azimuthal angle of interest  \n"
		"* polar :  \n"
		"    index of the polar angle of interest  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the total weight of each Track with the given indexes  \n"
		"\n"
		""},
	 { (char *)"Quadrature_getWeightInline", (PyCFunction) _wrap_Quadrature_getWeightInline, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"getWeightInline(int azim, int polar) -> FP_PRECISION  \n"
		"\n"
		"Returns the total weight for Tracks with the given azimuthal and polar indexes without\n"
		"error checking and inlined.  \n"
		"\n"
		"Angular weights are multiplied by Track spcings  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* azim :  \n"
		"    index of the azimuthal angle of interest  \n"
		"* polar :  \n"
		"    index of the polar angle of interest  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the total weight of each Track with the given indexes  \n"
		"\n"
		""},
	 { (char *)"Quadrature_getSinThetas", _wrap_Quadrature_getSinThetas, METH_VARARGS, (char *)"\n"
		"\n"
		"getSinThetas() -> FP_PRECISION **  \n"
		"\n"
		"Returns a pointer to the Quadrature's array of polar angle sines $ sin\\theta_{p} $.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"a pointer to the array of $ sin\\theta_{p} $  \n"
		"\n"
		""},
	 { (char *)"Quadrature_getThetas", _wrap_Quadrature_getThetas, METH_VARARGS, (char *)"\n"
		"\n"
		"getThetas() -> double **  \n"
		"\n"
		"Returns a pointer to the Quadrature's array of polar angles $ \\theta_{p} $.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"a pointer to the array of $ \\theta_{p} $  \n"
		"\n"
		""},
	 { (char *)"Quadrature_getPhis", _wrap_Quadrature_getPhis, METH_VARARGS, (char *)"\n"
		"\n"
		"getPhis() -> double *  \n"
		"\n"
		"Returns a pointer to the Quadrature's array of azimuthal angles $ \\phi $.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"a pointer to the array of $ \\phi $  \n"
		"\n"
		""},
	 { (char *)"Quadrature_getAzimWeights", _wrap_Quadrature_getAzimWeights, METH_VARARGS, (char *)"\n"
		"\n"
		"getAzimWeights() -> FP_PRECISION *  \n"
		"\n"
		"Returns a pointer to the Quadrature's array of azimuthal weights.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"a pointer to the azimuthal weights array  \n"
		"\n"
		""},
	 { (char *)"Quadrature_getPolarWeights", _wrap_Quadrature_getPolarWeights, METH_VARARGS, (char *)"\n"
		"\n"
		"getPolarWeights() -> FP_PRECISION **  \n"
		"\n"
		"Returns a pointer to the Quadrature's array of polar weights.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"a pointer to the polar weights array  \n"
		"\n"
		""},
	 { (char *)"Quadrature_getQuadratureType", _wrap_Quadrature_getQuadratureType, METH_VARARGS, (char *)"\n"
		"\n"
		"getQuadratureType() -> quadratureType  \n"
		"\n"
		"Returns the type of Quadrature created.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"The quadrature type  \n"
		"\n"
		""},
	 { (char *)"Quadrature_getAzimSpacings", _wrap_Quadrature_getAzimSpacings, METH_VARARGS, (char *)"\n"
		"\n"
		"getAzimSpacings() -> FP_PRECISION *  \n"
		"\n"
		"Returns an array of adjusted azimuthal spacings.  \n"
		"\n"
		"An array of azimuthal spacings after adjustment is returned, indexed by azimuthal angle  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the array of azimuthal spacings  \n"
		"\n"
		""},
	 { (char *)"Quadrature_getAzimSpacing", (PyCFunction) _wrap_Quadrature_getAzimSpacing, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"getAzimSpacing(int azim) -> FP_PRECISION  \n"
		"\n"
		"Returns the adjusted azimuthal spacing at the requested azimuthal angle index.  \n"
		"\n"
		"The aziumthal spacing depends on the azimuthal angle. This function returns the azimuthal\n"
		"spacing used at the desired azimuthal angle index.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* azim :  \n"
		"    the requested azimuthal angle index  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the requested azimuthal spacing  \n"
		"\n"
		""},
	 { (char *)"Quadrature_setNumAzimAngles", (PyCFunction) _wrap_Quadrature_setNumAzimAngles, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"setNumAzimAngles(const int num_azim)  \n"
		"\n"
		"Set the number of azimuthal angles to initialize.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* num_azim :  \n"
		"    the number of azimuthal angles  \n"
		"\n"
		""},
	 { (char *)"Quadrature_setNumPolarAngles", (PyCFunction) _wrap_Quadrature_setNumPolarAngles, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"setNumPolarAngles(const int num_polar)  \n"
		"\n"
		"Set the number of polar angles to initialize.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* num_polar :  \n"
		"    the number of polar angles  \n"
		"\n"
		""},
	 { (char *)"Quadrature_setThetas", (PyCFunction) _wrap_Quadrature_setThetas, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"setThetas(double *thetas, int num_azim_times_polar)  \n"
		"\n"
		"Sets the Quadrature's array of polar angles.  \n"
		"\n"
		"This method is a helper function to allow OpenMOC users to assign the Quadrature's polar\n"
		"angles in Python. A user must initialize a NumPy array of the correct size (e.g., a\n"
		"float64 array the length of the number of azimuthal times polar angles) as input to this\n"
		"function. This function then fills the Quadrature's polar angles with the given values. An\n"
		"example of how this function might be called in Python is as follows:  \n"
		"\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* thetas :  \n"
		"    the array of polar angle for each azimuthal/polar angle combination  \n"
		"* num_azim_times_polar :  \n"
		"    the total number of angles (azimuthal x polar)  \n"
		"\n"
		""},
	 { (char *)"Quadrature_setPolarWeights", (PyCFunction) _wrap_Quadrature_setPolarWeights, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"setPolarWeights(FP_PRECISION *weights, int num_azim_times_polar)  \n"
		"\n"
		"Set the Quadrature's array of polar weights.  \n"
		"\n"
		"This method is a helper function to allow OpenMOC users to assign the Quadrature's polar\n"
		"weights in Python. A user must initialize a NumPy array of the correct size (e.g., a\n"
		"float64 array the length of the number of azimuthal times polar angles) as input to this\n"
		"function. This function then fills the Quadrature's polar weights with the given values.\n"
		"An example of how this function might be called in Python is as follows:  \n"
		"\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* weights :  \n"
		"    The polar weights  \n"
		"* num_azim_times_polar :  \n"
		"    the total number of angles in one octant (azimuthal x polar)  \n"
		"\n"
		""},
	 { (char *)"Quadrature_setTheta", (PyCFunction) _wrap_Quadrature_setTheta, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"setTheta(double theta, int azim, int polar)  \n"
		"\n"
		"Sets the polar angle for the given indexes.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* theta :  \n"
		"    the value in radians of the polar angle to be set  \n"
		"* azim :  \n"
		"    the azimuthal index of the angle of interest  \n"
		"* polar :  \n"
		"    the polar index of the angle of interest  \n"
		"\n"
		""},
	 { (char *)"Quadrature_setPhi", (PyCFunction) _wrap_Quadrature_setPhi, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"setPhi(double phi, int azim)  \n"
		"\n"
		"Sets the azimuthal angle for the given index.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* phi :  \n"
		"    the value in radians of the azimuthal angle to be set  \n"
		"* azim :  \n"
		"    the azimuthal index  \n"
		"\n"
		""},
	 { (char *)"Quadrature_setAzimSpacing", (PyCFunction) _wrap_Quadrature_setAzimSpacing, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"setAzimSpacing(FP_PRECISION spacing, int azim)  \n"
		"\n"
		"Sets the azimuthal spacing for the given index.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* spacing :  \n"
		"    the spacing (cm) in the azimuthal direction to be set  \n"
		"* azim :  \n"
		"    the azimuthal index  \n"
		"\n"
		""},
	 { (char *)"Quadrature_setAzimWeight", (PyCFunction) _wrap_Quadrature_setAzimWeight, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"setAzimWeight(double weight, int azim)  \n"
		"\n"
		"Sets the azimuthal weight for the given index.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* weight :  \n"
		"    the weight of the azimuthal angle  \n"
		"* azim :  \n"
		"    the azimuthal index  \n"
		"\n"
		""},
	 { (char *)"Quadrature_setPolarWeight", (PyCFunction) _wrap_Quadrature_setPolarWeight, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"setPolarWeight(FP_PRECISION weight, int azim, int polar)  \n"
		"\n"
		"Sets the polar weight for the given indexes.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* weight :  \n"
		"    the weight of the polar angle  \n"
		"* azim :  \n"
		"    the azimuthal index corresponding to the angle  \n"
		"* azim :  \n"
		"    the polar index corresponding to the angle  \n"
		"\n"
		""},
	 { (char *)"Quadrature_initialize", _wrap_Quadrature_initialize, METH_VARARGS, (char *)"\n"
		"\n"
		"initialize()  \n"
		"\n"
		"Initialize the polar quadrature azimuthal angles.  \n"
		"\n"
		"The parent class routine simply checks that number of polar and azimuthal angles have been\n"
		"set by the user and generates the azimuthal angles if not already generated.  \n"
		"\n"
		""},
	 { (char *)"Quadrature_precomputeWeights", (PyCFunction) _wrap_Quadrature_precomputeWeights, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"precomputeWeights(bool solve_3D)  \n"
		"\n"
		"This private routine computes the product of the sine thetas and weights for each angle in\n"
		"the polar quadrature.  \n"
		"\n"
		"Note that this routine must be called after populating the sine thetas and weights arrays.  \n"
		"\n"
		""},
	 { (char *)"Quadrature_toString", _wrap_Quadrature_toString, METH_VARARGS, (char *)"\n"
		"\n"
		"toString() -> std::string  \n"
		"\n"
		"Converts this Quadrature to a character array of its attributes.  \n"
		"\n"
		"The character array includes the number of polar angles, the the values of the sine and\n"
		"weight of each polar angle, and the product of the sine and weight of each polar angle.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"a character array of the Quadrature's attributes  \n"
		"\n"
		""},
	 { (char *)"Quadrature_swigregister", Quadrature_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_TYPolarQuad", _wrap_new_TYPolarQuad, METH_VARARGS, (char *)"\n"
		"\n"
		"TYPolarQuad()  \n"
		"\n"
		"Dummy constructor calls the parent constructor.  \n"
		"\n"
		""},
	 { (char *)"TYPolarQuad_setNumPolarAngles", (PyCFunction) _wrap_TYPolarQuad_setNumPolarAngles, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"setNumPolarAngles(const int num_polar)  \n"
		"\n"
		"Set the number of polar angles to initialize.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* num_polar :  \n"
		"    the number of polar angles (maximum 6)  \n"
		"\n"
		""},
	 { (char *)"TYPolarQuad_initialize", _wrap_TYPolarQuad_initialize, METH_VARARGS, (char *)"\n"
		"\n"
		"initialize()  \n"
		"\n"
		"Routine to initialize the polar quadrature.  \n"
		"\n"
		"This routine uses the tabulated values for the Tabuchi-Yamamoto polar angle quadrature,\n"
		"including the sine thetas and weights.  \n"
		"\n"
		""},
	 { (char *)"TYPolarQuad_precomputeWeights", (PyCFunction) _wrap_TYPolarQuad_precomputeWeights, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"precomputeWeights(bool solve_3D)  \n"
		"\n"
		"Calculates total weights for every azimuthal/polar combination based on the TY quadrature.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* solve_3D :  \n"
		"    Boolean indicating whether this is a 3D quadrature  \n"
		"\n"
		""},
	 { (char *)"delete_TYPolarQuad", _wrap_delete_TYPolarQuad, METH_VARARGS, NULL},
	 { (char *)"TYPolarQuad_swigregister", TYPolarQuad_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_LeonardPolarQuad", _wrap_new_LeonardPolarQuad, METH_VARARGS, (char *)"\n"
		"\n"
		"LeonardPolarQuad()  \n"
		"\n"
		"Dummy constructor calls the parent constructor.  \n"
		"\n"
		""},
	 { (char *)"LeonardPolarQuad_setNumPolarAngles", (PyCFunction) _wrap_LeonardPolarQuad_setNumPolarAngles, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"setNumPolarAngles(const int num_polar)  \n"
		"\n"
		"Set the number of polar angles to initialize.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* num_polar :  \n"
		"    the number of polar angles (4 or 6)  \n"
		"\n"
		""},
	 { (char *)"LeonardPolarQuad_initialize", _wrap_LeonardPolarQuad_initialize, METH_VARARGS, (char *)"\n"
		"\n"
		"initialize()  \n"
		"\n"
		"Routine to initialize the polar quadrature.  \n"
		"\n"
		"This routine uses the tabulated values for the Leonard polar angle quadrature, including\n"
		"the sine thetas and weights.  \n"
		"\n"
		""},
	 { (char *)"LeonardPolarQuad_precomputeWeights", (PyCFunction) _wrap_LeonardPolarQuad_precomputeWeights, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"precomputeWeights(bool solve_3D)  \n"
		"\n"
		"Calculates total weights for every azimuthal/polar combination based on the Leonard polar\n"
		"quadrature.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* solve_3D :  \n"
		"    Boolean indicating whether this is a 3D quadrature  \n"
		"\n"
		""},
	 { (char *)"delete_LeonardPolarQuad", _wrap_delete_LeonardPolarQuad, METH_VARARGS, NULL},
	 { (char *)"LeonardPolarQuad_swigregister", LeonardPolarQuad_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_GLPolarQuad", _wrap_new_GLPolarQuad, METH_VARARGS, (char *)"\n"
		"\n"
		"GLPolarQuad()  \n"
		"\n"
		"Dummy constructor calls the parent constructor.  \n"
		"\n"
		""},
	 { (char *)"GLPolarQuad_setNumPolarAngles", (PyCFunction) _wrap_GLPolarQuad_setNumPolarAngles, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"setNumPolarAngles(const int num_polar)  \n"
		"\n"
		"Set the number of polar angles to initialize.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* num_polar :  \n"
		"    the number of polar angles (maximum 12)  \n"
		"\n"
		""},
	 { (char *)"GLPolarQuad_initialize", _wrap_GLPolarQuad_initialize, METH_VARARGS, (char *)"\n"
		"\n"
		"initialize()  \n"
		"\n"
		"Routine to initialize the polar quadrature.  \n"
		"\n"
		"This routine uses the tabulated values for the Gauss-Legendre polar angle quadrature,\n"
		"including the sine thetas and weights.  \n"
		"\n"
		""},
	 { (char *)"GLPolarQuad_precomputeWeights", (PyCFunction) _wrap_GLPolarQuad_precomputeWeights, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"precomputeWeights(bool solve_3D)  \n"
		"\n"
		"Calculates total weights for every azimuthal/polar combination based on the Gauss-Legendre\n"
		"polar quadrature.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* solve_3D :  \n"
		"    Boolean indicating whether this is a 3D quadrature  \n"
		"\n"
		""},
	 { (char *)"GLPolarQuad_legendrePolynomial", (PyCFunction) _wrap_GLPolarQuad_legendrePolynomial, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"GLPolarQuad_logDerivLegendre", (PyCFunction) _wrap_GLPolarQuad_logDerivLegendre, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"GLPolarQuad_secondLogDerivLegendre", (PyCFunction) _wrap_GLPolarQuad_secondLogDerivLegendre, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"GLPolarQuad_getLegendreRoots", (PyCFunction) _wrap_GLPolarQuad_getLegendreRoots, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"GLPolarQuad_getGLWeights", (PyCFunction) _wrap_GLPolarQuad_getGLWeights, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"delete_GLPolarQuad", _wrap_delete_GLPolarQuad, METH_VARARGS, NULL},
	 { (char *)"GLPolarQuad_swigregister", GLPolarQuad_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_EqualWeightPolarQuad", _wrap_new_EqualWeightPolarQuad, METH_VARARGS, (char *)"\n"
		"\n"
		"EqualWeightPolarQuad()  \n"
		"\n"
		"Dummy constructor calls the parent constructor.  \n"
		"\n"
		""},
	 { (char *)"EqualWeightPolarQuad_setNumPolarAngles", (PyCFunction) _wrap_EqualWeightPolarQuad_setNumPolarAngles, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"setNumPolarAngles(const int num_polar)  \n"
		"\n"
		"Set the number of polar angles to initialize.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* num_polar :  \n"
		"    the number of polar angles  \n"
		"\n"
		""},
	 { (char *)"EqualWeightPolarQuad_initialize", _wrap_EqualWeightPolarQuad_initialize, METH_VARARGS, (char *)"\n"
		"\n"
		"initialize()  \n"
		"\n"
		"Routine to initialize the polar quadrature.  \n"
		"\n"
		"This routine generates the sine thetas and weights.  \n"
		"\n"
		""},
	 { (char *)"EqualWeightPolarQuad_precomputeWeights", (PyCFunction) _wrap_EqualWeightPolarQuad_precomputeWeights, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"precomputeWeights(bool solve_3D)  \n"
		"\n"
		"Calculates total weights for every azimuthal/polar combination based on the equal weight\n"
		"polar quadrature.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* solve_3D :  \n"
		"    Boolean indicating whether this is a 3D quadrature  \n"
		"\n"
		""},
	 { (char *)"delete_EqualWeightPolarQuad", _wrap_delete_EqualWeightPolarQuad, METH_VARARGS, NULL},
	 { (char *)"EqualWeightPolarQuad_swigregister", EqualWeightPolarQuad_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_EqualAnglePolarQuad", _wrap_new_EqualAnglePolarQuad, METH_VARARGS, (char *)"\n"
		"\n"
		"EqualAnglePolarQuad()  \n"
		"\n"
		"Dummy constructor calls the parent constructor.  \n"
		"\n"
		""},
	 { (char *)"EqualAnglePolarQuad_setNumPolarAngles", (PyCFunction) _wrap_EqualAnglePolarQuad_setNumPolarAngles, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"setNumPolarAngles(const int num_polar)  \n"
		"\n"
		"Set the number of polar angles to initialize.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* num_polar :  \n"
		"    the number of polar angles  \n"
		"\n"
		""},
	 { (char *)"EqualAnglePolarQuad_initialize", _wrap_EqualAnglePolarQuad_initialize, METH_VARARGS, (char *)"\n"
		"\n"
		"initialize()  \n"
		"\n"
		"Routine to initialize the polar quadrature.  \n"
		"\n"
		"This routine generates the sine thetas and weights.  \n"
		"\n"
		""},
	 { (char *)"EqualAnglePolarQuad_precomputeWeights", (PyCFunction) _wrap_EqualAnglePolarQuad_precomputeWeights, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"precomputeWeights(bool solve_3D)  \n"
		"\n"
		"Calculates total weights for every azimuthal/polar combination based on the equal angle\n"
		"polar quadrature.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* solve_3D :  \n"
		"    Boolean indicating whether this is a 3D quadrature  \n"
		"\n"
		""},
	 { (char *)"delete_EqualAnglePolarQuad", _wrap_delete_EqualAnglePolarQuad, METH_VARARGS, NULL},
	 { (char *)"EqualAnglePolarQuad_swigregister", EqualAnglePolarQuad_swigregister, METH_VARARGS, NULL},
	 { (char *)"FORWARD_swigconstant", FORWARD_swigconstant, METH_VARARGS, NULL},
	 { (char *)"ADJOINT_swigconstant", ADJOINT_swigconstant, METH_VARARGS, NULL},
	 { (char *)"SCALAR_FLUX_swigconstant", SCALAR_FLUX_swigconstant, METH_VARARGS, NULL},
	 { (char *)"FISSION_SOURCE_swigconstant", FISSION_SOURCE_swigconstant, METH_VARARGS, NULL},
	 { (char *)"TOTAL_SOURCE_swigconstant", TOTAL_SOURCE_swigconstant, METH_VARARGS, NULL},
	 { (char *)"delete_Solver", _wrap_delete_Solver, METH_VARARGS, (char *)"\n"
		"\n"
		"~Solver()  \n"
		"\n"
		"Destructor deletes arrays of boundary angular fluxes, scalar fluxes and sources for each\n"
		"FSR and energy group.  \n"
		"\n"
		"Deallocates memory for all arrays allocated for the Solver, including fluxes, sources,\n"
		"quadrature weights, and exponential linear interpolation table.  \n"
		"\n"
		""},
	 { (char *)"Solver_setGeometry", (PyCFunction) _wrap_Solver_setGeometry, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"setGeometry(Geometry *geometry)  \n"
		"\n"
		"Sets the Geometry for the Solver.  \n"
		"\n"
		"This is a private setter method for the Solver and is not intended to be called by the\n"
		"user.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* geometry :  \n"
		"    a pointer to a Geometry object  \n"
		"\n"
		""},
	 { (char *)"Solver_getGeometry", _wrap_Solver_getGeometry, METH_VARARGS, (char *)"\n"
		"\n"
		"getGeometry() -> Geometry *  \n"
		"\n"
		"Returns a pointer to the Geometry.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"a pointer to the Geometry  \n"
		"\n"
		""},
	 { (char *)"Solver_getTrackGenerator", _wrap_Solver_getTrackGenerator, METH_VARARGS, (char *)"\n"
		"\n"
		"getTrackGenerator() -> TrackGenerator *  \n"
		"\n"
		"Returns a pointer to the TrackGenerator.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"a pointer to the TrackGenerator  \n"
		"\n"
		""},
	 { (char *)"Solver_getFSRVolume", (PyCFunction) _wrap_Solver_getFSRVolume, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"getFSRVolume(int fsr_id) -> FP_PRECISION  \n"
		"\n"
		"Returns the calculated volume for a flat source region.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* fsr_id :  \n"
		"    the flat source region ID of interest  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the flat source region volume  \n"
		"\n"
		""},
	 { (char *)"Solver_getNumPolarAngles", _wrap_Solver_getNumPolarAngles, METH_VARARGS, (char *)"\n"
		"\n"
		"getNumPolarAngles() -> int  \n"
		"\n"
		"Returns the number of angles used for the polar quadrature.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the number of polar angles  \n"
		"\n"
		""},
	 { (char *)"Solver_getNumIterations", _wrap_Solver_getNumIterations, METH_VARARGS, (char *)"\n"
		"\n"
		"getNumIterations() -> int  \n"
		"\n"
		"Returns the number of source iterations to converge the source.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the number of iterations  \n"
		"\n"
		""},
	 { (char *)"Solver_getTotalTime", _wrap_Solver_getTotalTime, METH_VARARGS, (char *)"\n"
		"\n"
		"getTotalTime() -> double  \n"
		"\n"
		"Returns the total time to converge the source (seconds).  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the time to converge the source (seconds)  \n"
		"\n"
		""},
	 { (char *)"Solver_getKeff", _wrap_Solver_getKeff, METH_VARARGS, (char *)"\n"
		"\n"
		"getKeff() -> FP_PRECISION  \n"
		"\n"
		"Returns the converged eigenvalue $ k_{eff} $.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the converged eigenvalue $ k_{eff} $  \n"
		"\n"
		""},
	 { (char *)"Solver_getConvergenceThreshold", _wrap_Solver_getConvergenceThreshold, METH_VARARGS, (char *)"\n"
		"\n"
		"getConvergenceThreshold() -> FP_PRECISION  \n"
		"\n"
		"Returns the threshold for source/flux convergence.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the threshold for source/flux convergence  \n"
		"\n"
		""},
	 { (char *)"Solver_getMaxOpticalLength", _wrap_Solver_getMaxOpticalLength, METH_VARARGS, (char *)"\n"
		"\n"
		"getMaxOpticalLength() -> FP_PRECISION  \n"
		"\n"
		"Get the maximum allowable optical length for a track segment.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"The max optical length  \n"
		"\n"
		""},
	 { (char *)"Solver_isUsingDoublePrecision", _wrap_Solver_isUsingDoublePrecision, METH_VARARGS, (char *)"\n"
		"\n"
		"isUsingDoublePrecision() -> bool  \n"
		"\n"
		"Returns whether the solver is using double floating point precision.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"true if using double precision float point arithmetic  \n"
		"\n"
		""},
	 { (char *)"Solver_isUsingExponentialInterpolation", _wrap_Solver_isUsingExponentialInterpolation, METH_VARARGS, (char *)"\n"
		"\n"
		"isUsingExponentialInterpolation() -> bool  \n"
		"\n"
		"Returns whether the Solver uses linear interpolation to compute exponentials.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"true if using linear interpolation to compute exponentials  \n"
		"\n"
		""},
	 { (char *)"Solver_getFSRSource", (PyCFunction) _wrap_Solver_getFSRSource, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"getFSRSource(int fsr_id, int group) -> FP_PRECISION  \n"
		"\n"
		"Returns the source for some energy group for a flat source region.  \n"
		"\n"
		"This is a helper routine used by the openmoc.process module.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* fsr_id :  \n"
		"    the ID for the FSR of interest  \n"
		"* group :  \n"
		"    the energy group of interest  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the flat source region source  \n"
		"\n"
		""},
	 { (char *)"Solver_getFlux", (PyCFunction) _wrap_Solver_getFlux, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"getFlux(int fsr_id, int group) -> FP_PRECISION  \n"
		"\n"
		"Returns the scalar flux for some FSR and energy group.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* fsr_id :  \n"
		"    the ID for the FSR of interest  \n"
		"* group :  \n"
		"    the energy group of interest  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the FSR scalar flux  \n"
		"\n"
		""},
	 { (char *)"Solver_getFluxes", (PyCFunction) _wrap_Solver_getFluxes, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"getFluxes(FP_PRECISION *out_fluxes, int num_fluxes)=0  \n"
		"\n"
		""},
	 { (char *)"Solver_getBoundaryFlux", (PyCFunction) _wrap_Solver_getBoundaryFlux, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Solver_setTrackGenerator", (PyCFunction) _wrap_Solver_setTrackGenerator, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"setTrackGenerator(TrackGenerator *track_generator)  \n"
		"\n"
		"Sets the Solver's TrackGenerator with characteristic Tracks.  \n"
		"\n"
		"The TrackGenerator must already have generated Tracks and have used ray tracing to\n"
		"segmentize them across the Geometry. This should be initated in Python prior to assigning\n"
		"the TrackGenerator to the Solver:  \n"
		"\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* track_generator :  \n"
		"    a pointer to a TrackGenerator object  \n"
		"\n"
		""},
	 { (char *)"Solver_setConvergenceThreshold", (PyCFunction) _wrap_Solver_setConvergenceThreshold, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"setConvergenceThreshold(FP_PRECISION threshold)  \n"
		"\n"
		"Sets the threshold for source/flux convergence.  \n"
		"\n"
		"The default threshold for convergence is 1E-5.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* source_thresh :  \n"
		"    the threshold for source/flux convergence  \n"
		"\n"
		""},
	 { (char *)"Solver_setFluxes", (PyCFunction) _wrap_Solver_setFluxes, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"setFluxes(FP_PRECISION *in_fluxes, int num_fluxes)=0  \n"
		"\n"
		""},
	 { (char *)"Solver_setFixedSourceByFSR", (PyCFunction) _wrap_Solver_setFixedSourceByFSR, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"setFixedSourceByFSR(int fsr_id, int group, FP_PRECISION source)  \n"
		"\n"
		"Assign a fixed source for a flat source region and energy group.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* fsr_id :  \n"
		"    the flat source region ID  \n"
		"* group :  \n"
		"    the energy group  \n"
		"* source :  \n"
		"    the volume-averaged source in this group  \n"
		"\n"
		""},
	 { (char *)"Solver_setFixedSourceByCell", (PyCFunction) _wrap_Solver_setFixedSourceByCell, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"setFixedSourceByCell(Cell *cell, int group, FP_PRECISION source)  \n"
		"\n"
		"Assign a fixed source for a Cell and energy group.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* cell :  \n"
		"    the Cell of interest  \n"
		"* group :  \n"
		"    the energy group  \n"
		"* source :  \n"
		"    the volume-averaged source in this group  \n"
		"\n"
		""},
	 { (char *)"Solver_setFixedSourceByMaterial", (PyCFunction) _wrap_Solver_setFixedSourceByMaterial, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"setFixedSourceByMaterial(Material *material, int group, FP_PRECISION source)  \n"
		"\n"
		"Assign a fixed source for a Material and energy group.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* material :  \n"
		"    the Material of interest  \n"
		"* group :  \n"
		"    the energy group  \n"
		"* source :  \n"
		"    the volume-averaged source in this group  \n"
		"\n"
		""},
	 { (char *)"Solver_setMaxOpticalLength", (PyCFunction) _wrap_Solver_setMaxOpticalLength, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"setMaxOpticalLength(FP_PRECISION max_optical_length)  \n"
		"\n"
		"Set the maximum allowable optical length for a track segment.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* max_optical_length :  \n"
		"    The max optical length  \n"
		"\n"
		""},
	 { (char *)"Solver_setExpPrecision", (PyCFunction) _wrap_Solver_setExpPrecision, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"setExpPrecision(FP_PRECISION precision)  \n"
		"\n"
		"Set the precision, or maximum allowable approximation error, of the the exponential\n"
		"interpolation table.  \n"
		"\n"
		"By default, the precision is 1E-5 based on the analysis in Yamamoto's 2003 paper.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* precision :  \n"
		"    the precision of the exponential interpolation table,  \n"
		"\n"
		""},
	 { (char *)"Solver_useExponentialInterpolation", _wrap_Solver_useExponentialInterpolation, METH_VARARGS, (char *)"\n"
		"\n"
		"useExponentialInterpolation()  \n"
		"\n"
		"Informs the Solver to use linear interpolation to compute the exponential in the transport\n"
		"equation.  \n"
		"\n"
		""},
	 { (char *)"Solver_useExponentialIntrinsic", _wrap_Solver_useExponentialIntrinsic, METH_VARARGS, (char *)"\n"
		"\n"
		"useExponentialIntrinsic()  \n"
		"\n"
		"Informs the Solver to use the exponential intrinsic exp(...) function to compute the\n"
		"exponential in the transport equation.  \n"
		"\n"
		""},
	 { (char *)"Solver_initializeExpEvaluator", _wrap_Solver_initializeExpEvaluator, METH_VARARGS, (char *)"\n"
		"\n"
		"initializeExpEvaluator()  \n"
		"\n"
		"Initializes new ExpEvaluator object to compute exponentials.  \n"
		"\n"
		""},
	 { (char *)"Solver_initializeMaterials", (PyCFunction) _wrap_Solver_initializeMaterials, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"initializeMaterials(solverMode mode=FORWARD)  \n"
		"\n"
		"Initializes the Material fission matrices.  \n"
		"\n"
		"In an adjoint calculation, this routine will transpose the scattering and fission matrices\n"
		"in each material.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* mode :  \n"
		"    the solution type (FORWARD or ADJOINT)  \n"
		"\n"
		""},
	 { (char *)"Solver_initializeFSRs", _wrap_Solver_initializeFSRs, METH_VARARGS, (char *)"\n"
		"\n"
		"initializeFSRs()  \n"
		"\n"
		"Initializes the FSR volumes and Materials array.  \n"
		"\n"
		"This method assigns each FSR a unique, monotonically increasing ID, sets the Material for\n"
		"each FSR, and assigns a volume based on the cumulative length of all of the segments\n"
		"inside the FSR.  \n"
		"\n"
		""},
	 { (char *)"Solver_countFissionableFSRs", _wrap_Solver_countFissionableFSRs, METH_VARARGS, (char *)"\n"
		"\n"
		"countFissionableFSRs()  \n"
		"\n"
		"Counts the number of fissionable flat source regions.  \n"
		"\n"
		"This routine is used by the Solver::computeEigenvalue(...) routine which uses the number\n"
		"of fissionable FSRs to normalize the residual on the fission source distribution.  \n"
		"\n"
		""},
	 { (char *)"Solver_initializeFixedSources", _wrap_Solver_initializeFixedSources, METH_VARARGS, (char *)"\n"
		"\n"
		"initializeFixedSources()  \n"
		"\n"
		"Assigns fixed sources assigned by Cell, Material to FSRs.  \n"
		"\n"
		"Fixed sources assigned by Material  \n"
		"\n"
		""},
	 { (char *)"Solver_initializeCmfd", _wrap_Solver_initializeCmfd, METH_VARARGS, (char *)"\n"
		"\n"
		"initializeCmfd()  \n"
		"\n"
		"Initializes a Cmfd object for acceleratiion prior to source iteration.  \n"
		"\n"
		"Instantiates a dummy Cmfd object if one was not assigned to the Solver by the user and\n"
		"initializes FSRs, materials, fluxes and the Mesh object. This method is for internal use\n"
		"only and should not be called directly by the user.  \n"
		"\n"
		""},
	 { (char *)"Solver_resetMaterials", (PyCFunction) _wrap_Solver_resetMaterials, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"resetMaterials(solverMode mode=FORWARD)  \n"
		"\n"
		"Returns the Material data to its original state.  \n"
		"\n"
		"In an adjoint calculation, the scattering and fission matrices in each material are\n"
		"transposed during initialization. This routine returns both matrices to their original\n"
		"(FORWARD) state at the end of a calculation.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* mode :  \n"
		"    the solution type (FORWARD or ADJOINT)  \n"
		"\n"
		""},
	 { (char *)"Solver_fissionTransportSweep", _wrap_Solver_fissionTransportSweep, METH_VARARGS, (char *)"\n"
		"\n"
		"fissionTransportSweep()  \n"
		"\n"
		"This method performs one transport sweep using the fission source.  \n"
		"\n"
		"This is a helper routine used for Krylov subspace methods.  \n"
		"\n"
		""},
	 { (char *)"Solver_scatterTransportSweep", _wrap_Solver_scatterTransportSweep, METH_VARARGS, (char *)"\n"
		"\n"
		"scatterTransportSweep()  \n"
		"\n"
		"This method performs one transport sweep using the scatter source.  \n"
		"\n"
		"This is a helper routine used for Krylov subspace methods.  \n"
		"\n"
		""},
	 { (char *)"Solver_initializeFluxArrays", _wrap_Solver_initializeFluxArrays, METH_VARARGS, (char *)"\n"
		"\n"
		"initializeFluxArrays()=0  \n"
		"\n"
		"Initializes Track boundary angular and FSR scalar flux arrays.  \n"
		"\n"
		""},
	 { (char *)"Solver_initializeSourceArrays", _wrap_Solver_initializeSourceArrays, METH_VARARGS, (char *)"\n"
		"\n"
		"initializeSourceArrays()=0  \n"
		"\n"
		"Allocates memory for FSR source arrays.  \n"
		"\n"
		""},
	 { (char *)"Solver_zeroTrackFluxes", _wrap_Solver_zeroTrackFluxes, METH_VARARGS, (char *)"\n"
		"\n"
		"zeroTrackFluxes()=0  \n"
		"\n"
		"Zero each Track's boundary fluxes for each energy group and polar angle in the \"forward\"\n"
		"and \"reverse\" directions.  \n"
		"\n"
		""},
	 { (char *)"Solver_flattenFSRFluxes", (PyCFunction) _wrap_Solver_flattenFSRFluxes, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"flattenFSRFluxes(FP_PRECISION value)=0  \n"
		"\n"
		"Set the scalar flux for each FSR and energy group to some value.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* value :  \n"
		"    the value to assign to each FSR scalar flux  \n"
		"\n"
		""},
	 { (char *)"Solver_storeFSRFluxes", _wrap_Solver_storeFSRFluxes, METH_VARARGS, (char *)"\n"
		"\n"
		"storeFSRFluxes()=0  \n"
		"\n"
		"Stores the current scalar fluxes in the old scalar flux array.  \n"
		"\n"
		""},
	 { (char *)"Solver_normalizeFluxes", _wrap_Solver_normalizeFluxes, METH_VARARGS, (char *)"\n"
		"\n"
		"normalizeFluxes()=0  \n"
		"\n"
		"Normalizes all FSR scalar fluxes and Track boundary angular fluxes to the total fission\n"
		"source (times $ \\nu $).  \n"
		"\n"
		""},
	 { (char *)"Solver_computeFSRSources", _wrap_Solver_computeFSRSources, METH_VARARGS, (char *)"\n"
		"\n"
		"computeFSRSources()=0  \n"
		"\n"
		"Computes the total source (fission, scattering, fixed) for each FSR and energy group.  \n"
		"\n"
		""},
	 { (char *)"Solver_computeFSRFissionSources", _wrap_Solver_computeFSRFissionSources, METH_VARARGS, (char *)"\n"
		"\n"
		"computeFSRFissionSources()=0  \n"
		"\n"
		"Computes the total fission source for each FSR and energy group.  \n"
		"\n"
		""},
	 { (char *)"Solver_computeFSRScatterSources", _wrap_Solver_computeFSRScatterSources, METH_VARARGS, (char *)"\n"
		"\n"
		"computeFSRScatterSources()=0  \n"
		"\n"
		"Computes the total scattering source for each FSR and energy group.  \n"
		"\n"
		""},
	 { (char *)"Solver_computeResidual", (PyCFunction) _wrap_Solver_computeResidual, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"computeResidual(residualType res_type)=0 -> double  \n"
		"\n"
		"Computes the residual between successive flux/source iterations.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* res_type :  \n"
		"    the residual type (SCALAR_FLUX, FISSION_SOURCE, TOTAL_SOURCE)  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the total residual summed over FSRs and energy groups  \n"
		"\n"
		""},
	 { (char *)"Solver_computeKeff", _wrap_Solver_computeKeff, METH_VARARGS, (char *)"\n"
		"\n"
		"computeKeff()=0  \n"
		"\n"
		"Compute $ k_{eff} $ from successive fission sources.  \n"
		"\n"
		""},
	 { (char *)"Solver_addSourceToScalarFlux", _wrap_Solver_addSourceToScalarFlux, METH_VARARGS, (char *)"\n"
		"\n"
		"addSourceToScalarFlux()=0  \n"
		"\n"
		"Add the source term contribution in the transport equation to the FSR scalar flux.  \n"
		"\n"
		""},
	 { (char *)"Solver_transportSweep", _wrap_Solver_transportSweep, METH_VARARGS, (char *)"\n"
		"\n"
		"transportSweep()=0  \n"
		"\n"
		"This method performs one transport swep.  \n"
		"\n"
		""},
	 { (char *)"Solver_computeFlux", (PyCFunction) _wrap_Solver_computeFlux, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"computeFlux(int max_iters=1000, solverMode mode=FORWARD, bool only_fixed_source=true)  \n"
		"\n"
		"Computes the scalar flux distribution by performing a series of transport sweeps.  \n"
		"\n"
		"This is the main method exposed to the user through the Python interface to compute the\n"
		"scalar flux distribution, e.g., for a fixed source calculation. This routine makes an\n"
		"initial guess for scalar and boundary fluxes and performs transport sweep until\n"
		"convergence.  \n"
		"\n"
		"By default, this method will perform a maximum of 1000 transport sweeps with a 1E-5\n"
		"threshold on the average FSR scalar flux. These values may be freely modified by the user\n"
		"at runtime.  \n"
		"\n"
		"The only_fixed_source runtime parameter may be used to control the type of source\n"
		"distribution used in the calculation. By default, this paramter is true and only the fixed\n"
		"sources specified by the user will be considered. Alternatively, when the parameter is\n"
		"false, the source will be computed as the scattering and fission sources resulting from a\n"
		"previously computed flux distribution (e.g., an eigenvalue calculation) in addition to any\n"
		"user-defined fixed sources.  \n"
		"\n"
		"This method may be called by the user to compute the scalar flux for a fixed source\n"
		"distribution from Python as follows:  \n"
		"\n"
		"\n"
		"\n"
		"         Alternatively, as described above, this method may be called by\n"
		"         the user in Python to compute the flux from a superposition of\n"
		"         fixed and / or eigenvalue sources as follows:  \n"
		"\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* max_iters :  \n"
		"    the maximum number of source iterations to allow  \n"
		"* mode :  \n"
		"    the solution type (FORWARD or ADJOINT)  \n"
		"* only_fixed_source :  \n"
		"    use only fixed sources (true by default)  \n"
		"\n"
		""},
	 { (char *)"Solver_computeSource", (PyCFunction) _wrap_Solver_computeSource, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"computeSource(int max_iters=1000, solverMode mode=FORWARD, double k_eff=1.0, residualType\n"
		"    res_type=TOTAL_SOURCE)  \n"
		"\n"
		"Computes the total source distribution by performing a series of transport sweep and\n"
		"source updates.  \n"
		"\n"
		"This is the main method exposed to the user through the Python interface to compute the\n"
		"source distribution, e.g., for a fixed and/or external source calculation. This routine\n"
		"makes an initial guess for the scalar and boundary fluxes and performs transport sweeps\n"
		"and source updates until convergence.  \n"
		"\n"
		"By default, this method will perform a maximum of 1000 transport sweeps with a 1E-5\n"
		"threshold on the integrated FSR total source. These values may be freely modified by the\n"
		"user at runtime.  \n"
		"\n"
		"The k_eff parameter may be used for fixed source calculations with fissionable material\n"
		"(e.g., start-up in a reactor from a fixed external source). In this case, the user must\n"
		"\"guess\" the critical eigenvalue to be be used to scale the fission source.  \n"
		"\n"
		"The res_type parameter may be used to control the convergence criterion - SCALAR_FLUX,\n"
		"TOTAL_SOURCE (default) and FISSION_SOURCE are all supported options in OpenMOC at this\n"
		"time.  \n"
		"\n"
		"This method may be called by the user from Python as follows:  \n"
		"\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* max_iters :  \n"
		"    the maximum number of source iterations to allow  \n"
		"* mode :  \n"
		"    the solution type (FORWARD or ADJOINT)  \n"
		"* k_eff :  \n"
		"    the sub/super-critical eigenvalue (default 1.0)  \n"
		"* res_type :  \n"
		"    the type of residual used for the convergence criterion  \n"
		"\n"
		""},
	 { (char *)"Solver_computeEigenvalue", (PyCFunction) _wrap_Solver_computeEigenvalue, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"computeEigenvalue(int max_iters=1000, solverMode mode=FORWARD, residualType\n"
		"    res_type=FISSION_SOURCE)  \n"
		"\n"
		"Computes keff by performing a series of transport sweep and source updates.  \n"
		"\n"
		"This is the main method exposed to the user through the Python interface to perform an\n"
		"eigenvalue calculation. The method makes an initial guess for the scalar and boundary\n"
		"fluxes and performs transport sweeps and source updates until convergence.  \n"
		"\n"
		"By default, this method will perform a maximum of 1000 transport sweeps with a 1E-5\n"
		"threshold on the integrated FSR fission source. These values may be freely modified by the\n"
		"user at runtime.  \n"
		"\n"
		"The res_type parameter may be used to control the convergence criterion - SCALAR_FLUX,\n"
		"TOTAL_SOURCE and FISSION_SOURCE (default) are all supported options in OpenMOC at this\n"
		"time.  \n"
		"\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* max_iters :  \n"
		"    the maximum number of source iterations to allow  \n"
		"* mode :  \n"
		"    the solution type (FORWARD or ADJOINT)  \n"
		"* res_type :  \n"
		"    the type of residual used for the convergence criterion  \n"
		"\n"
		""},
	 { (char *)"Solver_computeFSRFissionRates", (PyCFunction) _wrap_Solver_computeFSRFissionRates, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"computeFSRFissionRates(double *fission_rates, int num_FSRs)=0  \n"
		"\n"
		"Computes the volume-weighted, energy integrated fission rate in each FSR and stores them\n"
		"in an array indexed by FSR ID.  \n"
		"\n"
		"This is a helper method for SWIG to allow users to retrieve FSR fission rates as a NumPy\n"
		"array. An example of how this method can be called from Python is as follows:  \n"
		"\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* fission_rates :  \n"
		"    an array to store the fission rates (implicitly passed in as a NumPy array from\n"
		"    Python)  \n"
		"* num_FSRs :  \n"
		"    the number of FSRs passed in from Python  \n"
		"\n"
		""},
	 { (char *)"Solver_printTimerReport", _wrap_Solver_printTimerReport, METH_VARARGS, (char *)"\n"
		"\n"
		"printTimerReport()  \n"
		"\n"
		"Prints a report of the timing statistics to the console.  \n"
		"\n"
		""},
	 { (char *)"Solver_swigregister", Solver_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_CPUSolver", (PyCFunction) _wrap_new_CPUSolver, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"CPUSolver(TrackGenerator *track_generator=NULL)  \n"
		"\n"
		"Constructor initializes array pointers for Tracks and Materials.  \n"
		"\n"
		"The constructor retrieves the number of energy groups and FSRs and azimuthal angles from\n"
		"the Geometry and TrackGenerator if passed in as parameters by the user. The constructor\n"
		"initalizes the number of OpenMP threads to a default of 1.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* track_generator :  \n"
		"    an optional pointer to the TrackGenerator  \n"
		"\n"
		""},
	 { (char *)"CPUSolver_tallyScalarFlux", (PyCFunction) _wrap_CPUSolver_tallyScalarFlux, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"tallyScalarFlux(dev_segment *curr_segment, int azim_index, int energy_group, dev_material\n"
		"    *materials, FP_PRECISION *track_flux, FP_PRECISION *reduced_sources, FP_PRECISION\n"
		"    *scalar_flux) -> __device__ void  \n"
		"\n"
		"Computes the contribution to the FSR scalar flux from a Track segment in a single energy\n"
		"group.  \n"
		"\n"
		"This method integrates the angular flux for a Track segment across energy groups and polar\n"
		"angles, and tallies it into the FSR scalar flux, and updates the Track's angular flux.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* curr_segment :  \n"
		"    a pointer to the Track segment of interest  \n"
		"* azim_index :  \n"
		"    a pointer to the azimuthal angle index for this segment  \n"
		"* energy_group :  \n"
		"    the energy group of interest  \n"
		"* materials :  \n"
		"    the array of dev_material pointers  \n"
		"* track_flux :  \n"
		"    a pointer to the Track's angular flux  \n"
		"* reduced_sources :  \n"
		"    the array of FSR sources / total xs  \n"
		"* scalar_flux :  \n"
		"    the array of FSR scalar fluxes  \n"
		"\n"
		""},
	 { (char *)"CPUSolver_tallyCurrent", (PyCFunction) _wrap_CPUSolver_tallyCurrent, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"CPUSolver_transferBoundaryFlux", (PyCFunction) _wrap_CPUSolver_transferBoundaryFlux, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"transferBoundaryFlux(dev_track *curr_track, int azim_index, FP_PRECISION *track_flux,\n"
		"    FP_PRECISION *boundary_flux, int energy_angle_index, bool direction) -> __device__\n"
		"    void  \n"
		"\n"
		"Updates the boundary flux for a Track given boundary conditions.  \n"
		"\n"
		"For reflective and periodic boundary conditions, the outgoing boundary flux for the Track\n"
		"is given to the corresponding reflecting or periodic Track. For vacuum boundary\n"
		"conditions, the outgoing flux is tallied as leakage. Note: Only one energy group is\n"
		"transferred by this routine.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* curr_track :  \n"
		"    a pointer to the Track of interest  \n"
		"* azim_index :  \n"
		"    a pointer to the azimuthal angle index for this segment  \n"
		"* track_flux :  \n"
		"    an array of the outgoing Track flux  \n"
		"* boundary_flux :  \n"
		"    an array of all angular fluxes  \n"
		"* weights :  \n"
		"    an array of Quadrature weights  \n"
		"* energy_angle_index :  \n"
		"    the energy group index  \n"
		"* direction :  \n"
		"    the Track direction (forward - true, reverse - false)  \n"
		"\n"
		""},
	 { (char *)"CPUSolver_getNumThreads", _wrap_CPUSolver_getNumThreads, METH_VARARGS, (char *)"\n"
		"\n"
		"getNumThreads() -> int  \n"
		"\n"
		"Returns the number of shared memory OpenMP threads in use.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the number of threads  \n"
		"\n"
		""},
	 { (char *)"CPUSolver_getFluxes", (PyCFunction) _wrap_CPUSolver_getFluxes, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"getFluxes(FP_PRECISION *out_fluxes, int num_fluxes)  \n"
		"\n"
		"Fills an array with the scalar fluxes.  \n"
		"\n"
		"This class method is a helper routine called by the OpenMOC Python \"openmoc.krylov\"\n"
		"module for Krylov subspace methods. Although this method appears to require two arguments,\n"
		"in reality it only requires one due to SWIG and would be called from within Python as\n"
		"follows:  \n"
		"\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* fluxes :  \n"
		"    an array of FSR scalar fluxes in each energy group  \n"
		"* num_fluxes :  \n"
		"    the total number of FSR flux values  \n"
		"\n"
		""},
	 { (char *)"CPUSolver_setNumThreads", (PyCFunction) _wrap_CPUSolver_setNumThreads, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"setNumThreads(int num_threads)  \n"
		"\n"
		"Sets the number of shared memory OpenMP threads to use (>0).  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* num_threads :  \n"
		"    the number of threads  \n"
		"\n"
		""},
	 { (char *)"CPUSolver_setFluxes", (PyCFunction) _wrap_CPUSolver_setFluxes, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"setFluxes(FP_PRECISION *in_fluxes, int num_fluxes)  \n"
		"\n"
		"Set the flux array for use in transport sweep source calculations.  This is a helper\n"
		"method for the checkpoint restart capabilities, as well as the IRAMSolver in the\n"
		"openmoc.krylov submodule. This routine may be used as follows from within Python:  \n"
		"\n"
		"\n"
		"\n"
		"         NOTE: This routine stores a pointer to the fluxes for the Solver\n"
		"         to use during transport sweeps and other calculations. Hence, the\n"
		"         flux array pointer is shared between NumPy and the Solver.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* in_fluxes :  \n"
		"    an array with the fluxes to use  \n"
		"* num_fluxes :  \n"
		"    the number of flux values (# groups x # FSRs)  \n"
		"\n"
		""},
	 { (char *)"CPUSolver_initializeFluxArrays", _wrap_CPUSolver_initializeFluxArrays, METH_VARARGS, (char *)"\n"
		"\n"
		"initializeFluxArrays()  \n"
		"\n"
		"Allocates memory for Track boundary angular and FSR scalar fluxes.  \n"
		"\n"
		"Deletes memory for old flux arrays if they were allocated for a previous simulation.  \n"
		"\n"
		""},
	 { (char *)"CPUSolver_initializeSourceArrays", _wrap_CPUSolver_initializeSourceArrays, METH_VARARGS, (char *)"\n"
		"\n"
		"initializeSourceArrays()  \n"
		"\n"
		"Allocates memory for FSR source arrays.  \n"
		"\n"
		"Deletes memory for old source arrays if they were allocated for a previous simulation.  \n"
		"\n"
		""},
	 { (char *)"CPUSolver_initializeFixedSources", _wrap_CPUSolver_initializeFixedSources, METH_VARARGS, (char *)"\n"
		"\n"
		"initializeFixedSources()  \n"
		"\n"
		"Populates array of fixed sources assigned by FSR.  \n"
		"\n"
		""},
	 { (char *)"CPUSolver_initializeFSRs", _wrap_CPUSolver_initializeFSRs, METH_VARARGS, (char *)"\n"
		"\n"
		"initializeFSRs()  \n"
		"\n"
		"Initializes the FSR volumes and Materials array.  \n"
		"\n"
		"This method gets an array of OpenMP mutual exclusion locks for each FSR for use in the\n"
		"transport sweep algorithm.  \n"
		"\n"
		""},
	 { (char *)"CPUSolver_zeroTrackFluxes", _wrap_CPUSolver_zeroTrackFluxes, METH_VARARGS, (char *)"\n"
		"\n"
		"zeroTrackFluxes()  \n"
		"\n"
		"Zero each Track's boundary fluxes for each energy group and polar angle in the \"forward\"\n"
		"and \"reverse\" directions.  \n"
		"\n"
		""},
	 { (char *)"CPUSolver_copyBoundaryFluxes", _wrap_CPUSolver_copyBoundaryFluxes, METH_VARARGS, NULL},
	 { (char *)"CPUSolver_flattenFSRFluxes", (PyCFunction) _wrap_CPUSolver_flattenFSRFluxes, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"flattenFSRFluxes(FP_PRECISION value)  \n"
		"\n"
		"Set the scalar flux for each FSR and energy group to some value.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* value :  \n"
		"    the value to assign to each FSR scalar flux  \n"
		"\n"
		""},
	 { (char *)"CPUSolver_storeFSRFluxes", _wrap_CPUSolver_storeFSRFluxes, METH_VARARGS, (char *)"\n"
		"\n"
		"storeFSRFluxes()  \n"
		"\n"
		"Stores the FSR scalar fluxes in the old scalar flux array.  \n"
		"\n"
		""},
	 { (char *)"CPUSolver_normalizeFluxes", _wrap_CPUSolver_normalizeFluxes, METH_VARARGS, (char *)"\n"
		"\n"
		"normalizeFluxes()  \n"
		"\n"
		"Normalizes all FSR scalar fluxes and Track boundary angular fluxes to the total fission\n"
		"source (times $ \\nu $).  \n"
		"\n"
		""},
	 { (char *)"CPUSolver_computeFSRSources", _wrap_CPUSolver_computeFSRSources, METH_VARARGS, (char *)"\n"
		"\n"
		"computeFSRSources()  \n"
		"\n"
		"Computes the total source (fission, scattering, fixed) in each FSR.  \n"
		"\n"
		"This method computes the total source in each FSR based on this iteration's current\n"
		"approximation to the scalar flux.  \n"
		"\n"
		""},
	 { (char *)"CPUSolver_computeFSRFissionSources", _wrap_CPUSolver_computeFSRFissionSources, METH_VARARGS, (char *)"\n"
		"\n"
		"computeFSRFissionSources()  \n"
		"\n"
		"Computes the total fission source in each FSR.  \n"
		"\n"
		"This method is a helper routine for the openmoc.krylov submodule.  \n"
		"\n"
		""},
	 { (char *)"CPUSolver_computeFSRScatterSources", _wrap_CPUSolver_computeFSRScatterSources, METH_VARARGS, (char *)"\n"
		"\n"
		"computeFSRScatterSources()  \n"
		"\n"
		"Computes the total scattering source in each FSR.  \n"
		"\n"
		"This method is a helper routine for the openmoc.krylov submodule.  \n"
		"\n"
		""},
	 { (char *)"CPUSolver_transportSweep", _wrap_CPUSolver_transportSweep, METH_VARARGS, (char *)"\n"
		"\n"
		"transportSweep()  \n"
		"\n"
		"This method performs one transport sweep of all azimuthal angles, Tracks, Track segments,\n"
		"polar angles and energy groups.  \n"
		"\n"
		"The method integrates the flux along each Track and updates the boundary fluxes for the\n"
		"corresponding output Track, while updating the scalar flux in each flat source region.  \n"
		"\n"
		""},
	 { (char *)"CPUSolver_addSourceToScalarFlux", _wrap_CPUSolver_addSourceToScalarFlux, METH_VARARGS, (char *)"\n"
		"\n"
		"addSourceToScalarFlux()  \n"
		"\n"
		"Add the source term contribution in the transport equation to the FSR scalar flux.  \n"
		"\n"
		""},
	 { (char *)"CPUSolver_computeKeff", _wrap_CPUSolver_computeKeff, METH_VARARGS, (char *)"\n"
		"\n"
		"computeKeff()  \n"
		"\n"
		"Compute $ k_{eff} $ from successive fission sources.  \n"
		"\n"
		""},
	 { (char *)"CPUSolver_computeResidual", (PyCFunction) _wrap_CPUSolver_computeResidual, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"computeResidual(residualType res_type) -> double  \n"
		"\n"
		"Computes the residual between source/flux iterations.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* res_type :  \n"
		"    the type of residuals to compute (SCALAR_FLUX, FISSION_SOURCE, TOTAL_SOURCE)  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the average residual in each FSR  \n"
		"\n"
		""},
	 { (char *)"CPUSolver_computeFSRFissionRates", (PyCFunction) _wrap_CPUSolver_computeFSRFissionRates, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"computeFSRFissionRates(double *fission_rates, int num_FSRs)  \n"
		"\n"
		"Computes the volume-integrated, energy-integrated nu-fission rate in each FSR and stores\n"
		"them in an array indexed by FSR ID.  \n"
		"\n"
		"This is a helper method for SWIG to allow users to retrieve FSR nu-fission rates as a\n"
		"NumPy array. An example of how this method can be called from Python is as follows:  \n"
		"\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* fission_rates :  \n"
		"    an array to store the nu-fission rates (implicitly passed in as a NumPy array from\n"
		"    Python)  \n"
		"* num_FSRs :  \n"
		"    the number of FSRs passed in from Python  \n"
		"\n"
		""},
	 { (char *)"CPUSolver_initializePartialCurrentArrays", _wrap_CPUSolver_initializePartialCurrentArrays, METH_VARARGS, NULL},
	 { (char *)"CPUSolver_setNumSurfaces", (PyCFunction) _wrap_CPUSolver_setNumSurfaces, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"CPUSolver_setReferencePartialCurrents", (PyCFunction) _wrap_CPUSolver_setReferencePartialCurrents, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"CPUSolver_getReferencePartialCurrents", (PyCFunction) _wrap_CPUSolver_getReferencePartialCurrents, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"CPUSolver_getOngoingPartialCurrent", (PyCFunction) _wrap_CPUSolver_getOngoingPartialCurrent, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"CPUSolver_getAngularPartialCurrent", (PyCFunction) _wrap_CPUSolver_getAngularPartialCurrent, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"CPUSolver_resetOngoingPartialCurrentsArray", _wrap_CPUSolver_resetOngoingPartialCurrentsArray, METH_VARARGS, NULL},
	 { (char *)"delete_CPUSolver", _wrap_delete_CPUSolver, METH_VARARGS, NULL},
	 { (char *)"CPUSolver_swigregister", CPUSolver_swigregister, METH_VARARGS, NULL},
	 { (char *)"VACUUM_swigconstant", VACUUM_swigconstant, METH_VARARGS, NULL},
	 { (char *)"REFLECTIVE_swigconstant", REFLECTIVE_swigconstant, METH_VARARGS, NULL},
	 { (char *)"PERIODIC_swigconstant", PERIODIC_swigconstant, METH_VARARGS, NULL},
	 { (char *)"BOUNDARY_NONE_swigconstant", BOUNDARY_NONE_swigconstant, METH_VARARGS, NULL},
	 { (char *)"surface_id", _wrap_surface_id, METH_VARARGS, (char *)"\n"
		"\n"
		"surface_id() -> int  \n"
		"\n"
		"Returns an auto-generated unique surface ID.  \n"
		"\n"
		"This method is intended as a utility mehtod for user's writing OpenMOC input files. The\n"
		"method makes use of a static surface ID which is incremented each time the method is\n"
		"called to enable unique generation of monotonically increasing IDs. The method's first ID\n"
		"begins at 10000. Hence, user-defined surface IDs greater than or equal to 10000 are\n"
		"prohibited.  \n"
		"\n"
		""},
	 { (char *)"reset_surface_id", _wrap_reset_surface_id, METH_VARARGS, (char *)"\n"
		"\n"
		"reset_surface_id()  \n"
		"\n"
		"Resets the auto-generated unique Surface ID counter to 10000.  \n"
		"\n"
		""},
	 { (char *)"maximize_surface_id", (PyCFunction) _wrap_maximize_surface_id, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"maximize_surface_id(int surface_id)  \n"
		"\n"
		"Maximize the auto-generated unique Surface ID counter.  \n"
		"\n"
		"This method updates the auto-generated unique Surface ID counter if the input parameter is\n"
		"greater than the present value. This is useful for the OpenMC compatibility module to\n"
		"ensure that the auto-generated Surface IDs do not collide with those created in OpenMC.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* surface_id :  \n"
		"    the id assigned to the auto-generated counter  \n"
		"\n"
		""},
	 { (char *)"PLANE_swigconstant", PLANE_swigconstant, METH_VARARGS, NULL},
	 { (char *)"ZCYLINDER_swigconstant", ZCYLINDER_swigconstant, METH_VARARGS, NULL},
	 { (char *)"XPLANE_swigconstant", XPLANE_swigconstant, METH_VARARGS, NULL},
	 { (char *)"YPLANE_swigconstant", YPLANE_swigconstant, METH_VARARGS, NULL},
	 { (char *)"ZPLANE_swigconstant", ZPLANE_swigconstant, METH_VARARGS, NULL},
	 { (char *)"QUADRATIC_swigconstant", QUADRATIC_swigconstant, METH_VARARGS, NULL},
	 { (char *)"delete_Surface", _wrap_delete_Surface, METH_VARARGS, (char *)"\n"
		"\n"
		"~Surface()  \n"
		"\n"
		"Destructor.  \n"
		"\n"
		""},
	 { (char *)"Surface_getUid", _wrap_Surface_getUid, METH_VARARGS, (char *)"\n"
		"\n"
		"getUid() const  -> int  \n"
		"\n"
		"Return the Surface's unique ID.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the Surface's unique ID  \n"
		"\n"
		""},
	 { (char *)"Surface_getId", _wrap_Surface_getId, METH_VARARGS, (char *)"\n"
		"\n"
		"getId() const  -> int  \n"
		"\n"
		"Return the Surface's user-defined ID.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the Surface's user-defined ID  \n"
		"\n"
		""},
	 { (char *)"Surface_getName", _wrap_Surface_getName, METH_VARARGS, (char *)"\n"
		"\n"
		"getName() const  -> char *  \n"
		"\n"
		"Return the user-defined name of the Surface.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the Surface name  \n"
		"\n"
		""},
	 { (char *)"Surface_getSurfaceType", _wrap_Surface_getSurfaceType, METH_VARARGS, (char *)"\n"
		"\n"
		"getSurfaceType() -> surfaceType  \n"
		"\n"
		"Return the type of Surface (ie, XPLANE, ZCYLINDER, etc).  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the Surface type  \n"
		"\n"
		""},
	 { (char *)"Surface_getBoundaryType", _wrap_Surface_getBoundaryType, METH_VARARGS, (char *)"\n"
		"\n"
		"getBoundaryType() -> boundaryType  \n"
		"\n"
		"Returns the type of boundary conditions for this Surface (REFLECTIVE, VACUUM or\n"
		"BOUNDARY_NONE)  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the type of boundary condition type for this Surface  \n"
		"\n"
		""},
	 { (char *)"Surface_getMinX", (PyCFunction) _wrap_Surface_getMinX, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"getMinX(int halfspace)=0 -> double  \n"
		"\n"
		"Returns the minimum x value for one of this Surface's halfspaces.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* halfspace :  \n"
		"    the halfspace of the Surface to consider  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the minimum x value  \n"
		"\n"
		""},
	 { (char *)"Surface_getMaxX", (PyCFunction) _wrap_Surface_getMaxX, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"getMaxX(int halfspace)=0 -> double  \n"
		"\n"
		"Returns the maximum x value for one of this Surface's halfspaces.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* halfspace :  \n"
		"    the halfspace of the Surface to consider  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the maximum x value  \n"
		"\n"
		""},
	 { (char *)"Surface_getMinY", (PyCFunction) _wrap_Surface_getMinY, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"getMinY(int halfspace)=0 -> double  \n"
		"\n"
		"Returns the minimum y value for one of this Surface's halfspaces.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* halfspace :  \n"
		"    the halfspace of the Surface to consider  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the minimum y value  \n"
		"\n"
		""},
	 { (char *)"Surface_getMaxY", (PyCFunction) _wrap_Surface_getMaxY, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"getMaxY(int halfspace)=0 -> double  \n"
		"\n"
		"Returns the maximum y value for one of this Surface's halfspaces.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* halfspace :  \n"
		"    the halfspace of the Surface to consider  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the maximum y value  \n"
		"\n"
		""},
	 { (char *)"Surface_getMinZ", (PyCFunction) _wrap_Surface_getMinZ, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"getMinZ(int halfspace)=0 -> double  \n"
		"\n"
		"Returns the minimum z value for one of this Surface's halfspaces.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* halfspace :  \n"
		"    the halfspace of the Surface to consider  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the minimum z value  \n"
		"\n"
		""},
	 { (char *)"Surface_getMaxZ", (PyCFunction) _wrap_Surface_getMaxZ, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"getMaxZ(int halfspace)=0 -> double  \n"
		"\n"
		"Returns the maximum z value for one of this Surface's halfspaces.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* halfspace :  \n"
		"    the halfspace of the Surface to consider  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the maximum z value  \n"
		"\n"
		""},
	 { (char *)"Surface_setName", (PyCFunction) _wrap_Surface_setName, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"setName(const char *name)  \n"
		"\n"
		"Sets the name of the Surface.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* name :  \n"
		"    the Surface name string  \n"
		"\n"
		""},
	 { (char *)"Surface_setBoundaryType", (PyCFunction) _wrap_Surface_setBoundaryType, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"setBoundaryType(const boundaryType boundary_type)  \n"
		"\n"
		"Sets the boundary condition type (ie, VACUUM or REFLECTIVE) for this Surface.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* boundary_type :  \n"
		"    the boundary condition type for this Surface  \n"
		"\n"
		""},
	 { (char *)"Surface_addNeighborCell", (PyCFunction) _wrap_Surface_addNeighborCell, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"addNeighborCell(int halfspace, Cell *cell)  \n"
		"\n"
		"Adds a neighbor Cell to this Surface's collection of neighbors.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* halfspace :  \n"
		"    the +/-1 halfspace for the neighboring Cell  \n"
		"* cell :  \n"
		"    a pointer to the neighboring Cell  \n"
		"\n"
		""},
	 { (char *)"Surface_evaluate", (PyCFunction) _wrap_Surface_evaluate, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"evaluate(const Point *point) const =0 -> double  \n"
		"\n"
		"Evaluate a Point using the Surface's potential equation.  \n"
		"\n"
		"This method returns the values $ f(x,y) $ for the potential function $f$ representing this\n"
		"Surface.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* point :  \n"
		"    a pointer to the Soint of interest  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the value of Point in the Plane's potential equation.  \n"
		"\n"
		""},
	 { (char *)"Surface_intersection", (PyCFunction) _wrap_Surface_intersection, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"intersection(Point *point, double angle, Point *points)=0 -> int  \n"
		"\n"
		"Finds the intersection Point with this Surface from a given Point and trajectory defined\n"
		"by an angle.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* point :  \n"
		"    pointer to the Point of interest  \n"
		"* angle :  \n"
		"    the angle defining the trajectory in radians  \n"
		"* points :  \n"
		"    pointer to a Point to store the intersection Point  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the number of intersection Points (0 or 1)  \n"
		"\n"
		""},
	 { (char *)"Surface_isPointOnSurface", (PyCFunction) _wrap_Surface_isPointOnSurface, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"isPointOnSurface(Point *point) -> bool  \n"
		"\n"
		"Return true or false if a Point is on or off of a Surface.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* point :  \n"
		"    pointer to the Point of interest  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"on (true) or off (false) the Surface  \n"
		"\n"
		""},
	 { (char *)"Surface_isCoordOnSurface", (PyCFunction) _wrap_Surface_isCoordOnSurface, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"isCoordOnSurface(LocalCoords *coord) -> bool  \n"
		"\n"
		"Return true or false if a LocalCoord is on or off of a Surface.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* coord :  \n"
		"    pointer to the LocalCoord of interest  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"on (true) or off (false) the Surface  \n"
		"\n"
		""},
	 { (char *)"Surface_getMinDistance", (PyCFunction) _wrap_Surface_getMinDistance, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"getMinDistance(LocalCoords *coords) -> double  \n"
		"\n"
		"Finds the minimum distance to a Surface.  \n"
		"\n"
		"Finds the miniumum distance to a Surface from a LocalCoords with a trajectory defined by\n"
		"an angle to this Surface. If the trajectory will not intersect the Surface, returns\n"
		"INFINITY.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* coords :  \n"
		"    a pointer to a localcoords object  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the minimum distance to the Surface  \n"
		"\n"
		""},
	 { (char *)"Surface_toString", _wrap_Surface_toString, METH_VARARGS, (char *)"\n"
		"\n"
		"toString()=0 -> std::string  \n"
		"\n"
		"Converts this Surface's attributes to a character array.  \n"
		"\n"
		"The character array returned conatins the type of Surface (ie, PLANE) and the coefficients\n"
		"in the potential equation.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"a character array of this Surface's attributes  \n"
		"\n"
		""},
	 { (char *)"Surface_printString", _wrap_Surface_printString, METH_VARARGS, (char *)"\n"
		"\n"
		"printString()  \n"
		"\n"
		"Prints a string representation of all of the Surface's objects to the console.  \n"
		"\n"
		""},
	 { (char *)"Surface_swigregister", Surface_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Plane", (PyCFunction) _wrap_new_Plane, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"Plane(const double A, const double B, const double C, const double D, const int id=0,\n"
		"    const char *name=\"\")  \n"
		"\n"
		"Constructor.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* A :  \n"
		"    the first coefficient in $ A * x + B * y + C * z + D = 0 $  \n"
		"* B :  \n"
		"    the second coefficient in $ A * x + B * y + C * z + D = 0 $  \n"
		"* C :  \n"
		"    the third coefficient in $ A * x + B * y + C * z + D = 0 $  \n"
		"* D :  \n"
		"    the fourth coefficient in $ A * x + B * y + C * z + D = 0 $  \n"
		"* id :  \n"
		"    the optional Surface ID  \n"
		"* name :  \n"
		"    the optional name of the Surface  \n"
		"\n"
		""},
	 { (char *)"Plane_getMinX", (PyCFunction) _wrap_Plane_getMinX, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"getMinX(int halfspace) -> double  \n"
		"\n"
		"Returns the minimum x value of -INFINITY.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* halfspace :  \n"
		"    the halfspace of the Surface to consider  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the minimum x value of -INFINITY  \n"
		"\n"
		""},
	 { (char *)"Plane_getMaxX", (PyCFunction) _wrap_Plane_getMaxX, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"getMaxX(int halfspace) -> double  \n"
		"\n"
		"Returns the maximum x value of INFINITY.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* halfspace :  \n"
		"    the halfspace of the Surface to consider  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the maximum x value of INFINITY  \n"
		"\n"
		""},
	 { (char *)"Plane_getMinY", (PyCFunction) _wrap_Plane_getMinY, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"getMinY(int halfspace) -> double  \n"
		"\n"
		"Returns the minimum y value of -INFINITY.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* halfspace :  \n"
		"    the halfspace of the Surface to consider  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the minimum y value of -INFINITY  \n"
		"\n"
		""},
	 { (char *)"Plane_getMaxY", (PyCFunction) _wrap_Plane_getMaxY, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"getMaxY(int halfspace) -> double  \n"
		"\n"
		"Returns the maximum y value of INFINITY.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* halfspace :  \n"
		"    the halfspace of the Surface to consider  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the maximum y value of INFINITY  \n"
		"\n"
		""},
	 { (char *)"Plane_getMinZ", (PyCFunction) _wrap_Plane_getMinZ, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"getMinZ(int halfspace) -> double  \n"
		"\n"
		"Returns the minimum z value of -INFINITY.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* halfspace :  \n"
		"    the halfspace of the Surface to consider  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the minimum z value of -INFINITY  \n"
		"\n"
		""},
	 { (char *)"Plane_getMaxZ", (PyCFunction) _wrap_Plane_getMaxZ, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"getMaxZ(int halfspace) -> double  \n"
		"\n"
		"Returns the maximum z value of INFINITY.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* halfspace :  \n"
		"    the halfspace of the Surface to consider  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the maximum z value of INFINITY  \n"
		"\n"
		""},
	 { (char *)"Plane_getA", _wrap_Plane_getA, METH_VARARGS, (char *)"\n"
		"\n"
		"getA() -> double  \n"
		"\n"
		"Returns the A coefficient multiplying x in the surface equation.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the value for the A coefficient  \n"
		"\n"
		""},
	 { (char *)"Plane_getB", _wrap_Plane_getB, METH_VARARGS, (char *)"\n"
		"\n"
		"getB() -> double  \n"
		"\n"
		"Returns the B coefficient multiplying y in the surface equation.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the value for the B coefficient  \n"
		"\n"
		""},
	 { (char *)"Plane_getC", _wrap_Plane_getC, METH_VARARGS, (char *)"\n"
		"\n"
		"getC() -> double  \n"
		"\n"
		"Returns the C coefficient multiplying z in the surface equation.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the value for the C coefficient  \n"
		"\n"
		""},
	 { (char *)"Plane_getD", _wrap_Plane_getD, METH_VARARGS, (char *)"\n"
		"\n"
		"getD() -> double  \n"
		"\n"
		"Returns the D constant coefficient.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the value for the D coefficient  \n"
		"\n"
		""},
	 { (char *)"Plane_evaluate", (PyCFunction) _wrap_Plane_evaluate, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"evaluate(const Point *point) const  -> double  \n"
		"\n"
		"Evaluate a Point using the Plane's quadratic Surface equation.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* point :  \n"
		"    a pointer to the Point of interest  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the value of Point in the Plane's quadratic equation  \n"
		"\n"
		""},
	 { (char *)"Plane_intersection", (PyCFunction) _wrap_Plane_intersection, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"intersection(Point *point, double angle, Point *points) -> int  \n"
		"\n"
		"Finds the intersection Point with this Plane from a given Point and trajectory defined by\n"
		"an angle.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* point :  \n"
		"    pointer to the Point of interest  \n"
		"* angle :  \n"
		"    the angle defining the trajectory in radians  \n"
		"* points :  \n"
		"    pointer to a Point to store the intersection Point  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the number of intersection Points (0 or 1)  \n"
		"\n"
		""},
	 { (char *)"Plane_toString", _wrap_Plane_toString, METH_VARARGS, (char *)"\n"
		"\n"
		"toString() -> std::string  \n"
		"\n"
		"Converts this Plane's attributes to a character array.  \n"
		"\n"
		"The character array returned conatins the type of Plane (ie, PLANE) and the A, B, and C\n"
		"coefficients in the quadratic Surface equation.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"a character array of this Plane's attributes  \n"
		"\n"
		""},
	 { (char *)"delete_Plane", _wrap_delete_Plane, METH_VARARGS, NULL},
	 { (char *)"Plane_swigregister", Plane_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_XPlane", (PyCFunction) _wrap_new_XPlane, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"XPlane(const double x, const int id=0, const char *name=\"\")  \n"
		"\n"
		"Constructor for a Plane perpendicular to the x-axis.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* x :  \n"
		"    the location of the Plane along the x-axis  \n"
		"* id :  \n"
		"    the optional Surface id  \n"
		"* name :  \n"
		"    the optional name of the XPlane  \n"
		"\n"
		""},
	 { (char *)"XPlane_setX", (PyCFunction) _wrap_XPlane_setX, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"setX(const double x)  \n"
		"\n"
		"Set the location of this XPlane on the x-axis.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* x :  \n"
		"    the location of the XPlane on the x-axis  \n"
		"\n"
		""},
	 { (char *)"XPlane_getX", _wrap_XPlane_getX, METH_VARARGS, (char *)"\n"
		"\n"
		"getX() -> double  \n"
		"\n"
		"Returns the location of the XPlane on the x-axis.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the location of the XPlane on the x-axis  \n"
		"\n"
		""},
	 { (char *)"XPlane_getMinX", (PyCFunction) _wrap_XPlane_getMinX, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"getMinX(int halfspace) -> double  \n"
		"\n"
		"Returns the minimum x value for one of this XPlane's halfspaces.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* halfspace :  \n"
		"    the halfspace of the XPlane to consider  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the minimum x value  \n"
		"\n"
		""},
	 { (char *)"XPlane_getMaxX", (PyCFunction) _wrap_XPlane_getMaxX, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"getMaxX(int halfspace) -> double  \n"
		"\n"
		"Returns the maximum x value for one of this XPlane's halfspaces.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* halfspace :  \n"
		"    the halfspace of the XPlane to consider  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the maximum x value  \n"
		"\n"
		""},
	 { (char *)"XPlane_toString", _wrap_XPlane_toString, METH_VARARGS, (char *)"\n"
		"\n"
		"toString() -> std::string  \n"
		"\n"
		"Converts this XPlane's attributes to a character array.  \n"
		"\n"
		"The character array returned conatins the type of Plane (ie, XPLANE) and the A, B, C, and\n"
		"D coefficients in the quadratic Surface equation and the location of the Plane on the\n"
		"x-axis.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"a character array of this XPlane's attributes  \n"
		"\n"
		""},
	 { (char *)"delete_XPlane", _wrap_delete_XPlane, METH_VARARGS, NULL},
	 { (char *)"XPlane_swigregister", XPlane_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_YPlane", (PyCFunction) _wrap_new_YPlane, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"YPlane(const double y, const int id=0, const char *name=\"\")  \n"
		"\n"
		"Constructor for a Plane perpendicular to the y-axis.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* y :  \n"
		"    the location of the Plane along the y-axis  \n"
		"* id :  \n"
		"    the optional Surface id  \n"
		"* name :  \n"
		"    the optional Surface name  \n"
		"\n"
		""},
	 { (char *)"YPlane_setY", (PyCFunction) _wrap_YPlane_setY, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"setY(const double y)  \n"
		"\n"
		"Set the location of this YPlane on the y-axis.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* y :  \n"
		"    the location of the YPlane on the y-axis  \n"
		"\n"
		""},
	 { (char *)"YPlane_getY", _wrap_YPlane_getY, METH_VARARGS, (char *)"\n"
		"\n"
		"getY() -> double  \n"
		"\n"
		"Returns the location of the YPlane on the y-axis.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the location of the YPlane on the y-axis  \n"
		"\n"
		""},
	 { (char *)"YPlane_getMinY", (PyCFunction) _wrap_YPlane_getMinY, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"getMinY(int halfspace) -> double  \n"
		"\n"
		"Returns the minimum y value for one of this YPlane's halfspaces.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* halfspace :  \n"
		"    the halfspace of the YPlane to consider  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the minimum y value  \n"
		"\n"
		""},
	 { (char *)"YPlane_getMaxY", (PyCFunction) _wrap_YPlane_getMaxY, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"getMaxY(int halfspace) -> double  \n"
		"\n"
		"Returns the maximum y value for one of this YPlane's halfspaces.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* halfspace :  \n"
		"    the halfspace of the YPlane to consider  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the maximum y value  \n"
		"\n"
		""},
	 { (char *)"YPlane_toString", _wrap_YPlane_toString, METH_VARARGS, (char *)"\n"
		"\n"
		"toString() -> std::string  \n"
		"\n"
		"Converts this yplane's attributes to a character array.  \n"
		"\n"
		"The character array returned conatins the type of Plane (ie, YPLANE) and the A, B, C, and\n"
		"D coefficients in the quadratic Surface equation and the location of the Plane on the\n"
		"y-axis.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"a character array of this YPlane's attributes  \n"
		"\n"
		""},
	 { (char *)"delete_YPlane", _wrap_delete_YPlane, METH_VARARGS, NULL},
	 { (char *)"YPlane_swigregister", YPlane_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ZPlane", (PyCFunction) _wrap_new_ZPlane, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"ZPlane(const double z, const int id=0, const char *name=\"\")  \n"
		"\n"
		"Constructor for a Plane perpendicular to the z-axis.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* z :  \n"
		"    the location of the Plane along the z-axis  \n"
		"* id :  \n"
		"    the optional Surface ID  \n"
		"* name :  \n"
		"    the optional Surface name  \n"
		"\n"
		""},
	 { (char *)"ZPlane_setZ", (PyCFunction) _wrap_ZPlane_setZ, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"setZ(const double z)  \n"
		"\n"
		"Set the location of this ZPlane on the z-axis.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* z :  \n"
		"    the location of the ZPlane on the z-axis  \n"
		"\n"
		""},
	 { (char *)"ZPlane_getZ", _wrap_ZPlane_getZ, METH_VARARGS, (char *)"\n"
		"\n"
		"getZ() -> double  \n"
		"\n"
		"Returns the location of the ZPlane on the z-axis.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the location of the ZPlane on the z-axis  \n"
		"\n"
		""},
	 { (char *)"ZPlane_getMinZ", (PyCFunction) _wrap_ZPlane_getMinZ, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"getMinZ(int halfspace) -> double  \n"
		"\n"
		"Returns the minimum z value for one of this ZPlane's halfspaces.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* halfspace :  \n"
		"    the halfspace of the ZPlane to consider  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the minimum z value  \n"
		"\n"
		""},
	 { (char *)"ZPlane_getMaxZ", (PyCFunction) _wrap_ZPlane_getMaxZ, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"getMaxZ(int halfspace) -> double  \n"
		"\n"
		"Returns the maximum z value for one of this ZPlane's halfspaces.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* halfspace :  \n"
		"    the halfspace of the ZPlane to consider  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the maximum z value  \n"
		"\n"
		""},
	 { (char *)"ZPlane_toString", _wrap_ZPlane_toString, METH_VARARGS, (char *)"\n"
		"\n"
		"toString() -> std::string  \n"
		"\n"
		"Converts this ZPlane's attributes to a character array.  \n"
		"\n"
		"The character array returned conatins the type of Plane (ie, ZPLANE) and the A, B, C, and\n"
		"D coefficients in the quadratic Surface equation and the location of the Plane along the\n"
		"z-axis.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"a character array of this ZPlane's attributes  \n"
		"\n"
		""},
	 { (char *)"delete_ZPlane", _wrap_delete_ZPlane, METH_VARARGS, NULL},
	 { (char *)"ZPlane_swigregister", ZPlane_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ZCylinder", (PyCFunction) _wrap_new_ZCylinder, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"ZCylinder(const double x, const double y, const double radius, const int id=0, const char\n"
		"    *name=\"\")  \n"
		"\n"
		"constructor.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* x :  \n"
		"    the x-coordinte of the ZCylinder center  \n"
		"* y :  \n"
		"    the y-coordinate of the ZCylinder center  \n"
		"* radius :  \n"
		"    the radius of the ZCylinder  \n"
		"* id :  \n"
		"    the optional Surface ID  \n"
		"* name :  \n"
		"    the optional Surface name  \n"
		"\n"
		""},
	 { (char *)"ZCylinder_getX0", _wrap_ZCylinder_getX0, METH_VARARGS, (char *)"\n"
		"\n"
		"getX0() -> double  \n"
		"\n"
		"Return the x-coordinate of the ZCylinder's center Point.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the x-coordinate of the ZCylinder center  \n"
		"\n"
		""},
	 { (char *)"ZCylinder_getY0", _wrap_ZCylinder_getY0, METH_VARARGS, (char *)"\n"
		"\n"
		"getY0() -> double  \n"
		"\n"
		"Return the y-coordinate of the ZCylinder's center Point.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the y-coordinate of the ZCylinder center  \n"
		"\n"
		""},
	 { (char *)"ZCylinder_getRadius", _wrap_ZCylinder_getRadius, METH_VARARGS, (char *)"\n"
		"\n"
		"getRadius() -> double  \n"
		"\n"
		"Return the radius of the ZCylinder.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the radius of the ZCylinder  \n"
		"\n"
		""},
	 { (char *)"ZCylinder_getMinX", (PyCFunction) _wrap_ZCylinder_getMinX, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"getMinX(int halfspace) -> double  \n"
		"\n"
		"Returns the minimum x value for one of this ZCylinder's halfspaces.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* halfspace :  \n"
		"    the halfspace of the ZCylinder to consider  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the minimum x value  \n"
		"\n"
		""},
	 { (char *)"ZCylinder_getMaxX", (PyCFunction) _wrap_ZCylinder_getMaxX, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"getMaxX(int halfspace) -> double  \n"
		"\n"
		"Returns the maximum x value for one of this ZCylinder's halfspaces.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* halfspace :  \n"
		"    the halfspace of the ZCylinder to consider  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the maximum x value  \n"
		"\n"
		""},
	 { (char *)"ZCylinder_getMinY", (PyCFunction) _wrap_ZCylinder_getMinY, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"getMinY(int halfspace) -> double  \n"
		"\n"
		"Returns the minimum y value for one of this ZCylinder's halfspaces.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* halfspace :  \n"
		"    the halfspace of the ZCylinder to consider  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the minimum y value  \n"
		"\n"
		""},
	 { (char *)"ZCylinder_getMaxY", (PyCFunction) _wrap_ZCylinder_getMaxY, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"getMaxY(int halfspace) -> double  \n"
		"\n"
		"Returns the maximum y value for one of this ZCylinder's halfspaces.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* halfspace :  \n"
		"    the halfspace of the ZCylinder to consider  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the maximum y value  \n"
		"\n"
		""},
	 { (char *)"ZCylinder_getMinZ", (PyCFunction) _wrap_ZCylinder_getMinZ, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"getMinZ(int halfspace) -> double  \n"
		"\n"
		"Returns the minimum z value of -INFINITY.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* halfspace :  \n"
		"    the halfspace of the ZCylinder to consider  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the minimum z value of -INFINITY  \n"
		"\n"
		""},
	 { (char *)"ZCylinder_getMaxZ", (PyCFunction) _wrap_ZCylinder_getMaxZ, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"getMaxZ(int halfspace) -> double  \n"
		"\n"
		"Returns the maximum z value of INFINITY.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* halfspace :  \n"
		"    the halfspace of the ZCylinder to consider  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the maximum z value of INFINITY  \n"
		"\n"
		""},
	 { (char *)"ZCylinder_evaluate", (PyCFunction) _wrap_ZCylinder_evaluate, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"evaluate(const Point *point) const  -> double  \n"
		"\n"
		"Evaluate a Point using the ZCylinder's quadratic Surface equation.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* point :  \n"
		"    a pointer to the Point of interest  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the value of Point in the equation  \n"
		"\n"
		""},
	 { (char *)"ZCylinder_intersection", (PyCFunction) _wrap_ZCylinder_intersection, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"intersection(Point *point, double angle, Point *points) -> int  \n"
		"\n"
		"Finds the intersection Point with this zcylinder from a given Point and trajectory defined\n"
		"by an angle (0, 1, or 2 points).  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* point :  \n"
		"    pointer to the Point of interest  \n"
		"* angle :  \n"
		"    the angle defining the trajectory in radians  \n"
		"* points :  \n"
		"    pointer to a an array of Points to store intersection Points  \n"
		"* polar :  \n"
		"    the polar angle defining the trajectory in radians  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the number of intersection Points (0 or 1)  \n"
		"\n"
		""},
	 { (char *)"ZCylinder_toString", _wrap_ZCylinder_toString, METH_VARARGS, (char *)"\n"
		"\n"
		"toString() -> std::string  \n"
		"\n"
		"Converts this ZCylinder's attributes to a character array.  \n"
		"\n"
		"The character array returned conatins the type of Plane (ie, ZCYLINDER) and the A, B, C, D\n"
		"and E coefficients in the quadratic Surface equation.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"a character array of this ZCylinder's attributes  \n"
		"\n"
		""},
	 { (char *)"delete_ZCylinder", _wrap_delete_ZCylinder, METH_VARARGS, NULL},
	 { (char *)"ZCylinder_swigregister", ZCylinder_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Timer", _wrap_new_Timer, METH_VARARGS, (char *)"\n"
		"\n"
		"Timer()  \n"
		"\n"
		"Constructor sets the current split elapsed time to zero.  \n"
		"\n"
		""},
	 { (char *)"delete_Timer", _wrap_delete_Timer, METH_VARARGS, (char *)"\n"
		"\n"
		"~Timer()  \n"
		"\n"
		"Destructor.  \n"
		"\n"
		""},
	 { (char *)"Timer_Get", _wrap_Timer_Get, METH_VARARGS, (char *)"\n"
		"\n"
		"Get() -> Timer *  \n"
		"\n"
		"Returns a static instance of the Timer class.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"a pointer to the static Timer class  \n"
		"\n"
		""},
	 { (char *)"Timer_startTimer", _wrap_Timer_startTimer, METH_VARARGS, (char *)"\n"
		"\n"
		"startTimer()  \n"
		"\n"
		"Starts the Timer.  \n"
		"\n"
		"This method is similar to starting a stopwatch.  \n"
		"\n"
		""},
	 { (char *)"Timer_stopTimer", _wrap_Timer_stopTimer, METH_VARARGS, (char *)"\n"
		"\n"
		"stopTimer()  \n"
		"\n"
		"Stops the Timer.  \n"
		"\n"
		"This method is similar to stopping a stopwatch.  \n"
		"\n"
		""},
	 { (char *)"Timer_recordSplit", (PyCFunction) _wrap_Timer_recordSplit, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"recordSplit(const char *msg)  \n"
		"\n"
		"Records a message corresponding to a time for the current split.  \n"
		"\n"
		"When this method is called it assumes that the Timer has been stopped and has the current\n"
		"time for the process corresponding to the message.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* msg :  \n"
		"    a msg corresponding to this time split  \n"
		"\n"
		""},
	 { (char *)"Timer_getTime", _wrap_Timer_getTime, METH_VARARGS, (char *)"\n"
		"\n"
		"getTime() -> double  \n"
		"\n"
		"Returns the time elapsed from startTimer() to stopTimer().  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the elapsed time in seconds  \n"
		"\n"
		""},
	 { (char *)"Timer_getSplit", (PyCFunction) _wrap_Timer_getSplit, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"getSplit(const char *msg) -> double  \n"
		"\n"
		"Returns the time associated with a particular split.  \n"
		"\n"
		"If the split does not exist, returns 0.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* msg :  \n"
		"    the message tag for the split  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the time recorded for the split (seconds)  \n"
		"\n"
		""},
	 { (char *)"Timer_printSplits", _wrap_Timer_printSplits, METH_VARARGS, (char *)"\n"
		"\n"
		"printSplits()  \n"
		"\n"
		"Prints the times and messages for each split to the console.  \n"
		"\n"
		"This method will loop through all of the Timer's splits and print a formatted message\n"
		"string (80 characters in length) to the console with the message and the time\n"
		"corresponding to that message.  \n"
		"\n"
		""},
	 { (char *)"Timer_clearSplit", (PyCFunction) _wrap_Timer_clearSplit, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"clearSplit(const char *msg)  \n"
		"\n"
		"Clears the time split for this message and deletes the message's entry in the Timer's\n"
		"splits log.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* msg :  \n"
		"    the message tag for the split  \n"
		"\n"
		""},
	 { (char *)"Timer_clearSplits", _wrap_Timer_clearSplits, METH_VARARGS, (char *)"\n"
		"\n"
		"clearSplits()  \n"
		"\n"
		"Clears all times split messages from the Timer.  \n"
		"\n"
		""},
	 { (char *)"Timer_swigregister", Timer_swigregister, METH_VARARGS, NULL},
	 { (char *)"segment__length_set", _wrap_segment__length_set, METH_VARARGS, NULL},
	 { (char *)"segment__length_get", _wrap_segment__length_get, METH_VARARGS, NULL},
	 { (char *)"segment__material_set", _wrap_segment__material_set, METH_VARARGS, NULL},
	 { (char *)"segment__material_get", _wrap_segment__material_get, METH_VARARGS, NULL},
	 { (char *)"segment__region_id_set", _wrap_segment__region_id_set, METH_VARARGS, NULL},
	 { (char *)"segment__region_id_get", _wrap_segment__region_id_get, METH_VARARGS, NULL},
	 { (char *)"segment__cmfd_surface_fwd_set", _wrap_segment__cmfd_surface_fwd_set, METH_VARARGS, NULL},
	 { (char *)"segment__cmfd_surface_fwd_get", _wrap_segment__cmfd_surface_fwd_get, METH_VARARGS, NULL},
	 { (char *)"segment__cmfd_surface_bwd_set", _wrap_segment__cmfd_surface_bwd_set, METH_VARARGS, NULL},
	 { (char *)"segment__cmfd_surface_bwd_get", _wrap_segment__cmfd_surface_bwd_get, METH_VARARGS, NULL},
	 { (char *)"new_segment", _wrap_new_segment, METH_VARARGS, (char *)"\n"
		"\n"
		"segment()  \n"
		"\n"
		"Constructor initializes CMFD surfaces  \n"
		"\n"
		""},
	 { (char *)"delete_segment", _wrap_delete_segment, METH_VARARGS, NULL},
	 { (char *)"segment_swigregister", segment_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Track", _wrap_new_Track, METH_VARARGS, (char *)"\n"
		"\n"
		"Track()  \n"
		"\n"
		""},
	 { (char *)"delete_Track", _wrap_delete_Track, METH_VARARGS, (char *)"\n"
		"\n"
		"~Track()  \n"
		"\n"
		"Destructor clears the Track segments container.  \n"
		"\n"
		""},
	 { (char *)"Track_setValues", (PyCFunction) _wrap_Track_setValues, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"setValues(const double start_x, const double start_y, const double start_z, const double\n"
		"    end_x, const double end_y, const double end_z, const double phi)  \n"
		"\n"
		"Set the values for the Track's start and end point and angle.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* start_x :  \n"
		"    the x-coordinate at the starting point  \n"
		"* start_y :  \n"
		"    the y-coordinate at the starting point  \n"
		"* start_z :  \n"
		"    the z-coordinate at the starting point  \n"
		"* end_x :  \n"
		"    the x-coordinate at the ending point  \n"
		"* end_y :  \n"
		"    the y-coordinate at the ending point  \n"
		"* end_z :  \n"
		"    the z-coordinate at the ending point  \n"
		"* phi :  \n"
		"    the track's azimuthal angle ( $ \\theta \\in [0, \\pi] $)  \n"
		"\n"
		""},
	 { (char *)"Track_setUid", (PyCFunction) _wrap_Track_setUid, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"setUid(int uid)  \n"
		"\n"
		"Initializes a Track's unique ID.  \n"
		"\n"
		"This is set by the trackgenerator to correspond to the Track's location in a 2D ragged\n"
		"array of all tracks.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* uid :  \n"
		"    the Track's unique ID  \n"
		"\n"
		""},
	 { (char *)"Track_setPhi", (PyCFunction) _wrap_Track_setPhi, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"setPhi(const double phi)  \n"
		"\n"
		"Set the Track's azimuthal angle.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* phi :  \n"
		"    the azimuthal angle  \n"
		"\n"
		""},
	 { (char *)"Track_setAzimAngleIndex", (PyCFunction) _wrap_Track_setAzimAngleIndex, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"setAzimAngleIndex(const int index)  \n"
		"\n"
		"Set the index for the Track's azimuthal angle index.  \n"
		"\n"
		"The azimuthal angle index corresponds to a an array of all azimuthal angles for $ \\theta\n"
		"\\in [0, \\pi] $ owned by the TrackGenerator class.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* index :  \n"
		"    the azimuthal angle index  \n"
		"\n"
		""},
	 { (char *)"Track_setPeriodicTrackIndex", (PyCFunction) _wrap_Track_setPeriodicTrackIndex, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"setPeriodicTrackIndex(const int index)  \n"
		"\n"
		"Set the index of a track in a periodic cycle.  \n"
		"\n"
		"Tracks form periodic track cycles as they traverse the geometry. Tracks can be arbitrarily\n"
		"decomposed into periodic track cycles and this index indicates the index in a particular\n"
		"cycle.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* index :  \n"
		"    of the track in a periodic cycle  \n"
		"\n"
		""},
	 { (char *)"Track_setReflectiveTrackIndex", (PyCFunction) _wrap_Track_setReflectiveTrackIndex, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"setReflectiveTrackIndex(const int index)  \n"
		"\n"
		"Set the index of a track in a reflective cycle.  \n"
		"\n"
		"Tracks form reflective track cycles as they traverse the geometry. Tracks can be\n"
		"arbitrarily decomposed into reflective track cycles and this index indicates the index in\n"
		"a particular cycle.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* index :  \n"
		"    of the track in a reflective cycle  \n"
		"\n"
		""},
	 { (char *)"Track_setNextIn", (PyCFunction) _wrap_Track_setNextIn, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"setNextIn(const bool next_in)  \n"
		"\n"
		"Sets the direction in which the flux leaving this Track along its \"forward\" direction is\n"
		"passed.  \n"
		"\n"
		"Sets whether or not to pass the outgoing flux from this Track along its \"forward\"\n"
		"direction to the \"forward\" direction (false) or \"reverse\" direction (true) of the next\n"
		"Track after intersection with the geometry boundary.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* next_in :  \n"
		"    the \"forward\" (false) or \"reverse (true) direction  \n"
		"\n"
		""},
	 { (char *)"Track_setNextOut", (PyCFunction) _wrap_Track_setNextOut, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"setNextOut(const bool next_out)  \n"
		"\n"
		"Sets the direction in which the flux leaving this Track along its \"reverse\" direction is\n"
		"passed.  \n"
		"\n"
		"Sets whether or not to pass the outgoing flux from this Track along its \"reverse\"\n"
		"direction to the \"forward\" direction (false) or \"reverse\" direction (true) of the next\n"
		"Track after intersection with the geometry boundary.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* next_out :  \n"
		"    the \"forward\" (false) or \"reverse (true) direction  \n"
		"\n"
		""},
	 { (char *)"Track_setBCIn", (PyCFunction) _wrap_Track_setBCIn, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"setBCIn(const boundaryType bc_in)  \n"
		"\n"
		"Sets the boundary condition for the incoming flux along the Track's \"forward\" direction.  \n"
		"\n"
		"The boundaryType represents vacuum (0), reflective (1), or periodic (2) boundary\n"
		"conditions.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* bc_in :  \n"
		"    boundary condition for the incoming flux in the \"forward\" direction  \n"
		"\n"
		""},
	 { (char *)"Track_setBCOut", (PyCFunction) _wrap_Track_setBCOut, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"setBCOut(const boundaryType bc_out)  \n"
		"\n"
		"Sets the boundary condition for the incoming flux along the Track's \"reverse\" direction.  \n"
		"\n"
		"The boundaryType represents vacuum (0), reflective (1), or periodic (2) boundary\n"
		"conditions.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* bc_out :  \n"
		"    boundary condition for the incoming flux in the \"reverse\" direction  \n"
		"\n"
		""},
	 { (char *)"Track_setTrackIn", (PyCFunction) _wrap_Track_setTrackIn, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"setTrackIn(Track *track_in)  \n"
		"\n"
		"Sets the track going out along this Track's \"forward\" direction.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* track_in :  \n"
		"    pointer to the Track going out in the \"forward\" direction  \n"
		"\n"
		""},
	 { (char *)"Track_setTrackOut", (PyCFunction) _wrap_Track_setTrackOut, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"setTrackOut(Track *track_out)  \n"
		"\n"
		"Sets the track going out along this Track's \"reverse\" direction.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* track_out :  \n"
		"    pointer to the Track going out in the \"reverse\" direction  \n"
		"\n"
		""},
	 { (char *)"Track_getUid", _wrap_Track_getUid, METH_VARARGS, (char *)"\n"
		"\n"
		"getUid() -> int  \n"
		"\n"
		"Return the Track's unique ID.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the Track's unique ID  \n"
		"\n"
		""},
	 { (char *)"Track_getEnd", _wrap_Track_getEnd, METH_VARARGS, (char *)"\n"
		"\n"
		"getEnd() -> Point *  \n"
		"\n"
		"Returns a pointer to the Track's end Point.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"a pointer to the Track's end Point  \n"
		"\n"
		""},
	 { (char *)"Track_getStart", _wrap_Track_getStart, METH_VARARGS, (char *)"\n"
		"\n"
		"getStart() -> Point *  \n"
		"\n"
		"Returns a pointer to the Track's start Point.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"a pointer to the Track's start Point  \n"
		"\n"
		""},
	 { (char *)"Track_getPhi", _wrap_Track_getPhi, METH_VARARGS, (char *)"\n"
		"\n"
		"getPhi() const  -> double  \n"
		"\n"
		"Return the Track's azimuthal angle (with respect to the x-axis).  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the azimuthal angle $ \\theta \\in [0, \\pi] $  \n"
		"\n"
		""},
	 { (char *)"Track_getAzimAngleIndex", _wrap_Track_getAzimAngleIndex, METH_VARARGS, (char *)"\n"
		"\n"
		"getAzimAngleIndex() const  -> int  \n"
		"\n"
		"Return the index for the Track's azimuthal angle (with respect to the x-axis).  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"th azimuthal angle index  \n"
		"\n"
		""},
	 { (char *)"Track_getPeriodicTrackIndex", _wrap_Track_getPeriodicTrackIndex, METH_VARARGS, (char *)"\n"
		"\n"
		"getPeriodicTrackIndex() const  -> int  \n"
		"\n"
		"Get the index of a track in a periodic cycle.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"index of the track in a periodic cycle  \n"
		"\n"
		""},
	 { (char *)"Track_getReflectiveTrackIndex", _wrap_Track_getReflectiveTrackIndex, METH_VARARGS, (char *)"\n"
		"\n"
		"getReflectiveTrackIndex() const  -> int  \n"
		"\n"
		"Get the index of a track in a reflective cycle.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"index of the track in a reflective cycle  \n"
		"\n"
		""},
	 { (char *)"Track_getSegment", (PyCFunction) _wrap_Track_getSegment, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"getSegment(int s) -> segment *  \n"
		"\n"
		"Returns a pointer to a segment with a given index.  \n"
		"\n"
		"Returns a pointer to the segment or ends program if Track does not have the requested\n"
		"segment.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* segment :  \n"
		"    index into the Track's segments container  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"a pointer to the requested segment  \n"
		"\n"
		""},
	 { (char *)"Track_getSegments", _wrap_Track_getSegments, METH_VARARGS, (char *)"\n"
		"\n"
		"getSegments() -> segment *  \n"
		"\n"
		"Returns a vector of pointers to the Track's segments.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"vector of segment pointers  \n"
		"\n"
		""},
	 { (char *)"Track_getNumSegments", _wrap_Track_getNumSegments, METH_VARARGS, (char *)"\n"
		"\n"
		"getNumSegments() -> int  \n"
		"\n"
		"Return the number of segments along this Track.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the number of segments  \n"
		"\n"
		""},
	 { (char *)"Track_getTrackIn", _wrap_Track_getTrackIn, METH_VARARGS, (char *)"\n"
		"\n"
		"getTrackIn() const  -> Track *  \n"
		"\n"
		"Returns the incoming Track.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"a pointer to the incoming Track  \n"
		"\n"
		""},
	 { (char *)"Track_getTrackOut", _wrap_Track_getTrackOut, METH_VARARGS, (char *)"\n"
		"\n"
		"getTrackOut() const  -> Track *  \n"
		"\n"
		"Returns the outgoing Track.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"a pointer to the outgoing Track  \n"
		"\n"
		""},
	 { (char *)"Track_isNextIn", _wrap_Track_isNextIn, METH_VARARGS, (char *)"\n"
		"\n"
		"isNextIn() const  -> bool  \n"
		"\n"
		"Returns whether to give the outgoing flux to the \"forward\" (false) or \"reverse\" (true)\n"
		"direction of the next Track when traveling along this Tracks's \"forward\" direction.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"\"forward\" (false) \"reverse\" (true) direction of outgoing Track  \n"
		"\n"
		""},
	 { (char *)"Track_isNextOut", _wrap_Track_isNextOut, METH_VARARGS, (char *)"\n"
		"\n"
		"isNextOut() const  -> bool  \n"
		"\n"
		"Returns whether to give the outgoing flux to the \"forward\" (false) or \"reverse\" (true)\n"
		"direction of the next Track when traveling along this Track's \"reverse\" direction.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"\"forward\" (false) \"reverse\" (true) direction of outgoing Track  \n"
		"\n"
		""},
	 { (char *)"Track_getBCIn", _wrap_Track_getBCIn, METH_VARARGS, (char *)"\n"
		"\n"
		"getBCIn() const  -> boundaryType  \n"
		"\n"
		"Returns the boundary condition for the flux along the Track's \"forward\" direction.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"vacuum (0), reflective (1), or periodic (2) reflective boundary conditions  \n"
		"\n"
		""},
	 { (char *)"Track_getBCOut", _wrap_Track_getBCOut, METH_VARARGS, (char *)"\n"
		"\n"
		"getBCOut() const  -> boundaryType  \n"
		"\n"
		"Returns the boundary condition for the flux along the Track's \"reverse\" direction.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"vacuum (0), reflective (1), or periodic (2) reflective boundary conditions  \n"
		"\n"
		""},
	 { (char *)"Track_getTransferFluxIn", _wrap_Track_getTransferFluxIn, METH_VARARGS, (char *)"\n"
		"\n"
		"getTransferFluxIn() const  -> bool  \n"
		"\n"
		"Returns a boolean to indicate whether the outgoing flux along this Track's \"forward\"\n"
		"direction should be transferred to the outgoing Track.  \n"
		"\n"
		"The bool with be false for vacuum BCs and true for all other BCs.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"bool indicating whether the flux should be passed when tracking in the \"forward\"\n"
		"direction.  \n"
		"\n"
		""},
	 { (char *)"Track_getTransferFluxOut", _wrap_Track_getTransferFluxOut, METH_VARARGS, (char *)"\n"
		"\n"
		"getTransferFluxOut() const  -> bool  \n"
		"\n"
		"Returns a boolean to indicate whether the outgoing flux along this Track's \"reverse\"\n"
		"direction should be transferred to the incoming Track.  \n"
		"\n"
		"The bool with be false for vacuum BCs and true for all other BCs.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"bool indicating whether the flux should be passed when tracking in the \"reverse\"\n"
		"direction.  \n"
		"\n"
		""},
	 { (char *)"Track_addSegment", (PyCFunction) _wrap_Track_addSegment, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"addSegment(segment *to_add)  \n"
		"\n"
		"Adds a segment pointer to this Track's list of segments.  \n"
		"\n"
		"This method assumes that segments are added in order of their starting location from the\n"
		"Track's start point.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* to_add :  \n"
		"    a pointer to the segment to add  \n"
		"\n"
		""},
	 { (char *)"Track_removeSegment", (PyCFunction) _wrap_Track_removeSegment, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"removeSegment(int index)  \n"
		"\n"
		"Removes a segment from this Track's list of segments.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* index :  \n"
		"    the index of the segment to remove  \n"
		"\n"
		""},
	 { (char *)"Track_insertSegment", (PyCFunction) _wrap_Track_insertSegment, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"insertSegment(int index, segment *segment)  \n"
		"\n"
		"Inserts a segment pointer into this Track's list of segments.  \n"
		"\n"
		"This method appends the new segment directly behind another segment in the Track. This is\n"
		"a helper method for the TrackGenerator::splitTracks(...) routine.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* index :  \n"
		"    the index of the segment to insert behind in the list  \n"
		"* segment :  \n"
		"    a pointer to the segment to insert  \n"
		"\n"
		""},
	 { (char *)"Track_clearSegments", _wrap_Track_clearSegments, METH_VARARGS, (char *)"\n"
		"\n"
		"clearSegments()  \n"
		"\n"
		"Deletes each of this Track's segments.  \n"
		"\n"
		""},
	 { (char *)"Track_toString", _wrap_Track_toString, METH_VARARGS, (char *)"\n"
		"\n"
		"toString() -> std::string  \n"
		"\n"
		"Convert this Track's attributes to a character array.  \n"
		"\n"
		"The character array returned includes the Track's starting and ending coordinates, the\n"
		"azimuthal angle and azimuthal weight.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"a character array of this Track's attributes  \n"
		"\n"
		""},
	 { (char *)"Track_swigregister", Track_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_TrackGenerator", (PyCFunction) _wrap_new_TrackGenerator, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"TrackGenerator(Geometry *geometry, int num_azim, double azim_spacing)  \n"
		"\n"
		"Constructor for the TrackGenerator assigns default values.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* geometry :  \n"
		"    a pointer to a Geometry object  \n"
		"* num_azim :  \n"
		"    number of azimuthal angles in $ [0, 2\\pi] $  \n"
		"* azim_spacing :  \n"
		"    azimuthal track spacing (cm)  \n"
		"\n"
		""},
	 { (char *)"delete_TrackGenerator", _wrap_delete_TrackGenerator, METH_VARARGS, (char *)"\n"
		"\n"
		"~TrackGenerator()  \n"
		"\n"
		"Destructor frees memory for all Tracks.  \n"
		"\n"
		""},
	 { (char *)"TrackGenerator_getNumAzim", _wrap_TrackGenerator_getNumAzim, METH_VARARGS, (char *)"\n"
		"\n"
		"getNumAzim() -> int  \n"
		"\n"
		"Return the number of azimuthal angles in $ [0, 2\\pi] $.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the number of azimuthal angles in $ 2\\pi $  \n"
		"\n"
		""},
	 { (char *)"TrackGenerator_getNumPolarAngles", _wrap_TrackGenerator_getNumPolarAngles, METH_VARARGS, NULL},
	 { (char *)"TrackGenerator_getDesiredAzimSpacing", _wrap_TrackGenerator_getDesiredAzimSpacing, METH_VARARGS, (char *)"\n"
		"\n"
		"getDesiredAzimSpacing() -> double  \n"
		"\n"
		"Return the azimuthal track spacing (cm).  \n"
		"\n"
		"This will return the user-specified azimuthal track spacing and NOT the effective track\n"
		"spacing which is computed and used to generate cyclic tracks.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the azimuthal track spacing (cm)  \n"
		"\n"
		""},
	 { (char *)"TrackGenerator_getPhi", (PyCFunction) _wrap_TrackGenerator_getPhi, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"getPhi(int azim) -> double  \n"
		"\n"
		"Returns the azimuthal angle for a given azimuthal angle index.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* the :  \n"
		"    azimuthal angle index.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the desired azimuthal angle.  \n"
		"\n"
		""},
	 { (char *)"TrackGenerator_getSinTheta", (PyCFunction) _wrap_TrackGenerator_getSinTheta, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"TrackGenerator_getGeometry", _wrap_TrackGenerator_getGeometry, METH_VARARGS, (char *)"\n"
		"\n"
		"getGeometry() -> Geometry *  \n"
		"\n"
		"Return the Geometry for this TrackGenerator if one has been set.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"a pointer to the Geometry  \n"
		"\n"
		""},
	 { (char *)"TrackGenerator_getQuadrature", _wrap_TrackGenerator_getQuadrature, METH_VARARGS, (char *)"\n"
		"\n"
		"getQuadrature() -> Quadrature *  \n"
		"\n"
		"Returns a pointer to the Quadrature.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"a pointer to the Quadrature  \n"
		"\n"
		""},
	 { (char *)"TrackGenerator_getNumTracks", _wrap_TrackGenerator_getNumTracks, METH_VARARGS, (char *)"\n"
		"\n"
		"getNumTracks() -> int  \n"
		"\n"
		"Return the total number of Tracks generated.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"The number of Tracks generated  \n"
		"\n"
		""},
	 { (char *)"TrackGenerator_getNumX", (PyCFunction) _wrap_TrackGenerator_getNumX, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"getNumX(int azim) -> int  \n"
		"\n"
		"Return the number of tracks on the x-axis for a given azimuthal angle.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* azim :  \n"
		"    An azimuthal angle index  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"The number of Tracks on the x-axis  \n"
		"\n"
		""},
	 { (char *)"TrackGenerator_getNumY", (PyCFunction) _wrap_TrackGenerator_getNumY, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"getNumY(int azim) -> int  \n"
		"\n"
		"Return the number of tracks on the y-axis for a given azimuthal angle.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* azim :  \n"
		"    An azimuthal angle index  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"The number of Tracks on the y-axis  \n"
		"\n"
		""},
	 { (char *)"TrackGenerator_getNumSegments", _wrap_TrackGenerator_getNumSegments, METH_VARARGS, (char *)"\n"
		"\n"
		"getNumSegments() -> int  \n"
		"\n"
		"Return the total number of Track segments across the Geometry.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the total number of Track segments  \n"
		"\n"
		""},
	 { (char *)"TrackGenerator_getTracks", _wrap_TrackGenerator_getTracks, METH_VARARGS, (char *)"\n"
		"\n"
		"getTracks() -> Track **  \n"
		"\n"
		"Returns a 2D jagged array of the Tracks.  \n"
		"\n"
		"The first index into the array is the azimuthal angle and the second index is the Track\n"
		"number for a given azimuthal angle.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the 2D jagged array of Tracks  \n"
		"\n"
		""},
	 { (char *)"TrackGenerator_getTracksArray", _wrap_TrackGenerator_getTracksArray, METH_VARARGS, NULL},
	 { (char *)"TrackGenerator_retrieveMaxOpticalLength", _wrap_TrackGenerator_retrieveMaxOpticalLength, METH_VARARGS, NULL},
	 { (char *)"TrackGenerator_getNumThreads", _wrap_TrackGenerator_getNumThreads, METH_VARARGS, (char *)"\n"
		"\n"
		"getNumThreads() -> int  \n"
		"\n"
		"Returns the number of shared memory OpenMP threads in use.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the number of threads  \n"
		"\n"
		""},
	 { (char *)"TrackGenerator_getFSRVolumes", _wrap_TrackGenerator_getFSRVolumes, METH_VARARGS, (char *)"\n"
		"\n"
		"getFSRVolumes() -> FP_PRECISION *  \n"
		"\n"
		"Returns an array of volumes indexed by FSR.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"a pointer to the array of FSR volumes  \n"
		"\n"
		""},
	 { (char *)"TrackGenerator_getFSRVolume", (PyCFunction) _wrap_TrackGenerator_getFSRVolume, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"getFSRVolume(int fsr_id) -> FP_PRECISION  \n"
		"\n"
		"Computes and returns the volume of an FSR.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* fsr_id :  \n"
		"    the ID for the FSR of interest  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the FSR volume  \n"
		"\n"
		""},
	 { (char *)"TrackGenerator_getMaxOpticalLength", _wrap_TrackGenerator_getMaxOpticalLength, METH_VARARGS, (char *)"\n"
		"\n"
		"getMaxOpticalLength() -> FP_PRECISION  \n"
		"\n"
		"Finds and returns the maximum optical length amongst all segments.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the maximum optical path length  \n"
		"\n"
		""},
	 { (char *)"TrackGenerator_getZCoord", _wrap_TrackGenerator_getZCoord, METH_VARARGS, (char *)"\n"
		"\n"
		"getZCoord() -> double  \n"
		"\n"
		"Returns the z-coord where the 2D Tracks should be created.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the z-coord where the 2D Tracks should be created.  \n"
		"\n"
		""},
	 { (char *)"TrackGenerator_getFSRLocks", _wrap_TrackGenerator_getFSRLocks, METH_VARARGS, (char *)"\n"
		"\n"
		"getFSRLocks() -> omp_lock_t *  \n"
		"\n"
		"Return the array of FSR locks for atomic FSR operations.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"an array of FSR locks  \n"
		"\n"
		""},
	 { (char *)"TrackGenerator_getSegmentFormation", _wrap_TrackGenerator_getSegmentFormation, METH_VARARGS, NULL},
	 { (char *)"TrackGenerator_setNumAzim", (PyCFunction) _wrap_TrackGenerator_setNumAzim, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"setNumAzim(int num_azim)  \n"
		"\n"
		"Set the number of azimuthal angles in $ [0, 2\\pi] $.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* num_azim :  \n"
		"    the number of azimuthal angles in $ 2\\pi $  \n"
		"\n"
		""},
	 { (char *)"TrackGenerator_setDesiredAzimSpacing", (PyCFunction) _wrap_TrackGenerator_setDesiredAzimSpacing, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"setDesiredAzimSpacing(double azim_spacing)  \n"
		"\n"
		"Set the suggested azimuthal track spacing (cm).  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* azim_spacing :  \n"
		"    the suggested azimuthal track spacing  \n"
		"\n"
		""},
	 { (char *)"TrackGenerator_setGeometry", (PyCFunction) _wrap_TrackGenerator_setGeometry, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"setGeometry(Geometry *geometry)  \n"
		"\n"
		"Set a pointer to the Geometry to use for track generation.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* geometry :  \n"
		"    a pointer to the Geometry  \n"
		"\n"
		""},
	 { (char *)"TrackGenerator_setQuadrature", (PyCFunction) _wrap_TrackGenerator_setQuadrature, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"setQuadrature(Quadrature *quadrature)  \n"
		"\n"
		"Assign a Quadrature object to the Solver.  \n"
		"\n"
		"This routine allows use of a Quadrature with any polar angle quadrature. Alternatively,\n"
		"this routine may take in any subclass of the Quadrature parent class, including\n"
		"TYPolarQuad (default), LeonardPolarQuad, GLPolarQuad, etc.  \n"
		"\n"
		"Users may assign a Quadrature object to the Solver from Python script as follows:  \n"
		"\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* quadrature :  \n"
		"    a pointer to a Quadrature object  \n"
		"\n"
		""},
	 { (char *)"TrackGenerator_setNumThreads", (PyCFunction) _wrap_TrackGenerator_setNumThreads, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"setNumThreads(int num_threads)  \n"
		"\n"
		"Sets the number of shared memory OpenMP threads to use (>0).  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* num_threads :  \n"
		"    the number of threads  \n"
		"\n"
		""},
	 { (char *)"TrackGenerator_setZCoord", (PyCFunction) _wrap_TrackGenerator_setZCoord, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"setZCoord(double z_coord)  \n"
		"\n"
		"Sets the z-coord where the 2D Tracks should be created.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* z_coord :  \n"
		"    the z-coord where the 2D Tracks should be created.  \n"
		"\n"
		""},
	 { (char *)"TrackGenerator_setTracksFilenameSuffix", (PyCFunction) _wrap_TrackGenerator_setTracksFilenameSuffix, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"TrackGenerator_containsTracks", _wrap_TrackGenerator_containsTracks, METH_VARARGS, (char *)"\n"
		"\n"
		"containsTracks() -> bool  \n"
		"\n"
		"Returns whether or not the TrackGenerator contains Track that are for its current number\n"
		"of azimuthal angles, track spacing and geometry.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"true if the TrackGenerator conatains Tracks; false otherwise  \n"
		"\n"
		""},
	 { (char *)"TrackGenerator_retrieveTrackCoords", (PyCFunction) _wrap_TrackGenerator_retrieveTrackCoords, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"retrieveTrackCoords(double *coords, int num_tracks)  \n"
		"\n"
		"Fills an array with the x,y,z coordinates for each Track.  \n"
		"\n"
		"This class method is intended to be called by the OpenMOC Python \"plotter\" module as a\n"
		"utility to assist in plotting tracks. Although this method appears to require two\n"
		"arguments, in reality it only requires on due to SWIG and would be called from within\n"
		"Python as follows:  \n"
		"\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* coords :  \n"
		"    an array of coords of length NUM_VALUES_PER_RETRIEVED_TRACK times the number of Tracks  \n"
		"* length_coords :  \n"
		"    the total number of Tracks times NUM_VALUES_PER_RETRIEVED_TRACK  \n"
		"\n"
		""},
	 { (char *)"TrackGenerator_retrieveSegmentCoords", (PyCFunction) _wrap_TrackGenerator_retrieveSegmentCoords, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"retrieveSegmentCoords(double *coords, int num_segments)  \n"
		"\n"
		"Fills an array with the x,y,z coordinates for each Track segment.  \n"
		"\n"
		"This class method is intended to be called by the OpenMOC Python \"plotter\" module as a\n"
		"utility to assist in plotting segments. Although this method appears to require two\n"
		"arguments, in reality it only requires one due to SWIG and would be called from within\n"
		"Python as follows:  \n"
		"\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* coords :  \n"
		"    an array of coords of length NUM_VALUES_PER_RETRIEVED_SEGMENT times the number of\n"
		"    segments  \n"
		"* length_coords :  \n"
		"    the total number of Track segments times NUM_VALUES_PER_RETRIEVED_SEGMENT  \n"
		"\n"
		""},
	 { (char *)"TrackGenerator_generateTracks", (PyCFunction) _wrap_TrackGenerator_generateTracks, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"generateTracks(bool store=true, bool neighbor_cells=false)  \n"
		"\n"
		"Generates tracks for some number of azimuthal angles and track spacing.  \n"
		"\n"
		"Computes the effective angles and track spacing. Computes the number of Tracks for each\n"
		"azimuthal angle, allocates memory for all Tracks at each angle and sets each Track's\n"
		"starting and ending Points, azimuthal angle, and azimuthal angle quadrature weight.\n"
		"neighbor_cells whether to use neighbor cell optimizations store whether to store the\n"
		"tracks to a file for reuse  \n"
		"\n"
		""},
	 { (char *)"TrackGenerator_correctFSRVolume", (PyCFunction) _wrap_TrackGenerator_correctFSRVolume, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"correctFSRVolume(int fsr_id, FP_PRECISION fsr_volume)  \n"
		"\n"
		"Assign a correct volume for some FSR.  \n"
		"\n"
		"This routine adjusts the length of each track segment crossing a FSR such that the\n"
		"integrated volume is identical to the true volume assigned by the user.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* fsr_id :  \n"
		"    the ID of the FSR of interest  \n"
		"* fsr_volume :  \n"
		"    the correct FSR volume to use  \n"
		"\n"
		""},
	 { (char *)"TrackGenerator_generateFSRCentroids", _wrap_TrackGenerator_generateFSRCentroids, METH_VARARGS, (char *)"\n"
		"\n"
		"generateFSRCentroids()  \n"
		"\n"
		"Generates the numerical centroids of the FSRs.  \n"
		"\n"
		"This routine generates the numerical centroids of the FSRs by weighting the average x and\n"
		"y values of each segment in the FSR by the segment's length and azimuthal weight. The\n"
		"numerical centroid fomula can be found in R. Ferrer et. al. \"Linear Source\n"
		"         Approximation in CASMO 5\", PHYSOR 2012.  \n"
		"\n"
		""},
	 { (char *)"TrackGenerator_splitSegments", (PyCFunction) _wrap_TrackGenerator_splitSegments, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"splitSegments(FP_PRECISION max_optical_length)  \n"
		"\n"
		"Splits Track segments into sub-segments for a user-defined maximum optical length for the\n"
		"problem.  \n"
		"\n"
		"This routine is needed so that all segment lengths fit within the exponential\n"
		"interpolation table used in the MOC transport sweep.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* max_optical_length :  \n"
		"    the maximum optical length  \n"
		"\n"
		""},
	 { (char *)"TrackGenerator_initializeSegments", _wrap_TrackGenerator_initializeSegments, METH_VARARGS, (char *)"\n"
		"\n"
		"initializeSegments()  \n"
		"\n"
		"Initialize track segments with pointers to FSR Materials.  \n"
		"\n"
		"This is called by the Solver at simulation time. This initialization is necessary since\n"
		"Materials in each FSR may be interchanged by the user in between different simulations.\n"
		"This method links each segment and fsr_data struct with the current Material found in each\n"
		"FSR.  \n"
		"\n"
		""},
	 { (char *)"TrackGenerator_printTimerReport", _wrap_TrackGenerator_printTimerReport, METH_VARARGS, (char *)"\n"
		"\n"
		"printTimerReport()  \n"
		"\n"
		"Prints a report of the timing statistics to the console.  \n"
		"\n"
		""},
	 { (char *)"TrackGenerator_resetFSRVolumes", _wrap_TrackGenerator_resetFSRVolumes, METH_VARARGS, (char *)"\n"
		"\n"
		"resetFSRVolumes()  \n"
		"\n"
		"Deletes the memory associated with the FSR volumes and resets it NULL.  \n"
		"\n"
		""},
	 { (char *)"TrackGenerator_swigregister", TrackGenerator_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ExpEvaluator", _wrap_new_ExpEvaluator, METH_VARARGS, (char *)"\n"
		"\n"
		"ExpEvaluator()  \n"
		"\n"
		"Constructor initializes array pointers to NULL.  \n"
		"\n"
		"The constructor sets the interpolation scheme as the default for computing exponentials.  \n"
		"\n"
		""},
	 { (char *)"delete_ExpEvaluator", _wrap_delete_ExpEvaluator, METH_VARARGS, (char *)"\n"
		"\n"
		"~ExpEvaluator()  \n"
		"\n"
		"Destructor deletes table for linear interpolation of exponentials.  \n"
		"\n"
		""},
	 { (char *)"ExpEvaluator_setQuadrature", (PyCFunction) _wrap_ExpEvaluator_setQuadrature, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"setQuadrature(Quadrature *quadrature)  \n"
		"\n"
		"Set the Quadrature to use when computing exponentials.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* quadrature :  \n"
		"    a Quadrature object pointer  \n"
		"\n"
		""},
	 { (char *)"ExpEvaluator_setMaxOpticalLength", (PyCFunction) _wrap_ExpEvaluator_setMaxOpticalLength, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"setMaxOpticalLength(FP_PRECISION max_optical_length)  \n"
		"\n"
		"Sets the maximum optical length covered in the exponential interpolation table.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* max_optical_length :  \n"
		"    the maximum optical length  \n"
		"\n"
		""},
	 { (char *)"ExpEvaluator_setExpPrecision", (PyCFunction) _wrap_ExpEvaluator_setExpPrecision, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"setExpPrecision(FP_PRECISION exp_precision)  \n"
		"\n"
		"Sets the maximum acceptable approximation error for exponentials.  \n"
		"\n"
		"This routine only affects the construction of the linear interpolation table for\n"
		"exponentials, if in use. By default, a value of 1E-5 is used for the table, as recommended\n"
		"by the analysis of Yamamoto in his 2004 paper on the subject.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* exp_precision :  \n"
		"    the maximum exponential approximation error  \n"
		"\n"
		""},
	 { (char *)"ExpEvaluator_useInterpolation", _wrap_ExpEvaluator_useInterpolation, METH_VARARGS, (char *)"\n"
		"\n"
		"useInterpolation()  \n"
		"\n"
		"Use linear interpolation to compute exponentials.  \n"
		"\n"
		""},
	 { (char *)"ExpEvaluator_useIntrinsic", _wrap_ExpEvaluator_useIntrinsic, METH_VARARGS, (char *)"\n"
		"\n"
		"useIntrinsic()  \n"
		"\n"
		"Use the exponential intrinsic exp(...) to compute exponentials.  \n"
		"\n"
		""},
	 { (char *)"ExpEvaluator_getMaxOpticalLength", _wrap_ExpEvaluator_getMaxOpticalLength, METH_VARARGS, (char *)"\n"
		"\n"
		"getMaxOpticalLength() -> FP_PRECISION  \n"
		"\n"
		"Gets the maximum optical length covered with the exponential interpolation table.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"max_optical_length the maximum optical length  \n"
		"\n"
		""},
	 { (char *)"ExpEvaluator_getExpPrecision", _wrap_ExpEvaluator_getExpPrecision, METH_VARARGS, (char *)"\n"
		"\n"
		"getExpPrecision() -> FP_PRECISION  \n"
		"\n"
		"Gets the maximum acceptable approximation error for exponentials.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the maximum exponential approximation error  \n"
		"\n"
		""},
	 { (char *)"ExpEvaluator_isUsingInterpolation", _wrap_ExpEvaluator_isUsingInterpolation, METH_VARARGS, (char *)"\n"
		"\n"
		"isUsingInterpolation() -> bool  \n"
		"\n"
		"Returns true if using linear interpolation to compute exponentials.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"true if so, false otherwise  \n"
		"\n"
		""},
	 { (char *)"ExpEvaluator_getTableSpacing", _wrap_ExpEvaluator_getTableSpacing, METH_VARARGS, (char *)"\n"
		"\n"
		"getTableSpacing() -> FP_PRECISION  \n"
		"\n"
		"Returns the exponential table spacing.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"exponential table spacing  \n"
		"\n"
		""},
	 { (char *)"ExpEvaluator_getTableSize", _wrap_ExpEvaluator_getTableSize, METH_VARARGS, (char *)"\n"
		"\n"
		"getTableSize() -> int  \n"
		"\n"
		"Get the number of entries in the exponential interpolation table.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* entries :  \n"
		"    in the interpolation table  \n"
		"\n"
		""},
	 { (char *)"ExpEvaluator_getExpTable", _wrap_ExpEvaluator_getExpTable, METH_VARARGS, (char *)"\n"
		"\n"
		"getExpTable() -> FP_PRECISION *  \n"
		"\n"
		"Returns a pointer to the exponential interpolation table.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"pointer to the exponential interpolation table  \n"
		"\n"
		""},
	 { (char *)"ExpEvaluator_initialize", _wrap_ExpEvaluator_initialize, METH_VARARGS, (char *)"\n"
		"\n"
		"initialize()  \n"
		"\n"
		"If using linear interpolation, builds the table for each polar angle.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* tolerance :  \n"
		"    the minimum acceptable interpolation accuracy  \n"
		"\n"
		""},
	 { (char *)"ExpEvaluator_computeExponential", (PyCFunction) _wrap_ExpEvaluator_computeExponential, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"computeExponential(FP_PRECISION tau, int polar) -> FP_PRECISION  \n"
		"\n"
		"Computes the exponential term for a optical length and polar angle.  \n"
		"\n"
		"This method computes $ 1 - exp(-\\tau/sin(\\theta_p)) $ for some optical path length and\n"
		"polar angle. This method uses either a linear interpolation table (default) or the\n"
		"exponential intrinsic exp(...) function.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* tau :  \n"
		"    the optical path length (e.g., sigma_t times length)  \n"
		"* polar :  \n"
		"    the polar angle index  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the evaluated exponential  \n"
		"\n"
		""},
	 { (char *)"ExpEvaluator_swigregister", ExpEvaluator_swigregister, METH_VARARGS, NULL},
	 { (char *)"universe_id", _wrap_universe_id, METH_VARARGS, (char *)"\n"
		"\n"
		"universe_id() -> int  \n"
		"\n"
		"Returns an auto-generated unique Universe ID.  \n"
		"\n"
		"This method is intended as a utility method for user's writing OpenMOC input files. The\n"
		"method makes use of a static Universe ID which is incremented each time the method is\n"
		"called to enable unique generation of monotonically increasing IDs. The method's first ID\n"
		"begins at 10000. Hence, user-defined Universe IDs greater than or equal to 10000 is\n"
		"prohibited.  \n"
		"\n"
		""},
	 { (char *)"reset_universe_id", _wrap_reset_universe_id, METH_VARARGS, (char *)"\n"
		"\n"
		"reset_universe_id()  \n"
		"\n"
		"Resets the auto-generated unique Universe ID counter to 10000.  \n"
		"\n"
		""},
	 { (char *)"maximize_universe_id", (PyCFunction) _wrap_maximize_universe_id, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"maximize_universe_id(int universe_id)  \n"
		"\n"
		"Maximize the auto-generated unique Universe ID counter.  \n"
		"\n"
		"This method updates the auto-generated unique Universe ID counter if the input parameter\n"
		"is greater than the present value. This is useful for the OpenMC compatibility module to\n"
		"ensure that the auto-generated Universe IDs do not collide with those created in OpenMC.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* universe_id :  \n"
		"    the id assigned to the auto-generated counter  \n"
		"\n"
		""},
	 { (char *)"SIMPLE_swigconstant", SIMPLE_swigconstant, METH_VARARGS, NULL},
	 { (char *)"LATTICE_swigconstant", LATTICE_swigconstant, METH_VARARGS, NULL},
	 { (char *)"new_Universe", (PyCFunction) _wrap_new_Universe, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"Universe(const int id=-1, const char *name=\"\")  \n"
		"\n"
		"Constructor assigns a unique and user-specified ID for the Universe.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* id :  \n"
		"    the user-specified optional Universe ID  \n"
		"* name :  \n"
		"    the user-specified optional Universe ID  \n"
		"\n"
		""},
	 { (char *)"delete_Universe", _wrap_delete_Universe, METH_VARARGS, (char *)"\n"
		"\n"
		"~Universe()  \n"
		"\n"
		"Destructor clears the Cell pointers container.  \n"
		"\n"
		""},
	 { (char *)"Universe_getUid", _wrap_Universe_getUid, METH_VARARGS, (char *)"\n"
		"\n"
		"getUid() const  -> int  \n"
		"\n"
		"Returns the Universe's unique ID.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the Universe's unique ID.  \n"
		"\n"
		""},
	 { (char *)"Universe_getId", _wrap_Universe_getId, METH_VARARGS, (char *)"\n"
		"\n"
		"getId() const  -> int  \n"
		"\n"
		"Return the user-specified ID for this Universe.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the user-specified Universe ID  \n"
		"\n"
		""},
	 { (char *)"Universe_getName", _wrap_Universe_getName, METH_VARARGS, (char *)"\n"
		"\n"
		"getName() const  -> char *  \n"
		"\n"
		"Return the user-defined name of the Universe.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the Universe name  \n"
		"\n"
		""},
	 { (char *)"Universe_getType", _wrap_Universe_getType, METH_VARARGS, (char *)"\n"
		"\n"
		"getType() -> universeType  \n"
		"\n"
		"Return the Universe type (SIMPLE or LATTICE).  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the Universe type  \n"
		"\n"
		""},
	 { (char *)"Universe_getNumCells", _wrap_Universe_getNumCells, METH_VARARGS, (char *)"\n"
		"\n"
		"getNumCells() const  -> int  \n"
		"\n"
		"Return the number of Cells in this Universe.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the number of Cells  \n"
		"\n"
		""},
	 { (char *)"Universe_getMinX", _wrap_Universe_getMinX, METH_VARARGS, (char *)"\n"
		"\n"
		"getMinX() -> double  \n"
		"\n"
		"Aggregates a list (vector) of the IDs of all Materials within the MATERIAL type Cells\n"
		"filling this Universe.  \n"
		"\n"
		"Note that this method only searches the first level of Cells below this Universe within\n"
		"the nested Universe coordinate system.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"a vector of Material IDs  \n"
		"\n"
		""},
	 { (char *)"Universe_getMaxX", _wrap_Universe_getMaxX, METH_VARARGS, (char *)"\n"
		"\n"
		"getMaxX() -> double  \n"
		"\n"
		"Returns the maximum reachable x-coordinate in the Universe.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the maximum reachable x-coordinate  \n"
		"\n"
		""},
	 { (char *)"Universe_getMinY", _wrap_Universe_getMinY, METH_VARARGS, (char *)"\n"
		"\n"
		"getMinY() -> double  \n"
		"\n"
		"Returns the minimum reachable y-coordinate in the Universe.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the minimum reachable y-coordinate  \n"
		"\n"
		""},
	 { (char *)"Universe_getMaxY", _wrap_Universe_getMaxY, METH_VARARGS, (char *)"\n"
		"\n"
		"getMaxY() -> double  \n"
		"\n"
		"Returns the maximum reachable y-coordinate in the Universe.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the maximum reachable y-coordinate  \n"
		"\n"
		""},
	 { (char *)"Universe_getMinZ", _wrap_Universe_getMinZ, METH_VARARGS, (char *)"\n"
		"\n"
		"getMinZ() -> double  \n"
		"\n"
		"Returns the minimum reachable z-coordinate in the Universe.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the minimum reachable z-coordinate  \n"
		"\n"
		""},
	 { (char *)"Universe_getMaxZ", _wrap_Universe_getMaxZ, METH_VARARGS, (char *)"\n"
		"\n"
		"getMaxZ() -> double  \n"
		"\n"
		"Returns the maximum reachable z-coordinate in the Universe.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the maximum reachable z-coordinate  \n"
		"\n"
		""},
	 { (char *)"Universe_getMinXBoundaryType", _wrap_Universe_getMinXBoundaryType, METH_VARARGS, (char *)"\n"
		"\n"
		"getMinXBoundaryType() -> boundaryType  \n"
		"\n"
		"Returns the boundary conditions (VACUUM or REFLECTIVE) at the minimum reachable\n"
		"x-coordinate in the Universe.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the boundary conditions at the minimum reachable x-coordinate  \n"
		"\n"
		""},
	 { (char *)"Universe_getMaxXBoundaryType", _wrap_Universe_getMaxXBoundaryType, METH_VARARGS, (char *)"\n"
		"\n"
		"getMaxXBoundaryType() -> boundaryType  \n"
		"\n"
		"Returns the boundary conditions (VACUUM or REFLECTIVE) at the maximum reachable\n"
		"x-coordinate in the Universe.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the boundary conditions at the maximum reachable x-coordinate  \n"
		"\n"
		""},
	 { (char *)"Universe_getMinYBoundaryType", _wrap_Universe_getMinYBoundaryType, METH_VARARGS, (char *)"\n"
		"\n"
		"getMinYBoundaryType() -> boundaryType  \n"
		"\n"
		"Returns the boundary conditions (VACUUM or REFLECTIVE) at the minimum reachable\n"
		"y-coordinate in the Universe.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the boundary conditions at the minimum reachable y-coordinate  \n"
		"\n"
		""},
	 { (char *)"Universe_getMaxYBoundaryType", _wrap_Universe_getMaxYBoundaryType, METH_VARARGS, (char *)"\n"
		"\n"
		"getMaxYBoundaryType() -> boundaryType  \n"
		"\n"
		"Returns the boundary conditions (VACUUM or REFLECTIVE) at the maximum reachable\n"
		"y-coordinate in the Universe.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the boundary conditions at the maximum reachable y-coordinate  \n"
		"\n"
		""},
	 { (char *)"Universe_getCell", (PyCFunction) _wrap_Universe_getCell, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"getCell(int cell_id) -> Cell *  \n"
		"\n"
		"Returns a Cell in this universe.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* cell_id :  \n"
		"    the integer the cell_id  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"Returns the cell pointer.  \n"
		"\n"
		""},
	 { (char *)"Universe_getCells", _wrap_Universe_getCells, METH_VARARGS, (char *)"\n"
		"\n"
		"getCells() const  -> std::map< int, Cell * >  \n"
		"\n"
		"Return the container of Cell IDs and Cell pointers in this Universe.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"std::map of Cell IDs  \n"
		"\n"
		""},
	 { (char *)"Universe_getAllCells", _wrap_Universe_getAllCells, METH_VARARGS, (char *)"\n"
		"\n"
		"getAllCells() -> std::map< int, Cell * >  \n"
		"\n"
		"Returns the std::map of Cell IDs and Cell pointers in this Universe at all nested Universe\n"
		"levels.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"std::map of Cell IDs and pointers  \n"
		"\n"
		""},
	 { (char *)"Universe_getAllMaterials", _wrap_Universe_getAllMaterials, METH_VARARGS, (char *)"\n"
		"\n"
		"getAllMaterials() -> std::map< int, Material * >  \n"
		"\n"
		"Returns the std::map of all IDs and Material pointers filling this Universe.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"std::map of Material IDs and pointers  \n"
		"\n"
		""},
	 { (char *)"Universe_getAllUniverses", _wrap_Universe_getAllUniverses, METH_VARARGS, (char *)"\n"
		"\n"
		"getAllUniverses() -> std::map< int, Universe * >  \n"
		"\n"
		"Returns the std::map of all nested Universe IDs and Universe pointers filling this\n"
		"Universe.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"std::map of Universe IDs and pointers  \n"
		"\n"
		""},
	 { (char *)"Universe_isFissionable", _wrap_Universe_isFissionable, METH_VARARGS, (char *)"\n"
		"\n"
		"isFissionable() -> bool  \n"
		"\n"
		"Returns true if the Universe contains a Cell filled by a fissionable Material and false\n"
		"otherwise.  \n"
		"\n"
		"This method should not be called prior to the calling of the\n"
		"Geometry::computeFissionability() method.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"true if contains a fissionable Material  \n"
		"\n"
		""},
	 { (char *)"Universe_setName", (PyCFunction) _wrap_Universe_setName, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"setName(const char *name)  \n"
		"\n"
		"Sets the name of the Universe.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* name :  \n"
		"    the Universe name string  \n"
		"\n"
		""},
	 { (char *)"Universe_setType", (PyCFunction) _wrap_Universe_setType, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"setType(universeType type)  \n"
		"\n"
		"Sets the Universe type to SIMPLE or LATTICE.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* type :  \n"
		"    the Universe type  \n"
		"\n"
		""},
	 { (char *)"Universe_addCell", (PyCFunction) _wrap_Universe_addCell, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"addCell(Cell *cell)  \n"
		"\n"
		"Adds a Cell to this Universe.  \n"
		"\n"
		"Stores the user-specified Cell ID and Cell pointer in a std::map along with all of other\n"
		"Cells added to this Universe.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* cell :  \n"
		"    the Cell pointer  \n"
		"\n"
		""},
	 { (char *)"Universe_removeCell", (PyCFunction) _wrap_Universe_removeCell, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"removeCell(Cell *cell)  \n"
		"\n"
		"Removes a Cell from this Universe's container of Cells.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* cell :  \n"
		"    a pointer to the Cell to remove  \n"
		"\n"
		""},
	 { (char *)"Universe_findCell", (PyCFunction) _wrap_Universe_findCell, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"findCell(LocalCoords *coords) -> Cell *  \n"
		"\n"
		"Finds the Cell for which a LocalCoords object resides.  \n"
		"\n"
		"Finds the Cell that a LocalCoords object is located inside by checking each of this\n"
		"Universe's Cells. Returns NULL if the LocalCoords is not in any of the Cells.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* coords :  \n"
		"    a pointer to the LocalCoords of interest  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"a pointer the Cell where the LocalCoords is located  \n"
		"\n"
		""},
	 { (char *)"Universe_setFissionability", (PyCFunction) _wrap_Universe_setFissionability, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"setFissionability(bool fissionable)  \n"
		"\n"
		"Sets whether or not this Universe contains a fissionable Material with a non-zero fission\n"
		"cross-section.  \n"
		"\n"
		"This method is called by the Geometry::computeFissionability() class method.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* fissionable :  \n"
		"    true if the Universe contains a fissionable Material; false otherwise  \n"
		"\n"
		""},
	 { (char *)"Universe_subdivideCells", (PyCFunction) _wrap_Universe_subdivideCells, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"subdivideCells(double max_radius=INFINITY)  \n"
		"\n"
		"Subdivides all of the Material-filled Cells within this Universe into rings and angular\n"
		"sectors aligned with the z-axis.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* max_radius :  \n"
		"    the maximum allowable radius used in the subdivisions  \n"
		"\n"
		""},
	 { (char *)"Universe_buildNeighbors", _wrap_Universe_buildNeighbors, METH_VARARGS, (char *)"\n"
		"\n"
		"buildNeighbors()  \n"
		"\n"
		"Builds collections of neighboring Cells for all Cells in this Universe for optimized ray\n"
		"tracing.  \n"
		"\n"
		""},
	 { (char *)"Universe_toString", _wrap_Universe_toString, METH_VARARGS, (char *)"\n"
		"\n"
		"toString() -> std::string  \n"
		"\n"
		"Convert the member attributes of this Universe to a character array.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"a character array representing the Universe's attributes  \n"
		"\n"
		""},
	 { (char *)"Universe_printString", _wrap_Universe_printString, METH_VARARGS, (char *)"\n"
		"\n"
		"printString()  \n"
		"\n"
		"Prints a string representation of the Universe's attributes to the console.  \n"
		"\n"
		""},
	 { (char *)"Universe_clone", _wrap_Universe_clone, METH_VARARGS, (char *)"\n"
		"\n"
		"clone() -> Universe *  \n"
		"\n"
		"Clones this Universe and copy cells map.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"a pointer to the Universe clone  \n"
		"\n"
		""},
	 { (char *)"Universe_swigregister", Universe_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Lattice", (PyCFunction) _wrap_new_Lattice, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"Lattice(const int id=-1, const char *name=\"\")  \n"
		"\n"
		"Constructor sets the user-specified and unique IDs for this Lattice.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* id :  \n"
		"    the user-specified optional Lattice (Universe) ID  \n"
		"* name :  \n"
		"    the user-specified optional Lattice (Universe) name  \n"
		"\n"
		""},
	 { (char *)"delete_Lattice", _wrap_delete_Lattice, METH_VARARGS, (char *)"\n"
		"\n"
		"~Lattice()  \n"
		"\n"
		"Destructor clears memory for all of Universes pointers.  \n"
		"\n"
		""},
	 { (char *)"Lattice_setOffset", (PyCFunction) _wrap_Lattice_setOffset, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"setOffset(double x, double y, double z)  \n"
		"\n"
		"Set the offset in global coordinates for this Lattice.  \n"
		"\n"
		"A lattice is assumed to be a rectilinear grid with the center/origin of the grid located\n"
		"in the center of the Lattice's parent universe. The offset represents the offset of the\n"
		"lattice center/origin with respect to the center of the parent universe. Therefore an\n"
		"offset of (-1,2) would move the center/origin of the lattice to the left 1 cm and up 2 cm.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* x :  \n"
		"    the offset in the x direction  \n"
		"* y :  \n"
		"    the offset in the y direction  \n"
		"* z :  \n"
		"    the offset in the z direction  \n"
		"\n"
		""},
	 { (char *)"Lattice_getOffset", _wrap_Lattice_getOffset, METH_VARARGS, (char *)"\n"
		"\n"
		"getOffset() -> Point *  \n"
		"\n"
		"Return a pointer to the offset for this Cell (in global coordinates).  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the offset of the Cell  \n"
		"\n"
		""},
	 { (char *)"Lattice_getNumX", _wrap_Lattice_getNumX, METH_VARARGS, (char *)"\n"
		"\n"
		"getNumX() const  -> int  \n"
		"\n"
		"Return the number of Lattice cells along the x-axis.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the number of Lattice cells along x  \n"
		"\n"
		""},
	 { (char *)"Lattice_getNumY", _wrap_Lattice_getNumY, METH_VARARGS, (char *)"\n"
		"\n"
		"getNumY() const  -> int  \n"
		"\n"
		"Return the number of Lattice cells along the y-axis.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the number of Lattice cells along y  \n"
		"\n"
		""},
	 { (char *)"Lattice_getNumZ", _wrap_Lattice_getNumZ, METH_VARARGS, (char *)"\n"
		"\n"
		"getNumZ() const  -> int  \n"
		"\n"
		"Return the number of Lattice cells along the z-axis.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the number of Lattice cells along z  \n"
		"\n"
		""},
	 { (char *)"Lattice_getWidthX", _wrap_Lattice_getWidthX, METH_VARARGS, (char *)"\n"
		"\n"
		"getWidthX() const  -> double  \n"
		"\n"
		"Return the width of the Lattice along the x-axis.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the width of the Lattice cells along x  \n"
		"\n"
		""},
	 { (char *)"Lattice_getWidthY", _wrap_Lattice_getWidthY, METH_VARARGS, (char *)"\n"
		"\n"
		"getWidthY() const  -> double  \n"
		"\n"
		"Return the width of the Lattice along the y-axis.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the width of the Lattice cells along y  \n"
		"\n"
		""},
	 { (char *)"Lattice_getWidthZ", _wrap_Lattice_getWidthZ, METH_VARARGS, (char *)"\n"
		"\n"
		"getWidthZ() const  -> double  \n"
		"\n"
		"Return the width of the Lattice along the z-axis.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the width of the Lattice cells along z  \n"
		"\n"
		""},
	 { (char *)"Lattice_getMinX", _wrap_Lattice_getMinX, METH_VARARGS, (char *)"\n"
		"\n"
		"getMinX() -> double  \n"
		"\n"
		"Returns the minimum reachable x-coordinate in the Lattice.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the minimum reachable x-coordinate  \n"
		"\n"
		""},
	 { (char *)"Lattice_getMaxX", _wrap_Lattice_getMaxX, METH_VARARGS, (char *)"\n"
		"\n"
		"getMaxX() -> double  \n"
		"\n"
		"Returns the maximum reachable x-coordinate in the Lattice.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the maximum reachable x-coordinate  \n"
		"\n"
		""},
	 { (char *)"Lattice_getMinY", _wrap_Lattice_getMinY, METH_VARARGS, (char *)"\n"
		"\n"
		"getMinY() -> double  \n"
		"\n"
		"Returns the minimum reachable y-coordinate in the Lattice.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the minimum reachable y-coordinate  \n"
		"\n"
		""},
	 { (char *)"Lattice_getMaxY", _wrap_Lattice_getMaxY, METH_VARARGS, (char *)"\n"
		"\n"
		"getMaxY() -> double  \n"
		"\n"
		"Returns the maximum reachable y-coordinate in the Lattice.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the maximum reachable y-coordinate  \n"
		"\n"
		""},
	 { (char *)"Lattice_getMinZ", _wrap_Lattice_getMinZ, METH_VARARGS, (char *)"\n"
		"\n"
		"getMinZ() -> double  \n"
		"\n"
		"Returns the minimum reachable z-coordinate in the Lattice.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the minimum reachable z-coordinate  \n"
		"\n"
		""},
	 { (char *)"Lattice_getMaxZ", _wrap_Lattice_getMaxZ, METH_VARARGS, (char *)"\n"
		"\n"
		"getMaxZ() -> double  \n"
		"\n"
		"Returns the maximum reachable z-coordinate in the Lattice.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the maximum reachable z-coordinate  \n"
		"\n"
		""},
	 { (char *)"Lattice_getUniverse", (PyCFunction) _wrap_Lattice_getUniverse, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"getUniverse(int lat_x, int lat_y, int lat_z) const  -> Universe *  \n"
		"\n"
		"Returns a pointer to the Universe within a specific Lattice cell.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* lat_x :  \n"
		"    the x index to the Lattice cell  \n"
		"* lat_y :  \n"
		"    the y index to the Lattice cell  \n"
		"* lat_z :  \n"
		"    the z index to the Lattice cell  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"pointer to a Universe filling the Lattice cell  \n"
		"\n"
		""},
	 { (char *)"Lattice_getUniverses", _wrap_Lattice_getUniverses, METH_VARARGS, (char *)"\n"
		"\n"
		"getUniverses() -> std::vector< std::vector< std::vector< std::pair< int, Universe * > > >\n"
		"    > *  \n"
		"\n"
		"Return a 3D vector of the Universes in the Lattice.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"3D vector of Universes  \n"
		"\n"
		""},
	 { (char *)"Lattice_getUniqueUniverses", _wrap_Lattice_getUniqueUniverses, METH_VARARGS, (char *)"\n"
		"\n"
		"getUniqueUniverses() -> std::map< int, Universe * >  \n"
		"\n"
		"Aggregates a list (vector) of the IDs of all Universes within the FILL type Cells filling\n"
		"this Universe.  \n"
		"\n"
		"Note that this method only searches the first level of Cells below this Universe within\n"
		"the nested Universe coordinate system.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"a vector of Universe IDs  \n"
		"\n"
		""},
	 { (char *)"Lattice_getAllCells", _wrap_Lattice_getAllCells, METH_VARARGS, (char *)"\n"
		"\n"
		"getAllCells() -> std::map< int, Cell * >  \n"
		"\n"
		"Returns the std::map of Cell IDs and Cell pointers in this Lattice at all nested Universe\n"
		"levels.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"std::map of Cell IDs and pointers  \n"
		"\n"
		""},
	 { (char *)"Lattice_getAllUniverses", _wrap_Lattice_getAllUniverses, METH_VARARGS, (char *)"\n"
		"\n"
		"getAllUniverses() -> std::map< int, Universe * >  \n"
		"\n"
		"Returns the std::map of all nested Universe IDs and Universe pointers filling this\n"
		"Lattice.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"std::map of Universe IDs and pointers  \n"
		"\n"
		""},
	 { (char *)"Lattice_setNumX", (PyCFunction) _wrap_Lattice_setNumX, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"setNumX(int num_x)  \n"
		"\n"
		"Set the number of Lattice cells along the x-axis.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* num_x :  \n"
		"    the number of Lattice cells along x  \n"
		"\n"
		""},
	 { (char *)"Lattice_setNumY", (PyCFunction) _wrap_Lattice_setNumY, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"setNumY(int num_y)  \n"
		"\n"
		"Set the number of Lattice cells along the y-axis.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* num_y :  \n"
		"    the number of Lattice cells along y  \n"
		"\n"
		""},
	 { (char *)"Lattice_setNumZ", (PyCFunction) _wrap_Lattice_setNumZ, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"setNumZ(int num_z)  \n"
		"\n"
		"Set the number of Lattice cells along the z-axis.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* num_z :  \n"
		"    the number of Lattice cells along z  \n"
		"\n"
		""},
	 { (char *)"Lattice_setWidth", (PyCFunction) _wrap_Lattice_setWidth, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"setWidth(double width_x, double width_y, double width_z=std::numeric_limits< double\n"
		"    >::infinity())  \n"
		"\n"
		"Set the width of each Lattice cell.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* width_x :  \n"
		"    the width along the x-axis in centimeters  \n"
		"* width_y :  \n"
		"    the width along the y-axis in centimeters  \n"
		"* width_z :  \n"
		"    the width along the z-axis in centimeters  \n"
		"\n"
		""},
	 { (char *)"Lattice_setUniverses", (PyCFunction) _wrap_Lattice_setUniverses, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"setUniverses(int num_z, int num_y, int num_x, Universe **universes)  \n"
		"\n"
		"Sets the array of Universe pointers filling each Lattice cell.  \n"
		"\n"
		"This is a helper method for SWIG to allow users to assign Universes to a Lattice using a\n"
		"3D Python list (list of lists of lists). An example how this method can be called from\n"
		"Python is as follows:  \n"
		"\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* num_z :  \n"
		"    the number of Lattice cells along z  \n"
		"* num_y :  \n"
		"    the number of Lattice cells along y  \n"
		"* num_x :  \n"
		"    the number of Lattice cells along x  \n"
		"* universes :  \n"
		"    the array of Universes for each Lattice cell  \n"
		"\n"
		""},
	 { (char *)"Lattice_updateUniverse", (PyCFunction) _wrap_Lattice_updateUniverse, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"updateUniverse(int lat_x, int lat_y, int lat_z, Universe *universe)  \n"
		"\n"
		"Update the Universe in a particular Lattice cell.  \n"
		"\n"
		"This method may only be used after an array of Universes has been assigned with the\n"
		"Lattice::setUniverses(...) method.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* lat_x :  \n"
		"    the Lattice cell index along x  \n"
		"* lat_y :  \n"
		"    the Lattice cell index along y  \n"
		"* lat_z :  \n"
		"    the Lattice cell index along z  \n"
		"* universe :  \n"
		"    the Universe to insert into the Lattice  \n"
		"\n"
		""},
	 { (char *)"Lattice_removeUniverse", (PyCFunction) _wrap_Lattice_removeUniverse, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"removeUniverse(Universe *universe)  \n"
		"\n"
		"Removes all references to a Universe from the Lattice.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* universe :  \n"
		"    the Universe to remove  \n"
		"\n"
		""},
	 { (char *)"Lattice_subdivideCells", (PyCFunction) _wrap_Lattice_subdivideCells, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"subdivideCells(double max_radius=INFINITY)  \n"
		"\n"
		"Subdivides all of the Material-filled Cells within this Lattice into rings and angular\n"
		"sectors aligned with the z-axis.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* max_radius :  \n"
		"    the maximum allowable radius used in the subdivisions  \n"
		"\n"
		""},
	 { (char *)"Lattice_buildNeighbors", _wrap_Lattice_buildNeighbors, METH_VARARGS, (char *)"\n"
		"\n"
		"buildNeighbors()  \n"
		"\n"
		"Builds collections of neighboring Cells for all Cells in each Universe in the Lattice for\n"
		"optimized ray tracing.  \n"
		"\n"
		""},
	 { (char *)"Lattice_withinBounds", (PyCFunction) _wrap_Lattice_withinBounds, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"withinBounds(Point *point) -> bool  \n"
		"\n"
		"Checks if a Point is within the bounds of a Lattice.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* point :  \n"
		"    a pointer to the Point of interest  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"true if the Point is in the bounds, false if not  \n"
		"\n"
		""},
	 { (char *)"Lattice_findCell", (PyCFunction) _wrap_Lattice_findCell, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"findCell(LocalCoords *coords) -> Cell *  \n"
		"\n"
		"Finds the Cell within this Lattice that a LocalCoords is in.  \n"
		"\n"
		"This method first find the Lattice cell, then searches the Universe inside that Lattice\n"
		"cell. If LocalCoords is outside the bounds of the Lattice, this method will return NULL.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* coords :  \n"
		"    the LocalCoords of interest  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"a pointer to the Cell this LocalCoord is in or NULL  \n"
		"\n"
		""},
	 { (char *)"Lattice_minSurfaceDist", (PyCFunction) _wrap_Lattice_minSurfaceDist, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"minSurfaceDist(LocalCoords *coords) -> double  \n"
		"\n"
		"Finds the distance to the nearest surface.  \n"
		"\n"
		"Knowing that a Lattice must be cartesian, this function computes the distance to the\n"
		"nearest boundary between lattice cells in the direction of the track.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* coords :  \n"
		"    a pointer to a localcoords object  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the distance to the nearest Lattice cell boundary  \n"
		"\n"
		""},
	 { (char *)"Lattice_getLatX", (PyCFunction) _wrap_Lattice_getLatX, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"getLatX(Point *point) -> int  \n"
		"\n"
		"Finds the Lattice cell x index that a point lies in.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* point :  \n"
		"    a pointer to a point being evaluated.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the Lattice cell x index.  \n"
		"\n"
		""},
	 { (char *)"Lattice_getLatY", (PyCFunction) _wrap_Lattice_getLatY, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"getLatY(Point *point) -> int  \n"
		"\n"
		"Finds the Lattice cell y index that a point lies in.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* point :  \n"
		"    a pointer to a point being evaluated.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the Lattice cell y index.  \n"
		"\n"
		""},
	 { (char *)"Lattice_getLatZ", (PyCFunction) _wrap_Lattice_getLatZ, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"getLatZ(Point *point) -> int  \n"
		"\n"
		"Finds the Lattice cell z index that a point lies in.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* point :  \n"
		"    a pointer to a point being evaluated.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the Lattice cell z index.  \n"
		"\n"
		""},
	 { (char *)"Lattice_getLatticeCell", (PyCFunction) _wrap_Lattice_getLatticeCell, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"getLatticeCell(Point *point) -> int  \n"
		"\n"
		"Finds the Lattice cell index that a point lies in.  \n"
		"\n"
		"Lattice cells are numbered starting with 0 x-min/y-min/z-min corner. Lattice cell IDs then\n"
		"increase monotonically from x-min to x-max, y-min to y-max, and z-min to z-max. Note that\n"
		"values increase first on the x-axis, followed by the y-axis, then on the z-axis. For\n"
		"example, the indices for a 4 x 4 x 1 lattice: 12 13 14 15 8 9 10 11 4 5 6 7 0 1 2 3  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* point :  \n"
		"    a pointer to a point being evaluated.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the Lattice cell index.  \n"
		"\n"
		""},
	 { (char *)"Lattice_getLatticeSurface", (PyCFunction) _wrap_Lattice_getLatticeSurface, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"getLatticeSurface(int cell, Point *point) -> int  \n"
		"\n"
		"Finds the Lattice cell surface that a point lies on. If the point is not on a surface, -1\n"
		"is returned.  \n"
		"\n"
		"The surface indices are defined in constants.h as they need to be consistent with the\n"
		"surface constant definitions used in Cmfd. The index returned takes into account the cell\n"
		"index and returns NUM_SURFACES*cell_index + surface_index.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* cell :  \n"
		"    the cell index that the point is in.  \n"
		"* point :  \n"
		"    a pointer to a point being evaluated.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the Lattice surface index.  \n"
		"\n"
		""},
	 { (char *)"Lattice_getDistanceToSurface", (PyCFunction) _wrap_Lattice_getDistanceToSurface, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"getDistanceToSurface(int cell, Point *point, int surface) -> double  \n"
		"\n"
		"Finds the distance from a point to a particular lattice cell surface.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* cell :  \n"
		"    the cell index that the point is in.  \n"
		"* point :  \n"
		"    a pointer to a point being evaluated.  \n"
		"* surface :  \n"
		"    a surface id to get the distance to.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the distance to the lattice cell surface of interest.  \n"
		"\n"
		""},
	 { (char *)"Lattice_toString", _wrap_Lattice_toString, METH_VARARGS, (char *)"\n"
		"\n"
		"toString() -> std::string  \n"
		"\n"
		"Converts a Lattice's attributes to a character array representation.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"character array of this Lattice's attributes  \n"
		"\n"
		""},
	 { (char *)"Lattice_printString", _wrap_Lattice_printString, METH_VARARGS, (char *)"\n"
		"\n"
		"printString()  \n"
		"\n"
		"Prints a string representation of all of the Lattice's attributes to the console.  \n"
		"\n"
		""},
	 { (char *)"Lattice_swigregister", Lattice_swigregister, METH_VARARGS, NULL},
	 { (char *)"stencilCompare", (PyCFunction) _wrap_stencilCompare, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"stencilCompare(const std::pair< int, FP_PRECISION > &firstElem, const std::pair< int,\n"
		"    FP_PRECISION > &secondElem) -> bool  \n"
		"\n"
		"Comparitor for sorting k-nearest stencil std::pair objects  \n"
		"\n"
		""},
	 { (char *)"new_Cmfd", _wrap_new_Cmfd, METH_VARARGS, (char *)"\n"
		"\n"
		"Cmfd()  \n"
		"\n"
		"Constructor initializes boundaries and variables that describe the Cmfd object.  \n"
		"\n"
		"The construcor initializes the many variables that describe the CMFD mesh and are used to\n"
		"solve the nonlinear diffusion acceleration problem.  \n"
		"\n"
		""},
	 { (char *)"delete_Cmfd", _wrap_delete_Cmfd, METH_VARARGS, (char *)"\n"
		"\n"
		"~Cmfd()  \n"
		"\n"
		"Destructor.  \n"
		"\n"
		""},
	 { (char *)"Cmfd_computeKeff", (PyCFunction) _wrap_Cmfd_computeKeff, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"computeKeff(int moc_iteration) -> FP_PRECISION  \n"
		"\n"
		"Solve the nonlinear diffusion acceleration problem to accelerate the convergence of the\n"
		"MOC problem.  \n"
		"\n"
		"This method uses the information from the last MOC transport sweep and solves a simplified\n"
		"nonlinear diffusion problem. The diffusion problem is tightly converged and the solution\n"
		"is used to update the the solution of the MOC problem.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* moc_iteration :  \n"
		"    MOC iteration number  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"The dominant eigenvalue of the nonlinear diffusion problem  \n"
		"\n"
		""},
	 { (char *)"Cmfd_initialize", _wrap_Cmfd_initialize, METH_VARARGS, (char *)"\n"
		"\n"
		"initialize()  \n"
		"\n"
		"Initialize the Matrix and Vector objects, k-nearest stencils, the CMFD cell currents and\n"
		"MOC materials.  \n"
		"\n"
		""},
	 { (char *)"Cmfd_initializeCellMap", _wrap_Cmfd_initializeCellMap, METH_VARARGS, (char *)"\n"
		"\n"
		"initializeCellMap()  \n"
		"\n"
		"Initializes the vector of vectors that links CMFD cells with FSRs.  \n"
		"\n"
		"This method is called by the geometry once the CMFD mesh has been initialized by the\n"
		"geometry. This method allocates a vector for each CMFD cell that is used to store the FSR\n"
		"ids contained within that cell.  \n"
		"\n"
		""},
	 { (char *)"Cmfd_initializeGroupMap", _wrap_Cmfd_initializeGroupMap, METH_VARARGS, (char *)"\n"
		"\n"
		"initializeGroupMap()  \n"
		"\n"
		"Initialize and set array that links the MOC energy groups to the CMFD energy groups.  \n"
		"\n"
		"This method initializes the _group_indices_map, which is a 1D array of length\n"
		"_num_moc_groups that maps the MOC energy groups to CMFD energy groups. The indices into\n"
		"_group_indices_map are the MOC energy groups and the values are the CMFD energy groups.  \n"
		"\n"
		""},
	 { (char *)"Cmfd_initializeLattice", (PyCFunction) _wrap_Cmfd_initializeLattice, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"initializeLattice(Point *offset)  \n"
		"\n"
		"Initialize the CMFD lattice.  \n"
		"\n"
		""},
	 { (char *)"Cmfd_findCmfdCell", (PyCFunction) _wrap_Cmfd_findCmfdCell, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"findCmfdCell(LocalCoords *coords) -> int  \n"
		"\n"
		"Find the CMFD cell that a LocalCoords object is in.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* coords :  \n"
		"    The coords being evaluated.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"The CMFD cell ID.  \n"
		"\n"
		""},
	 { (char *)"Cmfd_findCmfdSurface", (PyCFunction) _wrap_Cmfd_findCmfdSurface, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"findCmfdSurface(int cell_id, LocalCoords *coords) -> int  \n"
		"\n"
		"Find the cmfd surface that a LocalCoords object lies on.  \n"
		"\n"
		"If the coords is not on a surface, -1 is returned. Otherwise, the surface ID is returned.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* cell_id :  \n"
		"    The CMFD cell ID that the local coords is in.  \n"
		"* coords :  \n"
		"    The coords being evaluated.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"The surface ID.  \n"
		"\n"
		""},
	 { (char *)"Cmfd_addFSRToCell", (PyCFunction) _wrap_Cmfd_addFSRToCell, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"addFSRToCell(int cell_id, int fsr_id)  \n"
		"\n"
		"Add an FSR ID to a vector that contains all the FSR IDs contained within a CMFD mesh cell.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* cell_id :  \n"
		"    The CMFD cell ID.  \n"
		"* fsr_id :  \n"
		"    The FSR ID.  \n"
		"\n"
		""},
	 { (char *)"Cmfd_zeroCurrents", _wrap_Cmfd_zeroCurrents, METH_VARARGS, (char *)"\n"
		"\n"
		"zeroCurrents()  \n"
		"\n"
		"Zero the surface currents for each mesh cell and energy group.  \n"
		"\n"
		""},
	 { (char *)"Cmfd_tallyCurrent", (PyCFunction) _wrap_Cmfd_tallyCurrent, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"tallyCurrent(segment *curr_segment, FP_PRECISION *track_flux, int azim_index, bool fwd)  \n"
		"\n"
		"Tallies the current contribution from this segment across the the appropriate CMFD mesh\n"
		"cell surface.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* curr_segment :  \n"
		"    The current Track segment  \n"
		"* track_flux :  \n"
		"    The outgoing angular flux for this segment  \n"
		"* azim_index :  \n"
		"    Azimuthal angle index of the current Track  \n"
		"* fwd :  \n"
		"    Boolean indicating direction of integration along segment  \n"
		"\n"
		""},
	 { (char *)"Cmfd_updateBoundaryFlux", (PyCFunction) _wrap_Cmfd_updateBoundaryFlux, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"updateBoundaryFlux(Track **tracks, FP_PRECISION *boundary_flux, int num_tracks)  \n"
		"\n"
		"Update the MOC boundary fluxes.  \n"
		"\n"
		"The MOC boundary fluxes are updated using the P0 approximation. With this approximation,\n"
		"the boundary fluxes are updated using the ratio of new to old flux for the cell that the\n"
		"outgoing flux from the track enters.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* tracks :  \n"
		"    2D array of Tracks  \n"
		"* boundary_flux :  \n"
		"    Array of boundary fluxes  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"The number of Tracks  \n"
		"\n"
		""},
	 { (char *)"Cmfd_getNumCmfdGroups", _wrap_Cmfd_getNumCmfdGroups, METH_VARARGS, (char *)"\n"
		"\n"
		"getNumCmfdGroups() -> int  \n"
		"\n"
		"Get the number of coarse CMFD energy groups.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"The number of CMFD energy groups  \n"
		"\n"
		""},
	 { (char *)"Cmfd_getNumMOCGroups", _wrap_Cmfd_getNumMOCGroups, METH_VARARGS, (char *)"\n"
		"\n"
		"getNumMOCGroups() -> int  \n"
		"\n"
		"Get the number of MOC energy groups.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"The number of MOC energy groups  \n"
		"\n"
		""},
	 { (char *)"Cmfd_getNumCells", _wrap_Cmfd_getNumCells, METH_VARARGS, (char *)"\n"
		"\n"
		"getNumCells() -> int  \n"
		"\n"
		"Get the number of CMFD cells.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"The number of CMFD cells  \n"
		"\n"
		""},
	 { (char *)"Cmfd_getCmfdGroup", (PyCFunction) _wrap_Cmfd_getCmfdGroup, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"getCmfdGroup(int group) -> int  \n"
		"\n"
		"Get the CMFD group given an MOC group.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* group :  \n"
		"    The MOC energy group  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"The CMFD energy group  \n"
		"\n"
		""},
	 { (char *)"Cmfd_getBoundary", (PyCFunction) _wrap_Cmfd_getBoundary, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"getBoundary(int side) -> int  \n"
		"\n"
		"Get the boundaryType for one side of the CMFD mesh.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* side :  \n"
		"    The CMFD mesh surface ID.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"The boundaryType for the surface.  \n"
		"\n"
		""},
	 { (char *)"Cmfd_getLattice", _wrap_Cmfd_getLattice, METH_VARARGS, (char *)"\n"
		"\n"
		"getLattice() -> Lattice *  \n"
		"\n"
		"Returns the Lattice object used as the CMFD mesh.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"A pointer to a Lattice object.  \n"
		"\n"
		""},
	 { (char *)"Cmfd_getNumX", _wrap_Cmfd_getNumX, METH_VARARGS, (char *)"\n"
		"\n"
		"getNumX() -> int  \n"
		"\n"
		"Get the number of Mesh cells in a row.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"The number of Mesh cells in a row  \n"
		"\n"
		""},
	 { (char *)"Cmfd_getNumY", _wrap_Cmfd_getNumY, METH_VARARGS, (char *)"\n"
		"\n"
		"getNumY() -> int  \n"
		"\n"
		"Get the number of Mesh cells in a column.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"The number of Mesh cells in a column  \n"
		"\n"
		""},
	 { (char *)"Cmfd_convertFSRIdToCmfdCell", (PyCFunction) _wrap_Cmfd_convertFSRIdToCmfdCell, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"convertFSRIdToCmfdCell(int fsr_id) -> int  \n"
		"\n"
		"Return the CMFD cell ID that an FSR lies in.  \n"
		"\n"
		"Note that a CMFD cell is not an actual Cell object; rather, a CMFD cell is just a way of\n"
		"describing each of the rectangular regions that make up a CMFD lattice. CMFD cells are\n"
		"numbered with 0 in the lower left corner and monotonically increasing from left to right\n"
		"and from bottom to top. For example, the indices for a 4 x 4 lattice are: 12 13 14 15 8 9\n"
		"10 11 4 5 6 7 0 1 2 3  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* fsr_id :  \n"
		"    The FSR ID.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"The CMFD cell ID. Return -1 if cell is not found.  \n"
		"\n"
		""},
	 { (char *)"Cmfd_getCellFSRs", _wrap_Cmfd_getCellFSRs, METH_VARARGS, (char *)"\n"
		"\n"
		"getCellFSRs() -> std::vector< std::vector< int > > *  \n"
		"\n"
		"Return a pointer to the vector of vectors that contains the FSRs that lie in each cell.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"Vector of vectors containing FSR IDs in each cell.  \n"
		"\n"
		""},
	 { (char *)"Cmfd_isFluxUpdateOn", _wrap_Cmfd_isFluxUpdateOn, METH_VARARGS, (char *)"\n"
		"\n"
		"isFluxUpdateOn() -> bool  \n"
		"\n"
		"Get flag indicating whether to update the MOC flux.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"Boolean saying whether to update MOC flux.  \n"
		"\n"
		""},
	 { (char *)"Cmfd_isCentroidUpdateOn", _wrap_Cmfd_isCentroidUpdateOn, METH_VARARGS, (char *)"\n"
		"\n"
		"isCentroidUpdateOn() -> bool  \n"
		"\n"
		"Get flag indicating whether to use FSR centroids to update the MOC flux.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"Flag saying whether to use centroids to update MOC flux.  \n"
		"\n"
		""},
	 { (char *)"Cmfd_setSORRelaxationFactor", (PyCFunction) _wrap_Cmfd_setSORRelaxationFactor, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"setSORRelaxationFactor(FP_PRECISION SOR_factor)  \n"
		"\n"
		"Set the successive over-relaxation factor for the linear solve within the diffusion\n"
		"eigenvalue solve.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* SOR_factor :  \n"
		"    Over-relaxation factor  \n"
		"\n"
		""},
	 { (char *)"Cmfd_setGeometry", (PyCFunction) _wrap_Cmfd_setGeometry, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"setGeometry(Geometry *geometry)  \n"
		"\n"
		"Set a pointer to the Geometry.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* goemetry :  \n"
		"    A pointer to a Geometry object.  \n"
		"\n"
		""},
	 { (char *)"Cmfd_setWidthX", (PyCFunction) _wrap_Cmfd_setWidthX, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"setWidthX(double width)  \n"
		"\n"
		"Set Mesh width in the x-direction.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* width :  \n"
		"    Physical width of Mesh in the x-direction  \n"
		"\n"
		""},
	 { (char *)"Cmfd_setWidthY", (PyCFunction) _wrap_Cmfd_setWidthY, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"setWidthY(double width)  \n"
		"\n"
		"Set Mesh width in the y-direction.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* width :  \n"
		"    Physical width of Mesh in the y-direction  \n"
		"\n"
		""},
	 { (char *)"Cmfd_setNumX", (PyCFunction) _wrap_Cmfd_setNumX, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"setNumX(int num_x)  \n"
		"\n"
		"Set the number of Mesh cells in a row.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* num_x :  \n"
		"    Number of Mesh cells in a row  \n"
		"\n"
		""},
	 { (char *)"Cmfd_setNumY", (PyCFunction) _wrap_Cmfd_setNumY, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"setNumY(int num_y)  \n"
		"\n"
		"Set the number of Mesh cells in a column.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* num_y :  \n"
		"    Number of Mesh cells in a column  \n"
		"\n"
		""},
	 { (char *)"Cmfd_setNumFSRs", (PyCFunction) _wrap_Cmfd_setNumFSRs, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"setNumFSRs(int num_fsrs)  \n"
		"\n"
		"Set the number of FSRs.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* num_fsrs :  \n"
		"    The number of FSRs  \n"
		"\n"
		""},
	 { (char *)"Cmfd_setNumMOCGroups", (PyCFunction) _wrap_Cmfd_setNumMOCGroups, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"setNumMOCGroups(int num_moc_groups)  \n"
		"\n"
		"Set the number of MOC energy groups.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* num_groups :  \n"
		"    Number of MOC energy groups  \n"
		"\n"
		""},
	 { (char *)"Cmfd_setBoundary", (PyCFunction) _wrap_Cmfd_setBoundary, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"setBoundary(int side, boundaryType boundary)  \n"
		"\n"
		"Set the CMFD boundary type for a given surface.  \n"
		"\n"
		"The CMFD boundary is assumed to be rectangular with the surfaces identified by constants\n"
		"in the constants.h file.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* side :  \n"
		"    The CMFD surface UID.  \n"
		"* boundary :  \n"
		"    The boundaryType of the surface.  \n"
		"\n"
		""},
	 { (char *)"Cmfd_setLatticeStructure", (PyCFunction) _wrap_Cmfd_setLatticeStructure, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"setLatticeStructure(int num_x, int num_y)  \n"
		"\n"
		"The structure of the Lattice to be used as the CMFD mesh.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* num_x :  \n"
		"    The number of cells in the x direction.  \n"
		"* num_y :  \n"
		"    The number of cells in the y direction.  \n"
		"\n"
		""},
	 { (char *)"Cmfd_setFluxUpdateOn", (PyCFunction) _wrap_Cmfd_setFluxUpdateOn, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"setFluxUpdateOn(bool flux_update_on)  \n"
		"\n"
		"Set flag indicating whether to update the MOC flux.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* flux_update_on :  \n"
		"    Boolean saying whether to update MOC flux.  \n"
		"\n"
		""},
	 { (char *)"Cmfd_setCentroidUpdateOn", (PyCFunction) _wrap_Cmfd_setCentroidUpdateOn, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"setCentroidUpdateOn(bool centroid_update_on)  \n"
		"\n"
		"Set flag indicating whether to use FSR centroids to update the MOC flux.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* centroid_update_on :  \n"
		"    Flag saying whether to use centroids to update MOC flux.  \n"
		"\n"
		""},
	 { (char *)"Cmfd_setGroupStructure", (PyCFunction) _wrap_Cmfd_setGroupStructure, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"setGroupStructure(std::vector< std::vector< int > > group_indices)  \n"
		"\n"
		"Set a coarse energy group structure for CMFD.  \n"
		"\n"
		"CMFD does not necessarily need to have the same energy group structure as the MOC problem.\n"
		"This function can be used to set a sparse energy group structure to speed up the CMFD\n"
		"solve. An example of how this may be called from Python to use a coarse 2-group CMFD\n"
		"structure atop a fine 7-group MOC structure is illustrated below:  \n"
		"\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* group_indices :  \n"
		"    A nested vector of MOC-to-CMFD group mapping  \n"
		"\n"
		""},
	 { (char *)"Cmfd_setSourceConvergenceThreshold", (PyCFunction) _wrap_Cmfd_setSourceConvergenceThreshold, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"setSourceConvergenceThreshold(FP_PRECISION source_thresh)  \n"
		"\n"
		"Sets the threshold for CMFD source convergence (>0)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* the :  \n"
		"    threshold for source convergence  \n"
		"\n"
		""},
	 { (char *)"Cmfd_setQuadrature", (PyCFunction) _wrap_Cmfd_setQuadrature, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"setQuadrature(Quadrature *quadrature)  \n"
		"\n"
		"Sets the Quadrature object in use by the MOC Solver.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* quadrature :  \n"
		"    A Quadrature object pointer from the Solver  \n"
		"\n"
		""},
	 { (char *)"Cmfd_setKNearest", (PyCFunction) _wrap_Cmfd_setKNearest, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"setKNearest(int k_nearest)  \n"
		"\n"
		"Set a number of k-nearest neighbor cells to use in updating the FSR flux.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* k_nearest :  \n"
		"    The number of nearest neighbor CMFD cells.  \n"
		"\n"
		""},
	 { (char *)"Cmfd_setFSRMaterials", (PyCFunction) _wrap_Cmfd_setFSRMaterials, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"setFSRMaterials(Material **FSR_materials)  \n"
		"\n"
		"Set the FSR materials array pointer.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* FSR_materials :  \n"
		"    Pointer to FSR_materials array  \n"
		"\n"
		""},
	 { (char *)"Cmfd_setFSRVolumes", (PyCFunction) _wrap_Cmfd_setFSRVolumes, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"setFSRVolumes(FP_PRECISION *FSR_volumes)  \n"
		"\n"
		"Set the pointer to the array of FSR_volumes.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* FSR_volumes :  \n"
		"    Array of FSR volumes  \n"
		"\n"
		""},
	 { (char *)"Cmfd_setFSRFluxes", (PyCFunction) _wrap_Cmfd_setFSRFluxes, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"setFSRFluxes(FP_PRECISION *scalar_flux)  \n"
		"\n"
		"Set pointer to FSR flux array.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* scalar_flux :  \n"
		"    Pointer to FSR flux array  \n"
		"\n"
		""},
	 { (char *)"Cmfd_setCellFSRs", (PyCFunction) _wrap_Cmfd_setCellFSRs, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"setCellFSRs(std::vector< std::vector< int > > *cell_fsrs)  \n"
		"\n"
		"Set the vector of vectors that contains the FSRs that lie in each cell.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* cell_fsrs :  \n"
		"    Vector of vectors containing FSR IDs in each cell.  \n"
		"\n"
		""},
	 { (char *)"Cmfd_swigregister", Cmfd_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Vector", (PyCFunction) _wrap_new_Vector, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"Vector(omp_lock_t *cell_locks, int num_x=1, int num_y=1, int num_groups=1)  \n"
		"\n"
		"Constructor initializes Vector object as a floating point array and sets the vector\n"
		"dimensions.  The vector is ordered by cell (as opposed to by group) on the outside to be\n"
		"consistent with the Matrix object. Locks are used to make the vector object thread-safe\n"
		"against concurrent writes the same value. One lock locks out multiple rows of the vector\n"
		"at a time representing multiple groups in the same cell.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* cell_locks :  \n"
		"    OpenMP locks for atomic cell operations.  \n"
		"* num_x :  \n"
		"    The number of cells in the x direction.  \n"
		"* num_y :  \n"
		"    The number of cells in the y direction.  \n"
		"* num_groups :  \n"
		"    The number of energy groups in each cell.  \n"
		"\n"
		""},
	 { (char *)"delete_Vector", _wrap_delete_Vector, METH_VARARGS, (char *)"\n"
		"\n"
		"~Vector()  \n"
		"\n"
		"Destructor deletes the arrays used to represent the vector.  \n"
		"\n"
		""},
	 { (char *)"Vector_incrementValue", (PyCFunction) _wrap_Vector_incrementValue, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"incrementValue(int cell, int group, FP_PRECISION val)  \n"
		"\n"
		"Increment a value in the vector.  This method takes a cell and group and floating point\n"
		"value. The cell and group are used to compute the row and column in the vector. If a value\n"
		"exists for the row, the value is incremented by val; otherwise, it is set to val.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* cell :  \n"
		"    The cell location.  \n"
		"* group :  \n"
		"    The group location.  \n"
		"* val :  \n"
		"    The value used to increment the row location.  \n"
		"\n"
		""},
	 { (char *)"Vector_incrementValues", (PyCFunction) _wrap_Vector_incrementValues, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"incrementValues(int cell, int group_start, int group_end, FP_PRECISION *vals)  \n"
		"\n"
		"Increment values in the vector.  This method takes a cell, first group, last group, and\n"
		"floating point value. The cell and groups are used to compute the rows in the vector. If\n"
		"values exist for the rows, the values are incremented by vals; otherwise, they are set.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* cell :  \n"
		"    The cell location.  \n"
		"* group_first :  \n"
		"    The first group location to increment.  \n"
		"* group_last :  \n"
		"    The last group location to increment.  \n"
		"* vals :  \n"
		"    The values used to increment the row locations.  \n"
		"\n"
		""},
	 { (char *)"Vector_clear", _wrap_Vector_clear, METH_VARARGS, (char *)"\n"
		"\n"
		"clear()  \n"
		"\n"
		"Clear all values in the vector.  \n"
		"\n"
		""},
	 { (char *)"Vector_scaleByValue", (PyCFunction) _wrap_Vector_scaleByValue, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"scaleByValue(FP_PRECISION val)  \n"
		"\n"
		"Scales the vector by a given value.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* val :  \n"
		"    The value to scale the vector by.  \n"
		"\n"
		""},
	 { (char *)"Vector_printString", _wrap_Vector_printString, METH_VARARGS, (char *)"\n"
		"\n"
		"printString()  \n"
		"\n"
		"Print the vector object to the log file.  \n"
		"\n"
		""},
	 { (char *)"Vector_copyTo", (PyCFunction) _wrap_Vector_copyTo, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"copyTo(Vector *vector)  \n"
		"\n"
		"Copy the values from the current vector to an input vector.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* vector :  \n"
		"    The vector to copy values to.  \n"
		"\n"
		""},
	 { (char *)"Vector_getValue", (PyCFunction) _wrap_Vector_getValue, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"getValue(int cell, int group) -> FP_PRECISION  \n"
		"\n"
		"Get a value at location described by a given cell and group index.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* cell :  \n"
		"    The cell location index.  \n"
		"* group :  \n"
		"    The group location index.  \n"
		"\n"
		""},
	 { (char *)"Vector_getArray", _wrap_Vector_getArray, METH_VARARGS, (char *)"\n"
		"\n"
		"getArray() -> FP_PRECISION *  \n"
		"\n"
		"Get the array describing the vector.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"The array describing the vector.  \n"
		"\n"
		""},
	 { (char *)"Vector_getNumX", _wrap_Vector_getNumX, METH_VARARGS, (char *)"\n"
		"\n"
		"getNumX() -> int  \n"
		"\n"
		"Get the number of cells in the x dimension.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"The number of cells in the x dimension.  \n"
		"\n"
		""},
	 { (char *)"Vector_getNumY", _wrap_Vector_getNumY, METH_VARARGS, (char *)"\n"
		"\n"
		"getNumY() -> int  \n"
		"\n"
		"Get the number of cells in the y dimension.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"The number of cells in the y dimension.  \n"
		"\n"
		""},
	 { (char *)"Vector_getNumGroups", _wrap_Vector_getNumGroups, METH_VARARGS, (char *)"\n"
		"\n"
		"getNumGroups() -> int  \n"
		"\n"
		"Get the number of groups in each cell.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"The number of groups in each cell.  \n"
		"\n"
		""},
	 { (char *)"Vector_getNumRows", _wrap_Vector_getNumRows, METH_VARARGS, (char *)"\n"
		"\n"
		"getNumRows() -> int  \n"
		"\n"
		"Get the number of rows in the vector.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"The number of rows in the vector.  \n"
		"\n"
		""},
	 { (char *)"Vector_getSum", _wrap_Vector_getSum, METH_VARARGS, (char *)"\n"
		"\n"
		"getSum() -> FP_PRECISION  \n"
		"\n"
		"Get the sum of all the values in the vector.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"The sum of all the values in the vector.  \n"
		"\n"
		""},
	 { (char *)"Vector_getCellLocks", _wrap_Vector_getCellLocks, METH_VARARGS, (char *)"\n"
		"\n"
		"getCellLocks() -> omp_lock_t *  \n"
		"\n"
		"Return the array of cell locks for atomic cell operations.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"an array of cell locks  \n"
		"\n"
		""},
	 { (char *)"Vector_setValue", (PyCFunction) _wrap_Vector_setValue, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"setValue(int cell, int group, FP_PRECISION val)  \n"
		"\n"
		"Set a value in the vector.  This method takes a cell and group and floating point value.\n"
		"The cell and group are used to compute the row and column in the vector. The location of\n"
		"the corresponding row is set to val.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* cell :  \n"
		"    The cell location.  \n"
		"* group :  \n"
		"    The group location.  \n"
		"* val :  \n"
		"    The value used to set the row location.  \n"
		"\n"
		""},
	 { (char *)"Vector_setValues", (PyCFunction) _wrap_Vector_setValues, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"setValues(int cell, int group_start, int group_end, FP_PRECISION *vals)  \n"
		"\n"
		"Set values in the vector.  This method takes a cell, first group, last group, and floating\n"
		"point value. The cell and groups are used to compute the rows in the vector. If a values\n"
		"exist for the rows, the values are overwritten.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* cell :  \n"
		"    The cell location.  \n"
		"* group_first :  \n"
		"    The first group location to set.  \n"
		"* group_last :  \n"
		"    The last group location to set.  \n"
		"* vals :  \n"
		"    The values used to set the row locations.  \n"
		"\n"
		""},
	 { (char *)"Vector_setAll", (PyCFunction) _wrap_Vector_setAll, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"setAll(FP_PRECISION val)  \n"
		"\n"
		""},
	 { (char *)"Vector_swigregister", Vector_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Matrix", (PyCFunction) _wrap_new_Matrix, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"Matrix(omp_lock_t *cell_locks, int num_x=1, int num_y=1, int num_groups=1)  \n"
		"\n"
		"Constructor initializes Matrix as a list of lists and sets the matrix dimensions.  The\n"
		"matrix object uses a \"lists of lists\" structure (implemented as a map of lists) to allow\n"
		"for easy setting and incrementing of the values in the object. When the matrix is needed\n"
		"to perform linear algebra operations, it is converted to compressed row storage (CSR) form\n"
		"[1]. The matrix is ordered by cell (as opposed to by group) on the outside. Locks are used\n"
		"to make the matrix thread-safe against concurrent writes the same value. One lock locks\n"
		"out multiple rows of the matrix at a time reprsenting multiple groups in the same cell.  \n"
		"\n"
		"[1] \"Sparse matrix\", Wikipedia, https://en.wikipedia.org/wiki/Sparse_matrix.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* cell_locks :  \n"
		"    Omp locks for atomic cell operations  \n"
		"* num_x :  \n"
		"    The number of cells in the x direction.  \n"
		"* num_y :  \n"
		"    The number of cells in the y direction.  \n"
		"* num_groups :  \n"
		"    The number of energy groups in each cell.  \n"
		"\n"
		""},
	 { (char *)"delete_Matrix", _wrap_delete_Matrix, METH_VARARGS, (char *)"\n"
		"\n"
		"~Matrix()  \n"
		"\n"
		"Destructor clears list of lists and deletes the arrays used to represent the matrix in CSR\n"
		"form.  \n"
		"\n"
		""},
	 { (char *)"Matrix_incrementValue", (PyCFunction) _wrap_Matrix_incrementValue, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"incrementValue(int cell_from, int group_from, int cell_to, int group_to, FP_PRECISION val)  \n"
		"\n"
		"Increment a value in the matrix.  This method takes a cell and group of origin (cell/group\n"
		"from) and cell and group of destination (cell/group to) and floating point value. The\n"
		"origin and destination are used to compute the row and column in the matrix. If a value\n"
		"exists for the row/column, the value is incremented by val; otherwise, it is set to val.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* cell_from :  \n"
		"    The origin cell.  \n"
		"* group_from :  \n"
		"    The origin group.  \n"
		"* cell_to :  \n"
		"    The destination cell.  \n"
		"* group_from :  \n"
		"    The destination group.  \n"
		"* val :  \n"
		"    The value used to increment the row/column location.  \n"
		"\n"
		""},
	 { (char *)"Matrix_clear", _wrap_Matrix_clear, METH_VARARGS, (char *)"\n"
		"\n"
		"clear()  \n"
		"\n"
		"Clear all values in the matrix list of lists.  \n"
		"\n"
		""},
	 { (char *)"Matrix_printString", _wrap_Matrix_printString, METH_VARARGS, (char *)"\n"
		"\n"
		"printString()  \n"
		"\n"
		"Print the matrix object to the log file.  \n"
		"\n"
		""},
	 { (char *)"Matrix_transpose", _wrap_Matrix_transpose, METH_VARARGS, (char *)"\n"
		"\n"
		"transpose()  \n"
		"\n"
		"Transpose the matrix in place.  \n"
		"\n"
		""},
	 { (char *)"Matrix_getValue", (PyCFunction) _wrap_Matrix_getValue, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"getValue(int cell_from, int group_from, int cell_to, int group_to) -> FP_PRECISION  \n"
		"\n"
		"Get a value in the matrix.  This method takes a cell and group of origin (cell/group from)\n"
		"and cell and group of destination (cell/group to). The origin and destination are used to\n"
		"compute the row and column in the matrix. The value at the location specified by the\n"
		"row/column is returned.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* cell_from :  \n"
		"    The origin cell.  \n"
		"* group_from :  \n"
		"    The origin group.  \n"
		"* cell_to :  \n"
		"    The destination cell.  \n"
		"* group_from :  \n"
		"    The destination group.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"The value at the corresponding row/column location.  \n"
		"\n"
		""},
	 { (char *)"Matrix_getLU", _wrap_Matrix_getLU, METH_VARARGS, (char *)"\n"
		"\n"
		"getLU() -> FP_PRECISION *  \n"
		"\n"
		"Get the lower + upper (LU) component of the CSR form of the matrix object.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"A pointer to the lower + upper (LU) component of the CSR form matrix object.  \n"
		"\n"
		""},
	 { (char *)"Matrix_getILU", _wrap_Matrix_getILU, METH_VARARGS, (char *)"\n"
		"\n"
		"getILU() -> int *  \n"
		"\n"
		"Get an array of the row indices (I) component of the CSR form of the lower + upper (LU)\n"
		"components of the matrix.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"A pointer to the I component of the CSR form of the LU components of the matrix.  \n"
		"\n"
		""},
	 { (char *)"Matrix_getJLU", _wrap_Matrix_getJLU, METH_VARARGS, (char *)"\n"
		"\n"
		"getJLU() -> int *  \n"
		"\n"
		"Get an array of the column indices (J) component of the CSR form of the lower + upper (LU)\n"
		"components of the matrix.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"A pointer to the J component of the CSR form of the LU components of the matrix.  \n"
		"\n"
		""},
	 { (char *)"Matrix_getNumX", _wrap_Matrix_getNumX, METH_VARARGS, (char *)"\n"
		"\n"
		"getNumX() -> int  \n"
		"\n"
		"Get the number of cells in the x dimension.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"The number of cells in the x dimension.  \n"
		"\n"
		""},
	 { (char *)"Matrix_getNumY", _wrap_Matrix_getNumY, METH_VARARGS, (char *)"\n"
		"\n"
		"getNumY() -> int  \n"
		"\n"
		"Get the number of cells in the y dimension.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"The number of cells in the y dimension.  \n"
		"\n"
		""},
	 { (char *)"Matrix_getNumGroups", _wrap_Matrix_getNumGroups, METH_VARARGS, (char *)"\n"
		"\n"
		"getNumGroups() -> int  \n"
		"\n"
		"Get the number of groups in each cell.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"The number of groups in each cell.  \n"
		"\n"
		""},
	 { (char *)"Matrix_getNumRows", _wrap_Matrix_getNumRows, METH_VARARGS, (char *)"\n"
		"\n"
		"getNumRows() -> int  \n"
		"\n"
		"Get the number of rows in the matrix.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"The number of rows in the matrix.  \n"
		"\n"
		""},
	 { (char *)"Matrix_getNNZ", _wrap_Matrix_getNNZ, METH_VARARGS, (char *)"\n"
		"\n"
		"getNNZ() -> int  \n"
		"\n"
		"Get the number of non-zero values in the full matrix.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"The number of non-zero values in the full matrix.  \n"
		"\n"
		""},
	 { (char *)"Matrix_getNNZLU", _wrap_Matrix_getNNZLU, METH_VARARGS, (char *)"\n"
		"\n"
		"getNNZLU() -> int  \n"
		"\n"
		"Get the number of non-zero values in the lower + upper components of the matrix.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"The number of non-zero values in the lower + upper components of the matrix.  \n"
		"\n"
		""},
	 { (char *)"Matrix_getCellLocks", _wrap_Matrix_getCellLocks, METH_VARARGS, (char *)"\n"
		"\n"
		"getCellLocks() -> omp_lock_t *  \n"
		"\n"
		"Return the array of cell locks for atomic cell operations.  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"an array of cell locks  \n"
		"\n"
		""},
	 { (char *)"Matrix_setValue", (PyCFunction) _wrap_Matrix_setValue, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"setValue(int cell_from, int group_from, int cell_to, int group_to, FP_PRECISION val)  \n"
		"\n"
		"Set a value in the matrix.  This method takes a cell and group of origin (cell/group from)\n"
		"and cell and group of destination (cell/group to) and floating point value. The origin and\n"
		"destination are used to compute the row and column in the matrix. The location specified\n"
		"by the row/column is set to val.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* cell_from :  \n"
		"    The origin cell.  \n"
		"* group_from :  \n"
		"    The origin group.  \n"
		"* cell_to :  \n"
		"    The destination cell.  \n"
		"* group_from :  \n"
		"    The destination group.  \n"
		"* val :  \n"
		"    The value used to set the row/column location.  \n"
		"\n"
		""},
	 { (char *)"Matrix_swigregister", Matrix_swigregister, METH_VARARGS, NULL},
	 { (char *)"eigenvalueSolve", (PyCFunction) _wrap_eigenvalueSolve, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"eigenvalueSolve(Matrix *A, Matrix *M, Vector *X, FP_PRECISION tol, FP_PRECISION\n"
		"    SOR_factor=1.5) -> FP_PRECISION  \n"
		"\n"
		"Solves a generalized eigenvalue problem using the Power method.  \n"
		"\n"
		"This function takes in a loss + streaming Matrix (A), a fission gain Matrix (M), a flux\n"
		"Vector (X), a tolerance used for both the power method and linear solve convergence (tol),\n"
		"and a successive over-relaxation factor (SOR_factor) and computes the dominant eigenvalue\n"
		"and eigenvector using the Power method. The eigenvalue is returned and the input X Vector\n"
		"is modified in place to be the corresponding eigenvector.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* A :  \n"
		"    the loss + streaming Matrix object  \n"
		"* M :  \n"
		"    the fission gain Matrix object  \n"
		"* X :  \n"
		"    the flux Vector object  \n"
		"* tol :  \n"
		"    the power method and linear solve source convergence threshold  \n"
		"* SOR_factor :  \n"
		"    the successive over-relaxation factor  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"k_eff the dominant eigenvalue  \n"
		"\n"
		""},
	 { (char *)"linearSolve", (PyCFunction) _wrap_linearSolve, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"linearSolve(Matrix *A, Matrix *M, Vector *X, Vector *B, FP_PRECISION tol, FP_PRECISION\n"
		"    SOR_factor=1.5)  \n"
		"\n"
		"Solves a linear system using Red-Black Gauss Seidel with successive over-relaxation.  \n"
		"\n"
		"This function takes in a loss + streaming Matrix (A), a fission gain Matrix (M), a flux\n"
		"Vector (X), a source Vector (B), a source convergence tolerance (tol) and a successive\n"
		"over-relaxation factor (SOR_factor) and computes the solution to the linear system. The\n"
		"input X Vector is modified in place to be the solution vector.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* A :  \n"
		"    the loss + streaming Matrix object  \n"
		"* M :  \n"
		"    the fission gain Matrix object  \n"
		"* X :  \n"
		"    the flux Vector object  \n"
		"* B :  \n"
		"    the source Vector object  \n"
		"* tol :  \n"
		"    the power method and linear solve source convergence threshold  \n"
		"* SOR_factor :  \n"
		"    the successive over-relaxation factor  \n"
		"\n"
		""},
	 { (char *)"matrixMultiplication", (PyCFunction) _wrap_matrixMultiplication, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"matrixMultiplication(Matrix *A, Vector *X, Vector *B)  \n"
		"\n"
		"Performs a matrix vector multiplication.  \n"
		"\n"
		"This function takes in a Matrix (A), a variable Vector (X), and a solution Vector (B) and\n"
		"computes the matrix vector product. The solution Vector is modified in place.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* A :  \n"
		"    a Matrix object  \n"
		"* X :  \n"
		"    the variable Vector object  \n"
		"* B :  \n"
		"    the solution Vector object  \n"
		"\n"
		""},
	 { (char *)"computeRMSE", (PyCFunction) _wrap_computeRMSE, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"\n"
		"computeRMSE(Vector *x, Vector *y, bool integrated) -> FP_PRECISION  \n"
		"\n"
		"Computes the Root Mean Square Error of two Vectors.  \n"
		"\n"
		"This function takes in two vectors (X and Y) and computes the Root Mean Square Error of\n"
		"the Vector Y with respect to Vector X. The boolean integrated must also be given to\n"
		"indicate whether the operation on the vector should be group-wise integrated before\n"
		"performing the RMSE operation.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* X :  \n"
		"    a Vector object  \n"
		"* Y :  \n"
		"    a second Vector object  \n"
		"* integrated :  \n"
		"    a boolean indicating whether to group-wise integrate.  \n"
		"\n"
		""},
	 { NULL, NULL, 0, NULL }
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_TYPolarQuadTo_p_Quadrature(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Quadrature *)  ((TYPolarQuad *) x));
}
static void *_p_LeonardPolarQuadTo_p_Quadrature(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Quadrature *)  ((LeonardPolarQuad *) x));
}
static void *_p_GLPolarQuadTo_p_Quadrature(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Quadrature *)  ((GLPolarQuad *) x));
}
static void *_p_EqualWeightPolarQuadTo_p_Quadrature(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Quadrature *)  ((EqualWeightPolarQuad *) x));
}
static void *_p_EqualAnglePolarQuadTo_p_Quadrature(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Quadrature *)  ((EqualAnglePolarQuad *) x));
}
static void *_p_XPlaneTo_p_Surface(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Surface *) (Plane *) ((XPlane *) x));
}
static void *_p_PlaneTo_p_Surface(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Surface *)  ((Plane *) x));
}
static void *_p_YPlaneTo_p_Surface(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Surface *) (Plane *) ((YPlane *) x));
}
static void *_p_ZPlaneTo_p_Surface(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Surface *) (Plane *) ((ZPlane *) x));
}
static void *_p_ZCylinderTo_p_Surface(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Surface *)  ((ZCylinder *) x));
}
static void *_p_LatticeTo_p_Universe(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Universe *)  ((Lattice *) x));
}
static void *_p_p_LatticeTo_p_p_Universe(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Universe **)  ((Lattice **) x));
}
static void *_p_CPUSolverTo_p_Solver(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Solver *)  ((CPUSolver *) x));
}
static void *_p_XPlaneTo_p_Plane(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Plane *)  ((XPlane *) x));
}
static void *_p_YPlaneTo_p_Plane(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Plane *)  ((YPlane *) x));
}
static void *_p_ZPlaneTo_p_Plane(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Plane *)  ((ZPlane *) x));
}
static swig_type_info _swigt__p_CPUSolver = {"_p_CPUSolver", "CPUSolver *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Cell = {"_p_Cell", "Cell *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Cmfd = {"_p_Cmfd", "Cmfd *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_EqualAnglePolarQuad = {"_p_EqualAnglePolarQuad", "EqualAnglePolarQuad *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_EqualWeightPolarQuad = {"_p_EqualWeightPolarQuad", "EqualWeightPolarQuad *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ExpEvaluator = {"_p_ExpEvaluator", "ExpEvaluator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GLPolarQuad = {"_p_GLPolarQuad", "GLPolarQuad *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Geometry = {"_p_Geometry", "Geometry *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Lattice = {"_p_Lattice", "Lattice *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LeonardPolarQuad = {"_p_LeonardPolarQuad", "LeonardPolarQuad *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LocalCoords = {"_p_LocalCoords", "LocalCoords *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Material = {"_p_Material", "Material *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Matrix = {"_p_Matrix", "Matrix *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ParallelHashMapT_std__string_fsr_data_p_t = {"_p_ParallelHashMapT_std__string_fsr_data_p_t", "ParallelHashMap< std::string,fsr_data * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Plane = {"_p_Plane", "Plane *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Point = {"_p_Point", "Point *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Quadrature = {"_p_Quadrature", "Quadrature *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Solver = {"_p_Solver", "Solver *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Surface = {"_p_Surface", "Surface *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TYPolarQuad = {"_p_TYPolarQuad", "TYPolarQuad *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Timer = {"_p_Timer", "Timer *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Track = {"_p_Track", "Track *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TrackGenerator = {"_p_TrackGenerator", "TrackGenerator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Universe = {"_p_Universe", "Universe *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Vector = {"_p_Vector", "Vector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_XPlane = {"_p_XPlane", "XPlane *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_YPlane = {"_p_YPlane", "YPlane *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ZCylinder = {"_p_ZCylinder", "ZCylinder *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ZPlane = {"_p_ZPlane", "ZPlane *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_allocator_type = {"_p_allocator_type", "allocator_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_difference_type = {"_p_difference_type", "difference_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_double = {"_p_double", "double *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_float = {"_p_float", "float *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_fsr_data = {"_p_fsr_data", "fsr_data *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "int *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_logLevels = {"_p_logLevels", "enum logLevels *|logLevel *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_omp_lock_t = {"_p_omp_lock_t", "omp_lock_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_Material = {"_p_p_Material", "Material **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_PyObject = {"_p_p_PyObject", "PyObject **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_Track = {"_p_p_Track", "Track **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_Universe = {"_p_p_Universe", "Universe **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_Lattice = {"_p_p_Lattice", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_double = {"_p_p_double", "double **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_float = {"_p_p_float", "float **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_segment = {"_p_segment", "segment *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_segmentationType = {"_p_segmentationType", "segmentationType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_size_type = {"_p_size_type", "size_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_double_t = {"_p_std__allocatorT_double_t", "std::vector< double >::allocator_type *|std::allocator< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_int_t = {"_p_std__allocatorT_int_t", "std::vector< int >::allocator_type *|std::allocator< int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t = {"_p_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t", "std::vector< std::vector< int > >::allocator_type *|std::allocator< std::vector< int,std::allocator< int > > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__invalid_argument = {"_p_std__invalid_argument", "std::invalid_argument *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__mapT_int_Cell_p_std__lessT_int_t_std__allocatorT_std__pairT_int_const_Cell_p_t_t_t = {"_p_std__mapT_int_Cell_p_std__lessT_int_t_std__allocatorT_std__pairT_int_const_Cell_p_t_t_t", "std::map< int,Cell *,std::less< int >,std::allocator< std::pair< int const,Cell * > > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__pairT_int_float_t = {"_p_std__pairT_int_float_t", "std::pair< int,float > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__string = {"_p_std__string", "std::string *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_Cell_p_std__allocatorT_Cell_p_t_t = {"_p_std__vectorT_Cell_p_std__allocatorT_Cell_p_t_t", "std::vector< Cell *,std::allocator< Cell * > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_double_std__allocatorT_double_t_t = {"_p_std__vectorT_double_std__allocatorT_double_t_t", "std::vector< double,std::allocator< double > > *|std::vector< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_int_std__allocatorT_int_t_t = {"_p_std__vectorT_int_std__allocatorT_int_t_t", "std::vector< int,std::allocator< int > > *|std::vector< int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__string_std__allocatorT_std__string_t_t = {"_p_std__vectorT_std__string_std__allocatorT_std__string_t_t", "std::vector< std::string,std::allocator< std::string > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t = {"_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t", "std::vector< std::vector< int > > *|std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > *|std::vector< std::vector< int,std::allocator< int > > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__vectorT_std__vectorT_std__pairT_int_Universe_p_t_std__allocatorT_std__pairT_int_Universe_p_t_t_t_std__allocatorT_std__vectorT_std__pairT_int_Universe_p_t_std__allocatorT_std__pairT_int_Universe_p_t_t_t_t_t_std__allocatorT_std__vectorT_std__vectorT_std__pairT_int_Universe_p_t_std__allocatorT_std__pairT_int_Universe_p_t_t_t_std__allocatorT_std__vectorT_std__pairT_int_Universe_p_t_std__allocatorT_std__pairT_int_Universe_p_t_t_t_t_t_t_t = {"_p_std__vectorT_std__vectorT_std__vectorT_std__pairT_int_Universe_p_t_std__allocatorT_std__pairT_int_Universe_p_t_t_t_std__allocatorT_std__vectorT_std__pairT_int_Universe_p_t_std__allocatorT_std__pairT_int_Universe_p_t_t_t_t_t_std__allocatorT_std__vectorT_std__vectorT_std__pairT_int_Universe_p_t_std__allocatorT_std__pairT_int_Universe_p_t_t_t_std__allocatorT_std__vectorT_std__pairT_int_Universe_p_t_std__allocatorT_std__pairT_int_Universe_p_t_t_t_t_t_t_t", "std::vector< std::vector< std::vector< std::pair< int,Universe * >,std::allocator< std::pair< int,Universe * > > >,std::allocator< std::vector< std::pair< int,Universe * >,std::allocator< std::pair< int,Universe * > > > > >,std::allocator< std::vector< std::vector< std::pair< int,Universe * >,std::allocator< std::pair< int,Universe * > > >,std::allocator< std::vector< std::pair< int,Universe * >,std::allocator< std::pair< int,Universe * > > > > > > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_surface_halfspace = {"_p_surface_halfspace", "surface_halfspace *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_swig__SwigPyIterator = {"_p_swig__SwigPyIterator", "swig::SwigPyIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_value_type = {"_p_value_type", "value_type *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_CPUSolver,
  &_swigt__p_Cell,
  &_swigt__p_Cmfd,
  &_swigt__p_EqualAnglePolarQuad,
  &_swigt__p_EqualWeightPolarQuad,
  &_swigt__p_ExpEvaluator,
  &_swigt__p_GLPolarQuad,
  &_swigt__p_Geometry,
  &_swigt__p_Lattice,
  &_swigt__p_LeonardPolarQuad,
  &_swigt__p_LocalCoords,
  &_swigt__p_Material,
  &_swigt__p_Matrix,
  &_swigt__p_ParallelHashMapT_std__string_fsr_data_p_t,
  &_swigt__p_Plane,
  &_swigt__p_Point,
  &_swigt__p_Quadrature,
  &_swigt__p_Solver,
  &_swigt__p_Surface,
  &_swigt__p_TYPolarQuad,
  &_swigt__p_Timer,
  &_swigt__p_Track,
  &_swigt__p_TrackGenerator,
  &_swigt__p_Universe,
  &_swigt__p_Vector,
  &_swigt__p_XPlane,
  &_swigt__p_YPlane,
  &_swigt__p_ZCylinder,
  &_swigt__p_ZPlane,
  &_swigt__p_allocator_type,
  &_swigt__p_char,
  &_swigt__p_difference_type,
  &_swigt__p_double,
  &_swigt__p_float,
  &_swigt__p_fsr_data,
  &_swigt__p_int,
  &_swigt__p_logLevels,
  &_swigt__p_omp_lock_t,
  &_swigt__p_p_Lattice,
  &_swigt__p_p_Material,
  &_swigt__p_p_PyObject,
  &_swigt__p_p_Track,
  &_swigt__p_p_Universe,
  &_swigt__p_p_double,
  &_swigt__p_p_float,
  &_swigt__p_segment,
  &_swigt__p_segmentationType,
  &_swigt__p_size_type,
  &_swigt__p_std__allocatorT_double_t,
  &_swigt__p_std__allocatorT_int_t,
  &_swigt__p_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t,
  &_swigt__p_std__invalid_argument,
  &_swigt__p_std__mapT_int_Cell_p_std__lessT_int_t_std__allocatorT_std__pairT_int_const_Cell_p_t_t_t,
  &_swigt__p_std__pairT_int_float_t,
  &_swigt__p_std__string,
  &_swigt__p_std__vectorT_Cell_p_std__allocatorT_Cell_p_t_t,
  &_swigt__p_std__vectorT_double_std__allocatorT_double_t_t,
  &_swigt__p_std__vectorT_int_std__allocatorT_int_t_t,
  &_swigt__p_std__vectorT_std__string_std__allocatorT_std__string_t_t,
  &_swigt__p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t,
  &_swigt__p_std__vectorT_std__vectorT_std__vectorT_std__pairT_int_Universe_p_t_std__allocatorT_std__pairT_int_Universe_p_t_t_t_std__allocatorT_std__vectorT_std__pairT_int_Universe_p_t_std__allocatorT_std__pairT_int_Universe_p_t_t_t_t_t_std__allocatorT_std__vectorT_std__vectorT_std__pairT_int_Universe_p_t_std__allocatorT_std__pairT_int_Universe_p_t_t_t_std__allocatorT_std__vectorT_std__pairT_int_Universe_p_t_std__allocatorT_std__pairT_int_Universe_p_t_t_t_t_t_t_t,
  &_swigt__p_surface_halfspace,
  &_swigt__p_swig__SwigPyIterator,
  &_swigt__p_value_type,
};

static swig_cast_info _swigc__p_CPUSolver[] = {  {&_swigt__p_CPUSolver, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Cell[] = {  {&_swigt__p_Cell, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Cmfd[] = {  {&_swigt__p_Cmfd, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_EqualAnglePolarQuad[] = {  {&_swigt__p_EqualAnglePolarQuad, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_EqualWeightPolarQuad[] = {  {&_swigt__p_EqualWeightPolarQuad, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ExpEvaluator[] = {  {&_swigt__p_ExpEvaluator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GLPolarQuad[] = {  {&_swigt__p_GLPolarQuad, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Geometry[] = {  {&_swigt__p_Geometry, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Lattice[] = {  {&_swigt__p_Lattice, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LeonardPolarQuad[] = {  {&_swigt__p_LeonardPolarQuad, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LocalCoords[] = {  {&_swigt__p_LocalCoords, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Material[] = {  {&_swigt__p_Material, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Matrix[] = {  {&_swigt__p_Matrix, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ParallelHashMapT_std__string_fsr_data_p_t[] = {  {&_swigt__p_ParallelHashMapT_std__string_fsr_data_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Plane[] = {  {&_swigt__p_Plane, 0, 0, 0},  {&_swigt__p_XPlane, _p_XPlaneTo_p_Plane, 0, 0},  {&_swigt__p_YPlane, _p_YPlaneTo_p_Plane, 0, 0},  {&_swigt__p_ZPlane, _p_ZPlaneTo_p_Plane, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Point[] = {  {&_swigt__p_Point, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Quadrature[] = {  {&_swigt__p_Quadrature, 0, 0, 0},  {&_swigt__p_TYPolarQuad, _p_TYPolarQuadTo_p_Quadrature, 0, 0},  {&_swigt__p_LeonardPolarQuad, _p_LeonardPolarQuadTo_p_Quadrature, 0, 0},  {&_swigt__p_GLPolarQuad, _p_GLPolarQuadTo_p_Quadrature, 0, 0},  {&_swigt__p_EqualWeightPolarQuad, _p_EqualWeightPolarQuadTo_p_Quadrature, 0, 0},  {&_swigt__p_EqualAnglePolarQuad, _p_EqualAnglePolarQuadTo_p_Quadrature, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Solver[] = {  {&_swigt__p_Solver, 0, 0, 0},  {&_swigt__p_CPUSolver, _p_CPUSolverTo_p_Solver, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Surface[] = {  {&_swigt__p_Plane, _p_PlaneTo_p_Surface, 0, 0},  {&_swigt__p_XPlane, _p_XPlaneTo_p_Surface, 0, 0},  {&_swigt__p_Surface, 0, 0, 0},  {&_swigt__p_YPlane, _p_YPlaneTo_p_Surface, 0, 0},  {&_swigt__p_ZPlane, _p_ZPlaneTo_p_Surface, 0, 0},  {&_swigt__p_ZCylinder, _p_ZCylinderTo_p_Surface, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TYPolarQuad[] = {  {&_swigt__p_TYPolarQuad, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Timer[] = {  {&_swigt__p_Timer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Track[] = {  {&_swigt__p_Track, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TrackGenerator[] = {  {&_swigt__p_TrackGenerator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Universe[] = {  {&_swigt__p_Universe, 0, 0, 0},  {&_swigt__p_Lattice, _p_LatticeTo_p_Universe, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Vector[] = {  {&_swigt__p_Vector, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_XPlane[] = {  {&_swigt__p_XPlane, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_YPlane[] = {  {&_swigt__p_YPlane, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ZCylinder[] = {  {&_swigt__p_ZCylinder, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ZPlane[] = {  {&_swigt__p_ZPlane, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_allocator_type[] = {  {&_swigt__p_allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_difference_type[] = {  {&_swigt__p_difference_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_double[] = {  {&_swigt__p_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_float[] = {  {&_swigt__p_float, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_fsr_data[] = {  {&_swigt__p_fsr_data, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_logLevels[] = {  {&_swigt__p_logLevels, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_omp_lock_t[] = {  {&_swigt__p_omp_lock_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_Material[] = {  {&_swigt__p_p_Material, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_PyObject[] = {  {&_swigt__p_p_PyObject, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_Track[] = {  {&_swigt__p_p_Track, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_Lattice[] = {{&_swigt__p_p_Lattice, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_Universe[] = {  {&_swigt__p_p_Universe, 0, 0, 0},  {&_swigt__p_p_Lattice, _p_p_LatticeTo_p_p_Universe, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_double[] = {  {&_swigt__p_p_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_float[] = {  {&_swigt__p_p_float, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_segment[] = {  {&_swigt__p_segment, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_segmentationType[] = {  {&_swigt__p_segmentationType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_size_type[] = {  {&_swigt__p_size_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_double_t[] = {  {&_swigt__p_std__allocatorT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_int_t[] = {  {&_swigt__p_std__allocatorT_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t[] = {  {&_swigt__p_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__invalid_argument[] = {  {&_swigt__p_std__invalid_argument, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mapT_int_Cell_p_std__lessT_int_t_std__allocatorT_std__pairT_int_const_Cell_p_t_t_t[] = {  {&_swigt__p_std__mapT_int_Cell_p_std__lessT_int_t_std__allocatorT_std__pairT_int_const_Cell_p_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__pairT_int_float_t[] = {  {&_swigt__p_std__pairT_int_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__string[] = {  {&_swigt__p_std__string, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_Cell_p_std__allocatorT_Cell_p_t_t[] = {  {&_swigt__p_std__vectorT_Cell_p_std__allocatorT_Cell_p_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_double_std__allocatorT_double_t_t[] = {  {&_swigt__p_std__vectorT_double_std__allocatorT_double_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_int_std__allocatorT_int_t_t[] = {  {&_swigt__p_std__vectorT_int_std__allocatorT_int_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__string_std__allocatorT_std__string_t_t[] = {  {&_swigt__p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t[] = {  {&_swigt__p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__vectorT_std__vectorT_std__pairT_int_Universe_p_t_std__allocatorT_std__pairT_int_Universe_p_t_t_t_std__allocatorT_std__vectorT_std__pairT_int_Universe_p_t_std__allocatorT_std__pairT_int_Universe_p_t_t_t_t_t_std__allocatorT_std__vectorT_std__vectorT_std__pairT_int_Universe_p_t_std__allocatorT_std__pairT_int_Universe_p_t_t_t_std__allocatorT_std__vectorT_std__pairT_int_Universe_p_t_std__allocatorT_std__pairT_int_Universe_p_t_t_t_t_t_t_t[] = {  {&_swigt__p_std__vectorT_std__vectorT_std__vectorT_std__pairT_int_Universe_p_t_std__allocatorT_std__pairT_int_Universe_p_t_t_t_std__allocatorT_std__vectorT_std__pairT_int_Universe_p_t_std__allocatorT_std__pairT_int_Universe_p_t_t_t_t_t_std__allocatorT_std__vectorT_std__vectorT_std__pairT_int_Universe_p_t_std__allocatorT_std__pairT_int_Universe_p_t_t_t_std__allocatorT_std__vectorT_std__pairT_int_Universe_p_t_std__allocatorT_std__pairT_int_Universe_p_t_t_t_t_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_surface_halfspace[] = {  {&_swigt__p_surface_halfspace, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_swig__SwigPyIterator[] = {  {&_swigt__p_swig__SwigPyIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_value_type[] = {  {&_swigt__p_value_type, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_CPUSolver,
  _swigc__p_Cell,
  _swigc__p_Cmfd,
  _swigc__p_EqualAnglePolarQuad,
  _swigc__p_EqualWeightPolarQuad,
  _swigc__p_ExpEvaluator,
  _swigc__p_GLPolarQuad,
  _swigc__p_Geometry,
  _swigc__p_Lattice,
  _swigc__p_LeonardPolarQuad,
  _swigc__p_LocalCoords,
  _swigc__p_Material,
  _swigc__p_Matrix,
  _swigc__p_ParallelHashMapT_std__string_fsr_data_p_t,
  _swigc__p_Plane,
  _swigc__p_Point,
  _swigc__p_Quadrature,
  _swigc__p_Solver,
  _swigc__p_Surface,
  _swigc__p_TYPolarQuad,
  _swigc__p_Timer,
  _swigc__p_Track,
  _swigc__p_TrackGenerator,
  _swigc__p_Universe,
  _swigc__p_Vector,
  _swigc__p_XPlane,
  _swigc__p_YPlane,
  _swigc__p_ZCylinder,
  _swigc__p_ZPlane,
  _swigc__p_allocator_type,
  _swigc__p_char,
  _swigc__p_difference_type,
  _swigc__p_double,
  _swigc__p_float,
  _swigc__p_fsr_data,
  _swigc__p_int,
  _swigc__p_logLevels,
  _swigc__p_omp_lock_t,
  _swigc__p_p_Lattice,
  _swigc__p_p_Material,
  _swigc__p_p_PyObject,
  _swigc__p_p_Track,
  _swigc__p_p_Universe,
  _swigc__p_p_double,
  _swigc__p_p_float,
  _swigc__p_segment,
  _swigc__p_segmentationType,
  _swigc__p_size_type,
  _swigc__p_std__allocatorT_double_t,
  _swigc__p_std__allocatorT_int_t,
  _swigc__p_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t,
  _swigc__p_std__invalid_argument,
  _swigc__p_std__mapT_int_Cell_p_std__lessT_int_t_std__allocatorT_std__pairT_int_const_Cell_p_t_t_t,
  _swigc__p_std__pairT_int_float_t,
  _swigc__p_std__string,
  _swigc__p_std__vectorT_Cell_p_std__allocatorT_Cell_p_t_t,
  _swigc__p_std__vectorT_double_std__allocatorT_double_t_t,
  _swigc__p_std__vectorT_int_std__allocatorT_int_t_t,
  _swigc__p_std__vectorT_std__string_std__allocatorT_std__string_t_t,
  _swigc__p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t,
  _swigc__p_std__vectorT_std__vectorT_std__vectorT_std__pairT_int_Universe_p_t_std__allocatorT_std__pairT_int_Universe_p_t_t_t_std__allocatorT_std__vectorT_std__pairT_int_Universe_p_t_std__allocatorT_std__pairT_int_Universe_p_t_t_t_t_t_std__allocatorT_std__vectorT_std__vectorT_std__pairT_int_Universe_p_t_std__allocatorT_std__pairT_int_Universe_p_t_t_t_std__allocatorT_std__vectorT_std__pairT_int_Universe_p_t_std__allocatorT_std__pairT_int_Universe_p_t_t_t_t_t_t_t,
  _swigc__p_surface_halfspace,
  _swigc__p_swig__SwigPyIterator,
  _swigc__p_value_type,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

static swig_const_info swig_const_table[] = {
{0, 0, 0, 0.0, 0, 0}};

#ifdef __cplusplus
}
#endif
/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned statically to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int init;
  
  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }
  
  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    iter=module_head;
    do {
      if (iter==&swig_module) {
        /* Our module is already in the list, so there's nothing more to do. */
        return;
      }
      iter=iter->next;
    } while (iter!= module_head);
    
    /* otherwise we must add our module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }
  
  /* When multiple interpreters are used, a module could have already been initialized in
       a different interpreter, but not yet have a pointer in this interpreter.
       In this case, we do not want to continue adding types... everything should be
       set up already */
  if (init == 0) return;
  
  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
    
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif
    
    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
        type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }
    
    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
        if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
        if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
          printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
          cast->type = ret;
          ret = 0;
        } else {
          /* Check for casting already in the list */
          swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
          if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
          if (!ocast) ret = 0;
        }
      }
      
      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;
  
#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
    printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;
  
  if (init_run) return;
  init_run = 1;
  
  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
          SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{
  /* c-mode */
#endif
}
#endif



#ifdef __cplusplus
extern "C" {
#endif
  
  /* Python-specific SWIG API */
#define SWIG_newvarlink()                             SWIG_Python_newvarlink()
#define SWIG_addvarlink(p, name, get_attr, set_attr)  SWIG_Python_addvarlink(p, name, get_attr, set_attr)
#define SWIG_InstallConstants(d, constants)           SWIG_Python_InstallConstants(d, constants)
  
  /* -----------------------------------------------------------------------------
   * global variable support code.
   * ----------------------------------------------------------------------------- */
  
  typedef struct swig_globalvar {
    char       *name;                  /* Name of global variable */
    PyObject *(*get_attr)(void);       /* Return the current value */
    int       (*set_attr)(PyObject *); /* Set the value */
    struct swig_globalvar *next;
  } swig_globalvar;
  
  typedef struct swig_varlinkobject {
    PyObject_HEAD
    swig_globalvar *vars;
  } swig_varlinkobject;
  
  SWIGINTERN PyObject *
  swig_varlink_repr(swig_varlinkobject *SWIGUNUSEDPARM(v)) {
#if PY_VERSION_HEX >= 0x03000000
    return PyUnicode_InternFromString("<Swig global variables>");
#else
    return PyString_FromString("<Swig global variables>");
#endif
  }
  
  SWIGINTERN PyObject *
  swig_varlink_str(swig_varlinkobject *v) {
#if PY_VERSION_HEX >= 0x03000000
    PyObject *str = PyUnicode_InternFromString("(");
    PyObject *tail;
    PyObject *joined;
    swig_globalvar *var;
    for (var = v->vars; var; var=var->next) {
      tail = PyUnicode_FromString(var->name);
      joined = PyUnicode_Concat(str, tail);
      Py_DecRef(str);
      Py_DecRef(tail);
      str = joined;
      if (var->next) {
        tail = PyUnicode_InternFromString(", ");
        joined = PyUnicode_Concat(str, tail);
        Py_DecRef(str);
        Py_DecRef(tail);
        str = joined;
      }
    }
    tail = PyUnicode_InternFromString(")");
    joined = PyUnicode_Concat(str, tail);
    Py_DecRef(str);
    Py_DecRef(tail);
    str = joined;
#else
    PyObject *str = PyString_FromString("(");
    swig_globalvar *var;
    for (var = v->vars; var; var=var->next) {
      PyString_ConcatAndDel(&str,PyString_FromString(var->name));
      if (var->next) PyString_ConcatAndDel(&str,PyString_FromString(", "));
    }
    PyString_ConcatAndDel(&str,PyString_FromString(")"));
#endif
    return str;
  }
  
  SWIGINTERN int
  swig_varlink_print(swig_varlinkobject *v, FILE *fp, int SWIGUNUSEDPARM(flags)) {
    char *tmp;
    PyObject *str = swig_varlink_str(v);
    fprintf(fp,"Swig global variables ");
    fprintf(fp,"%s\n", tmp = SWIG_Python_str_AsChar(str));
    SWIG_Python_str_DelForPy3(tmp);
    Py_DECREF(str);
    return 0;
  }
  
  SWIGINTERN void
  swig_varlink_dealloc(swig_varlinkobject *v) {
    swig_globalvar *var = v->vars;
    while (var) {
      swig_globalvar *n = var->next;
      free(var->name);
      free(var);
      var = n;
    }
  }
  
  SWIGINTERN PyObject *
  swig_varlink_getattr(swig_varlinkobject *v, char *n) {
    PyObject *res = NULL;
    swig_globalvar *var = v->vars;
    while (var) {
      if (strcmp(var->name,n) == 0) {
        res = (*var->get_attr)();
        break;
      }
      var = var->next;
    }
    if (res == NULL && !PyErr_Occurred()) {
      PyErr_Format(PyExc_AttributeError, "Unknown C global variable '%s'", n);
    }
    return res;
  }
  
  SWIGINTERN int
  swig_varlink_setattr(swig_varlinkobject *v, char *n, PyObject *p) {
    int res = 1;
    swig_globalvar *var = v->vars;
    while (var) {
      if (strcmp(var->name,n) == 0) {
        res = (*var->set_attr)(p);
        break;
      }
      var = var->next;
    }
    if (res == 1 && !PyErr_Occurred()) {
      PyErr_Format(PyExc_AttributeError, "Unknown C global variable '%s'", n);
    }
    return res;
  }
  
  SWIGINTERN PyTypeObject*
  swig_varlink_type(void) {
    static char varlink__doc__[] = "Swig var link object";
    static PyTypeObject varlink_type;
    static int type_init = 0;
    if (!type_init) {
      const PyTypeObject tmp = {
        /* PyObject header changed in Python 3 */
#if PY_VERSION_HEX >= 0x03000000
        PyVarObject_HEAD_INIT(NULL, 0)
#else
        PyObject_HEAD_INIT(NULL)
        0,                                  /* ob_size */
#endif
        (char *)"swigvarlink",              /* tp_name */
        sizeof(swig_varlinkobject),         /* tp_basicsize */
        0,                                  /* tp_itemsize */
        (destructor) swig_varlink_dealloc,  /* tp_dealloc */
        (printfunc) swig_varlink_print,     /* tp_print */
        (getattrfunc) swig_varlink_getattr, /* tp_getattr */
        (setattrfunc) swig_varlink_setattr, /* tp_setattr */
        0,                                  /* tp_compare */
        (reprfunc) swig_varlink_repr,       /* tp_repr */
        0,                                  /* tp_as_number */
        0,                                  /* tp_as_sequence */
        0,                                  /* tp_as_mapping */
        0,                                  /* tp_hash */
        0,                                  /* tp_call */
        (reprfunc) swig_varlink_str,        /* tp_str */
        0,                                  /* tp_getattro */
        0,                                  /* tp_setattro */
        0,                                  /* tp_as_buffer */
        0,                                  /* tp_flags */
        varlink__doc__,                     /* tp_doc */
        0,                                  /* tp_traverse */
        0,                                  /* tp_clear */
        0,                                  /* tp_richcompare */
        0,                                  /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, /* tp_iter -> tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
        0,                                  /* tp_del */
#endif
#if PY_VERSION_HEX >= 0x02060000
        0,                                  /* tp_version */
#endif
#ifdef COUNT_ALLOCS
        0,0,0,0                             /* tp_alloc -> tp_next */
#endif
      };
      varlink_type = tmp;
      type_init = 1;
#if PY_VERSION_HEX < 0x02020000
      varlink_type.ob_type = &PyType_Type;
#else
      if (PyType_Ready(&varlink_type) < 0)
      return NULL;
#endif
    }
    return &varlink_type;
  }
  
  /* Create a variable linking object for use later */
  SWIGINTERN PyObject *
  SWIG_Python_newvarlink(void) {
    swig_varlinkobject *result = PyObject_NEW(swig_varlinkobject, swig_varlink_type());
    if (result) {
      result->vars = 0;
    }
    return ((PyObject*) result);
  }
  
  SWIGINTERN void 
  SWIG_Python_addvarlink(PyObject *p, char *name, PyObject *(*get_attr)(void), int (*set_attr)(PyObject *p)) {
    swig_varlinkobject *v = (swig_varlinkobject *) p;
    swig_globalvar *gv = (swig_globalvar *) malloc(sizeof(swig_globalvar));
    if (gv) {
      size_t size = strlen(name)+1;
      gv->name = (char *)malloc(size);
      if (gv->name) {
        strncpy(gv->name,name,size);
        gv->get_attr = get_attr;
        gv->set_attr = set_attr;
        gv->next = v->vars;
      }
    }
    v->vars = gv;
  }
  
  SWIGINTERN PyObject *
  SWIG_globals(void) {
    static PyObject *_SWIG_globals = 0; 
    if (!_SWIG_globals) _SWIG_globals = SWIG_newvarlink();  
    return _SWIG_globals;
  }
  
  /* -----------------------------------------------------------------------------
   * constants/methods manipulation
   * ----------------------------------------------------------------------------- */
  
  /* Install Constants */
  SWIGINTERN void
  SWIG_Python_InstallConstants(PyObject *d, swig_const_info constants[]) {
    PyObject *obj = 0;
    size_t i;
    for (i = 0; constants[i].type; ++i) {
      switch(constants[i].type) {
      case SWIG_PY_POINTER:
        obj = SWIG_InternalNewPointerObj(constants[i].pvalue, *(constants[i]).ptype,0);
        break;
      case SWIG_PY_BINARY:
        obj = SWIG_NewPackedObj(constants[i].pvalue, constants[i].lvalue, *(constants[i].ptype));
        break;
      default:
        obj = 0;
        break;
      }
      if (obj) {
        PyDict_SetItemString(d, constants[i].name, obj);
        Py_DECREF(obj);
      }
    }
  }
  
  /* -----------------------------------------------------------------------------*/
  /* Fix SwigMethods to carry the callback ptrs when needed */
  /* -----------------------------------------------------------------------------*/
  
  SWIGINTERN void
  SWIG_Python_FixMethods(PyMethodDef *methods,
    swig_const_info *const_table,
    swig_type_info **types,
    swig_type_info **types_initial) {
    size_t i;
    for (i = 0; methods[i].ml_name; ++i) {
      const char *c = methods[i].ml_doc;
      if (!c) continue;
      c = strstr(c, "swig_ptr: ");
      if (c) {
        int j;
        swig_const_info *ci = 0;
        const char *name = c + 10;
        for (j = 0; const_table[j].type; ++j) {
          if (strncmp(const_table[j].name, name, 
              strlen(const_table[j].name)) == 0) {
            ci = &(const_table[j]);
            break;
          }
        }
        if (ci) {
          void *ptr = (ci->type == SWIG_PY_POINTER) ? ci->pvalue : 0;
          if (ptr) {
            size_t shift = (ci->ptype) - types;
            swig_type_info *ty = types_initial[shift];
            size_t ldoc = (c - methods[i].ml_doc);
            size_t lptr = strlen(ty->name)+2*sizeof(void*)+2;
            char *ndoc = (char*)malloc(ldoc + lptr + 10);
            if (ndoc) {
              char *buff = ndoc;
              strncpy(buff, methods[i].ml_doc, ldoc);
              buff += ldoc;
              strncpy(buff, "swig_ptr: ", 10);
              buff += 10;
              SWIG_PackVoidPtr(buff, ptr, ty->name, lptr);
              methods[i].ml_doc = ndoc;
            }
          }
        }
      }
    }
  } 
  
#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------*
 *  Partial Init method
 * -----------------------------------------------------------------------------*/

#ifdef __cplusplus
extern "C"
#endif

SWIGEXPORT 
#if PY_VERSION_HEX >= 0x03000000
PyObject*
#else
void
#endif
SWIG_init(void) {
  PyObject *m, *d, *md;
#if PY_VERSION_HEX >= 0x03000000
  static struct PyModuleDef SWIG_module = {
# if PY_VERSION_HEX >= 0x03020000
    PyModuleDef_HEAD_INIT,
# else
    {
      PyObject_HEAD_INIT(NULL)
      NULL, /* m_init */
      0,    /* m_index */
      NULL, /* m_copy */
    },
# endif
    (char *) SWIG_name,
    NULL,
    -1,
    SwigMethods,
    NULL,
    NULL,
    NULL,
    NULL
  };
#endif
  
#if defined(SWIGPYTHON_BUILTIN)
  static SwigPyClientData SwigPyObject_clientdata = {
    0, 0, 0, 0, 0, 0, 0
  };
  static PyGetSetDef this_getset_def = {
    (char *)"this", &SwigPyBuiltin_ThisClosure, NULL, NULL, NULL
  };
  static SwigPyGetSet thisown_getset_closure = {
    (PyCFunction) SwigPyObject_own,
    (PyCFunction) SwigPyObject_own
  };
  static PyGetSetDef thisown_getset_def = {
    (char *)"thisown", SwigPyBuiltin_GetterClosure, SwigPyBuiltin_SetterClosure, NULL, &thisown_getset_closure
  };
  PyObject *metatype_args;
  PyTypeObject *builtin_pytype;
  int builtin_base_count;
  swig_type_info *builtin_basetype;
  PyObject *tuple;
  PyGetSetDescrObject *static_getset;
  PyTypeObject *metatype;
  SwigPyClientData *cd;
  PyObject *public_interface, *public_symbol;
  PyObject *this_descr;
  PyObject *thisown_descr;
  PyObject *self = 0;
  int i;
  
  (void)builtin_pytype;
  (void)builtin_base_count;
  (void)builtin_basetype;
  (void)tuple;
  (void)static_getset;
  (void)self;
  
  /* metatype is used to implement static member variables. */
  metatype_args = Py_BuildValue("(s(O){})", "SwigPyObjectType", &PyType_Type);
  assert(metatype_args);
  metatype = (PyTypeObject *) PyType_Type.tp_call((PyObject *) &PyType_Type, metatype_args, NULL);
  assert(metatype);
  Py_DECREF(metatype_args);
  metatype->tp_setattro = (setattrofunc) &SwigPyObjectType_setattro;
  assert(PyType_Ready(metatype) >= 0);
#endif
  
  /* Fix SwigMethods to carry the callback ptrs when needed */
  SWIG_Python_FixMethods(SwigMethods, swig_const_table, swig_types, swig_type_initial);
  
#if PY_VERSION_HEX >= 0x03000000
  m = PyModule_Create(&SWIG_module);
#else
  m = Py_InitModule((char *) SWIG_name, SwigMethods);
#endif
  
  md = d = PyModule_GetDict(m);
  (void)md;
  
  SWIG_InitializeModule(0);
  
#ifdef SWIGPYTHON_BUILTIN
  SwigPyObject_stype = SWIG_MangledTypeQuery("_p_SwigPyObject");
  assert(SwigPyObject_stype);
  cd = (SwigPyClientData*) SwigPyObject_stype->clientdata;
  if (!cd) {
    SwigPyObject_stype->clientdata = &SwigPyObject_clientdata;
    SwigPyObject_clientdata.pytype = SwigPyObject_TypeOnce();
  } else if (SwigPyObject_TypeOnce()->tp_basicsize != cd->pytype->tp_basicsize) {
    PyErr_SetString(PyExc_RuntimeError, "Import error: attempted to load two incompatible swig-generated modules.");
# if PY_VERSION_HEX >= 0x03000000
    return NULL;
# else
    return;
# endif
  }
  
  /* All objects have a 'this' attribute */
  this_descr = PyDescr_NewGetSet(SwigPyObject_type(), &this_getset_def);
  (void)this_descr;
  
  /* All objects have a 'thisown' attribute */
  thisown_descr = PyDescr_NewGetSet(SwigPyObject_type(), &thisown_getset_def);
  (void)thisown_descr;
  
  public_interface = PyList_New(0);
  public_symbol = 0;
  (void)public_symbol;
  
  PyDict_SetItemString(md, "__all__", public_interface);
  Py_DECREF(public_interface);
  for (i = 0; SwigMethods[i].ml_name != NULL; ++i)
  SwigPyBuiltin_AddPublicSymbol(public_interface, SwigMethods[i].ml_name);
  for (i = 0; swig_const_table[i].name != 0; ++i)
  SwigPyBuiltin_AddPublicSymbol(public_interface, swig_const_table[i].name);
#endif
  
  SWIG_InstallConstants(d,swig_const_table);
  
  
  import_array();
  
#if PY_VERSION_HEX >= 0x03000000
  return m;
#else
  return;
#endif
}

